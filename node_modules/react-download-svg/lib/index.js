'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Trigger = exports.Wrapper = undefined;

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _wolfy87Eventemitter = require('wolfy87-eventemitter');

var _wolfy87Eventemitter2 = _interopRequireDefault(_wolfy87Eventemitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ee = new _wolfy87Eventemitter2.default();

var Trigger = _react2.default.createClass({
  displayName: 'DownloadSvgTrigger',
  propTypes: {
    component: _react2.default.PropTypes.any,
    filename: _react2.default.PropTypes.string,
    eventName: _react2.default.PropTypes.string,
    width: _react2.default.PropTypes.number,
    height: _react2.default.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      filename: null,
      width: 400,
      height: 400,
      eventName: 'downloadSvg',
      component: 'button'
    };
  },

  handleExport: function handleExport() {
    // Request a PNG with a specific size.
    ee.emit(this.props.eventName, {
      width: this.props.width,
      height: this.props.height,
      filename: this.props.filename
    });
  },

  render: function render() {
    return _react2.default.createElement(this.props.component, {
      className: this.props.className,
      onClick: this.handleExport
    }, this.props.children);
  }
});

var Wrapper = _react2.default.createClass({
  displayName: 'DownloadSvgWrapper',
  propTypes: {
    filename: _react2.default.PropTypes.string,
    listenFor: _react2.default.PropTypes.string
  },

  getInitialState: function getInitialState() {
    return {
      width: this.props.initialWidth || '100%',
      height: this.props.initialHeight || '100%',
      downloadableOptions: null,
      creatingDownloadable: false
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      filename: 'untitled.png',
      listenFor: 'downloadSvg'
    };
  },

  componentDidMount: function componentDidMount() {
    ee.addListener(this.props.listenFor, this.startDownload);
    this.isChrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (!this.state.creatingDownloadable) return;

    // Finish creating downloadable data
    var _state$downloadableOp = this.state.downloadableOptions;
    var width = _state$downloadableOp.width;
    var height = _state$downloadableOp.height;

    var filename = this.state.downloadableOptions.filename;
    if (!filename) filename = this.props.filename;
    var $svg = _reactDom2.default.findDOMNode(this.wrapperNode).getElementsByTagName('svg')[0];
    //
    var $clone = $svg.cloneNode(true);

    $clone.setAttribute('width', width);
    $clone.setAttribute('height', height);

    // Reset to original size
    this.setState({
      width: prevState.width,
      height: prevState.height,
      downloadableOptions: null,
      creatingDownloadable: false
    });

    var svgData = new XMLSerializer().serializeToString($clone);

    var canvas = document.createElement('canvas');

    // Image will be scaled to the requested size.
    // var size = data.requestedSize;
    canvas.setAttribute('width', width);
    canvas.setAttribute('height', height);

    var ctx = canvas.getContext('2d');

    var img = document.createElement('img');

    // New window for the image when it's loaded
    if (!this.isChrome) window.open('', 'download');

    img.onload = function () {
      ctx.drawImage(img, 0, 0, width, height);
      // `download` attr is not well supported
      // Will result in a download popup for chrome and the
      // image opening in a new tab for others.

      var a = document.createElement('a');
      a.setAttribute('href', canvas.toDataURL('image/png'));
      a.setAttribute('target', 'download');
      a.setAttribute('download', filename);
      a.click();
    };

    img.setAttribute('src', 'data:image/svg+xml;base64,' + btoa(svgData));
  },

  /**
   * Expects object with:
   * width: Number
   * height: Number
   * filename: String (optional)
   */
  startDownload: function startDownload(data) {
    this.setState({
      width: data.width,
      height: data.height,
      downloadableOptions: data,
      creatingDownloadable: true
    });
  },

  render: function render() {
    var _this = this;

    var _state = this.state;
    var width = _state.width;
    var height = _state.height;


    var childrenWithProps = _react2.default.Children.map(this.props.children, function (child) {
      return _react2.default.cloneElement(child, {
        width: width,
        height: height
      });
    });

    return _react2.default.createElement(
      'div',
      { ref: function ref(node) {
          return _this.wrapperNode = node;
        } },
      childrenWithProps
    );
  }
});

exports.Wrapper = Wrapper;
exports.Trigger = Trigger;