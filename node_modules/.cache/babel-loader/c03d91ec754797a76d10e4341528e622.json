{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/src/components/DragdropAva.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Cluster from './Cluster';\nimport ModAvatar from './ModAvatar';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ToggleGroup from './Buttons';\nconst POKETAR_WHITE = \"#ffffff\";\nconst POKETAR_BLUE = \"#5db9ff\";\nconst POKETAR_PURPLE = \"#DAF7A6\"; //face component selected color?\n\nconst POKETAR_RED = \"#ff1f1f\";\nconst POKETAR_YELLOW = \"#ffffff\"; // face component selections?\n\nfunction DragdropAva(props) {\n  const avaDetails = props.avaDetails;\n  const skinColorSet = props.skincolor;\n  const hairColorSet = props.hairColorSet;\n  const clothColorSet = props.clothColorSet;\n  const datafromBackend = props.datafromBackend;\n  console.log(skinColorSet); // function that handles drag ending event\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n\n    if (destination.droppableId === 'MainAvatar') {\n      const draggable_string = result.draggableId; // console.log(result);\n\n      const regfound_tags = draggable_string.match(/([A-Za-z]+)_([A-Za-z]+)/);\n      const [type, style] = [regfound_tags[1], regfound_tags[2]];\n      const newDetails = handleOnChangeAvatar(type, style);\n      props.avaChangeFun(newDetails);\n    }\n  } // update current avatar look\n\n\n  function handleOnChangeAvatar(type, style) {\n    const updatedDetails = avaDetails;\n    updatedDetails[type] = style;\n    return updatedDetails; // console.log(avaDetails);  \n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container-fluid\",\n    id: \"content-container\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleOnDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"MainAvatar\",\n        children: (provided, snapshot) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"my_ava\",\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            style: {\n              background: snapshot.isDraggingOver ? POKETAR_BLUE : POKETAR_WHITE\n            },\n            children: /*#__PURE__*/_jsxDEV(ModAvatar, {\n              avaDetails: avaDetails\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-sm-4\",\n          id: \"skin_color\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Skin Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"bd-example\",\n            children: /*#__PURE__*/_jsxDEV(ToggleGroup, {\n              className: \"colors\",\n              colorCode: skinColorSet,\n              colorType: \"skinColor\",\n              changeColorFun: props.setcolorDisplay,\n              updateFunction: handleOnChangeAvatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-sm-4\",\n          id: \"hair_color\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hair Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ToggleGroup, {\n            className: \"colors\",\n            colorCode: hairColorSet,\n            colorType: \"hairColor\",\n            changeColorFun: props.setcolorDisplay,\n            updateFunction: handleOnChangeAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-sm-4\",\n          id: \"cloth_color\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Cloth Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ToggleGroup, {\n            className: \"colors\",\n            colorCode: clothColorSet,\n            colorType: \"clotheColor\",\n            changeColorFun: props.setcolorDisplay,\n            updateFunction: handleOnChangeAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = DragdropAva;\nexport default DragdropAva;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragdropAva\");","map":{"version":3,"sources":["/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/src/components/DragdropAva.js"],"names":["React","useState","useEffect","Cluster","ModAvatar","DragDropContext","Droppable","Draggable","ToggleGroup","POKETAR_WHITE","POKETAR_BLUE","POKETAR_PURPLE","POKETAR_RED","POKETAR_YELLOW","DragdropAva","props","avaDetails","skinColorSet","skincolor","hairColorSet","clothColorSet","datafromBackend","console","log","handleOnDragEnd","result","destination","source","droppableId","draggable_string","draggableId","regfound_tags","match","type","style","newDetails","handleOnChangeAvatar","avaChangeFun","updatedDetails","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","setcolorDisplay"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from \"react\";\nimport Cluster from './Cluster';\nimport ModAvatar from './ModAvatar';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ToggleGroup from './Buttons';\n\nconst POKETAR_WHITE = \"#ffffff\"\nconst POKETAR_BLUE = \"#5db9ff\"\nconst POKETAR_PURPLE = \"#DAF7A6\" //face component selected color?\nconst POKETAR_RED = \"#ff1f1f\"\nconst POKETAR_YELLOW = \"#ffffff\" // face component selections?\n\n\nfunction DragdropAva (props){\n\n    const avaDetails = props.avaDetails;\n    const skinColorSet = props.skincolor;\n    const hairColorSet = props.hairColorSet;\n    const clothColorSet = props.clothColorSet;\n    const datafromBackend = props.datafromBackend;\n\n    console.log(skinColorSet);\n    // function that handles drag ending event\n    function handleOnDragEnd(result){\n        if(!result.destination) return;\n        const{source,destination} = result;\n        if (destination.droppableId === 'MainAvatar'){\n            const draggable_string = result.draggableId;\n            // console.log(result);\n            const regfound_tags = draggable_string.match(/([A-Za-z]+)_([A-Za-z]+)/);\n            const [type, style] = [regfound_tags[1], regfound_tags[2]];\n            const newDetails = handleOnChangeAvatar(type, style);\n            props.avaChangeFun(newDetails);\n            \n        }\n    }\n\n    // update current avatar look\n    function handleOnChangeAvatar(type, style) {\n        const updatedDetails = avaDetails;\n        updatedDetails[type] = style;\n        return updatedDetails;\n        // console.log(avaDetails);  \n        }\n\nreturn (\n    <div class='container-fluid' id = 'content-container'>\n    {/*center avatar*/}\n    <DragDropContext onDragEnd = {handleOnDragEnd}>\n      {/* Dropable portion that of the Avatar display */}\n      <Droppable droppableId = \"MainAvatar\" > \n        {(provided,snapshot) => {\n          return (\n            <div id = \"my_ava\"\n            {...provided.droppableProps} ref={provided.innerRef} \n              style = {{\n              background: snapshot.isDraggingOver? POKETAR_BLUE: POKETAR_WHITE}}>\n              <ModAvatar avaDetails = {avaDetails}/>\n            </div>)\n            }}\n      </Droppable>\n\n      {/*color rows*/}\n      <div class=\"row\">\n        <div class=\"col-sm-4\" id='skin_color'>\n          <h3>Skin Color</h3>\n            <div class=\"bd-example\">\n            <ToggleGroup className=\"colors\" colorCode = {skinColorSet} colorType = 'skinColor' changeColorFun = {props.setcolorDisplay} updateFunction = {handleOnChangeAvatar}/> \n            </div>\n        </div> \n        <div class=\"col-sm-4\" id='hair_color'>\n          <h3>Hair Color</h3>\n            <ToggleGroup className=\"colors\" colorCode = {hairColorSet} colorType = 'hairColor' changeColorFun = {props.setcolorDisplay} updateFunction = {handleOnChangeAvatar}/> \n        </div>\n        <div class=\"col-sm-4\" id='cloth_color'>\n          <h3>Cloth Color</h3>\n          <ToggleGroup className=\"colors\" colorCode = {clothColorSet} colorType = 'clotheColor' changeColorFun = {props.setcolorDisplay} updateFunction = {handleOnChangeAvatar}/> \n        </div>\n      </div>\n\n\n      </DragDropContext>\n\n    </div> \n);\n\n    \n}\n\nexport default DragdropAva;"]},"metadata":{},"sourceType":"module"}