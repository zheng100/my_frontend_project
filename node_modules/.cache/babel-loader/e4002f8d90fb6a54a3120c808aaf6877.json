{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/src/components/DragdropAva.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Cluster from './Cluster';\nimport ModAvatar from './ModAvatar';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ToggleGroup from './Buttons';\nconst POKETAR_WHITE = \"#ffffff\";\nconst POKETAR_BLUE = \"#5db9ff\";\nconst POKETAR_PURPLE = \"#DAF7A6\"; //face component selected color?\n\nconst POKETAR_RED = \"#ff1f1f\";\nconst POKETAR_YELLOW = \"#ffffff\"; // face component selections?\n\nfunction DragdropAva(props) {\n  const avaDetails = props.avaDetails;\n  const skinColorSet = props.skinColorSet;\n  const hairColorSet = props.hairColorSet;\n  const clothColorSet = props.clothColorSet;\n  const datafromBackend = props.datafromBackend;\n  console.log(skinColorSet); // function that handles drag ending event\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n\n    if (destination.droppableId === 'MainAvatar') {\n      const draggable_string = result.draggableId; // console.log(result);\n\n      const regfound_tags = draggable_string.match(/([A-Za-z]+)_([A-Za-z]+)/);\n      const [type, style] = [regfound_tags[1], regfound_tags[2]];\n      const newDetails = handleOnChangeAvatar(type, style);\n      props.avaChangeFun(newDetails);\n    }\n  } // update current avatar look\n\n\n  function handleOnChangeAvatar(type, style) {\n    const updatedDetails = avaDetails;\n    updatedDetails[type] = style;\n    return updatedDetails; // console.log(avaDetails);  \n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container-fluid\",\n    id: \"content-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = DragdropAva;\nexport default DragdropAva;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragdropAva\");","map":{"version":3,"sources":["/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/src/components/DragdropAva.js"],"names":["React","useState","useEffect","Cluster","ModAvatar","DragDropContext","Droppable","Draggable","ToggleGroup","POKETAR_WHITE","POKETAR_BLUE","POKETAR_PURPLE","POKETAR_RED","POKETAR_YELLOW","DragdropAva","props","avaDetails","skinColorSet","hairColorSet","clothColorSet","datafromBackend","console","log","handleOnDragEnd","result","destination","source","droppableId","draggable_string","draggableId","regfound_tags","match","type","style","newDetails","handleOnChangeAvatar","avaChangeFun","updatedDetails"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;AACA,OAAOC,WAAP,MAAwB,WAAxB;AAEA,MAAMC,aAAa,GAAG,SAAtB;AACA,MAAMC,YAAY,GAAG,SAArB;AACA,MAAMC,cAAc,GAAG,SAAvB,C,CAAiC;;AACjC,MAAMC,WAAW,GAAG,SAApB;AACA,MAAMC,cAAc,GAAG,SAAvB,C,CAAiC;;AAGjC,SAASC,WAAT,CAAsBC,KAAtB,EAA4B;AAExB,QAAMC,UAAU,GAAGD,KAAK,CAACC,UAAzB;AACA,QAAMC,YAAY,GAAGF,KAAK,CAACE,YAA3B;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACG,YAA3B;AACA,QAAMC,aAAa,GAAGJ,KAAK,CAACI,aAA5B;AACA,QAAMC,eAAe,GAAGL,KAAK,CAACK,eAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ,EARwB,CASxB;;AACA,WAASM,eAAT,CAAyBC,MAAzB,EAAgC;AAC5B,QAAG,CAACA,MAAM,CAACC,WAAX,EAAwB;AACxB,UAAK;AAACC,MAAAA,MAAD;AAAQD,MAAAA;AAAR,QAAuBD,MAA5B;;AACA,QAAIC,WAAW,CAACE,WAAZ,KAA4B,YAAhC,EAA6C;AACzC,YAAMC,gBAAgB,GAAGJ,MAAM,CAACK,WAAhC,CADyC,CAEzC;;AACA,YAAMC,aAAa,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,yBAAvB,CAAtB;AACA,YAAM,CAACC,IAAD,EAAOC,KAAP,IAAgB,CAACH,aAAa,CAAC,CAAD,CAAd,EAAmBA,aAAa,CAAC,CAAD,CAAhC,CAAtB;AACA,YAAMI,UAAU,GAAGC,oBAAoB,CAACH,IAAD,EAAOC,KAAP,CAAvC;AACAlB,MAAAA,KAAK,CAACqB,YAAN,CAAmBF,UAAnB;AAEH;AACJ,GAtBuB,CAwBxB;;;AACA,WAASC,oBAAT,CAA8BH,IAA9B,EAAoCC,KAApC,EAA2C;AACvC,UAAMI,cAAc,GAAGrB,UAAvB;AACAqB,IAAAA,cAAc,CAACL,IAAD,CAAd,GAAuBC,KAAvB;AACA,WAAOI,cAAP,CAHuC,CAIvC;AACC;;AAET,sBACI;AAAK,IAAA,KAAK,EAAC,iBAAX;AAA6B,IAAA,EAAE,EAAG;AAAlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQC;;KAxCQvB,W;AA0CT,eAAeA,WAAf","sourcesContent":["import React , {useState, useEffect} from \"react\";\nimport Cluster from './Cluster';\nimport ModAvatar from './ModAvatar';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ToggleGroup from './Buttons';\n\nconst POKETAR_WHITE = \"#ffffff\"\nconst POKETAR_BLUE = \"#5db9ff\"\nconst POKETAR_PURPLE = \"#DAF7A6\" //face component selected color?\nconst POKETAR_RED = \"#ff1f1f\"\nconst POKETAR_YELLOW = \"#ffffff\" // face component selections?\n\n\nfunction DragdropAva (props){\n\n    const avaDetails = props.avaDetails;\n    const skinColorSet = props.skinColorSet;\n    const hairColorSet = props.hairColorSet;\n    const clothColorSet = props.clothColorSet;\n    const datafromBackend = props.datafromBackend;\n\n    console.log(skinColorSet);\n    // function that handles drag ending event\n    function handleOnDragEnd(result){\n        if(!result.destination) return;\n        const{source,destination} = result;\n        if (destination.droppableId === 'MainAvatar'){\n            const draggable_string = result.draggableId;\n            // console.log(result);\n            const regfound_tags = draggable_string.match(/([A-Za-z]+)_([A-Za-z]+)/);\n            const [type, style] = [regfound_tags[1], regfound_tags[2]];\n            const newDetails = handleOnChangeAvatar(type, style);\n            props.avaChangeFun(newDetails);\n            \n        }\n    }\n\n    // update current avatar look\n    function handleOnChangeAvatar(type, style) {\n        const updatedDetails = avaDetails;\n        updatedDetails[type] = style;\n        return updatedDetails;\n        // console.log(avaDetails);  \n        }\n\nreturn (\n    <div class='container-fluid' id = 'content-container'>\n\n\n    </div> \n);\n\n    \n}\n\nexport default DragdropAva;"]},"metadata":{},"sourceType":"module"}