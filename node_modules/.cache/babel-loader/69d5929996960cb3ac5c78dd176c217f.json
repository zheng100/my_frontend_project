{"ast":null,"code":"import _objectSpread from\"/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from\"react\";import Cluster from'./Cluster';import ModAvatar from'./ModAvatar';import{DragDropContext,Droppable,Draggable}from'react-beautiful-dnd';import ToggleGroup from'./Buttons';var POKETAR_WHITE=\"#ffffff\";var POKETAR_BLUE=\"#5db9ff\";var POKETAR_PURPLE=\"#DAF7A6\";//face component selected color?\nvar POKETAR_RED=\"#ff1f1f\";var POKETAR_YELLOW=\"#ffffff\";// face component selections?\nfunction DragdropAva(props){var _useState=useState(props.avaDetails),_useState2=_slicedToArray(_useState,2),avaDetails=_useState2[0],setavaDetails=_useState2[1];useEffect(function(){setavaDetails(props.avaDetails);},[props.avaDetails]);var skinColorSet=props.skinColorSet;var hairColorSet=props.hairColorSet;var clothColorSet=props.clothColorSet;var datafromBackend=props.datafromBackend;// function that handles drag ending event\nfunction handleOnDragEnd(result){if(!result.destination)return;var source=result.source,destination=result.destination;if(destination.droppableId==='MainAvatar'){var draggable_string=result.draggableId;var regfound_tags=draggable_string.match(/([A-Za-z]+)_([A-Za-z]+)/);var _ref=[regfound_tags[1],regfound_tags[2]],type=_ref[0],style=_ref[1];handleOnChangeAvatar(type,style);}}// update current avatar look\nfunction handleOnChangeAvatar(type,style){var updatedDetails=avaDetails;updatedDetails[type]=style;// console.log(updatedDetails);\nprops.avaChangeFun(updatedDetails);}return/*#__PURE__*/_jsx(\"div\",{class:\"container-fluid\",id:\"content-container\",children:/*#__PURE__*/_jsxs(DragDropContext,{onDragEnd:handleOnDragEnd,children:[/*#__PURE__*/_jsx(Droppable,{droppableId:\"MainAvatar\",children:function children(provided,snapshot){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({id:\"my_ava\"},provided.droppableProps),{},{ref:provided.innerRef,style:{background:snapshot.isDraggingOver?POKETAR_BLUE:POKETAR_WHITE},children:/*#__PURE__*/_jsx(ModAvatar,{avaDetails:avaDetails})}));}}),/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-sm-4\",id:\"skin_color\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Skin Color\"}),/*#__PURE__*/_jsx(\"div\",{className:\"bd-example\",children:/*#__PURE__*/_jsx(ToggleGroup,{className:\"colors\",colorCode:skinColorSet,colorType:\"skinColor\",changeColorFun:props.setcolorDisplay,updateFunction:handleOnChangeAvatar})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-sm-4\",id:\"hair_color\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Hair Color\"}),/*#__PURE__*/_jsx(ToggleGroup,{className:\"colors\",colorCode:hairColorSet,colorType:\"hairColor\",changeColorFun:props.setcolorDisplay,updateFunction:handleOnChangeAvatar})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-sm-4\",id:\"cloth_color\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Cloth Color\"}),/*#__PURE__*/_jsx(ToggleGroup,{className:\"colors\",colorCode:clothColorSet,colorType:\"clotheColor\",changeColorFun:props.setcolorDisplay,updateFunction:handleOnChangeAvatar})]})]}),/*#__PURE__*/_jsx(\"h2\",{className:\"Instructions\",children:\" Step 2: Drag and Drop items to Change his look! \"}),/*#__PURE__*/_jsx(\"div\",{id:\"droppable-content\",children:Object.entries(datafromBackend).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),type=_ref3[0],styles=_ref3[1];return/*#__PURE__*/_jsx(\"div\",{id:\"step2_wrap\",children:/*#__PURE__*/_jsx(Droppable,{droppableId:type,children:function children(provided,snapshot){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({className:\"OverflowColumn\"},provided.droppableProps),{},{ref:provided.innerRef,style:{background:snapshot.isDraggingOver?POKETAR_BLUE:POKETAR_WHITE},children:/*#__PURE__*/_jsx(\"ul\",{className:\"addons\",children:styles.map(function(style,index){return/*#__PURE__*/ (// Each item in the column is a draggable\n_jsx(Draggable,{draggableId:type+'_'+style,index:index,children:function children(provided,snapshot){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread(_objectSpread({ref:provided.innerRef},provided.draggableProps),provided.dragHandleProps),{},{style:_objectSpread({backgroundColor:snapshot.isDragging?POKETAR_PURPLE:POKETAR_YELLOW,color:POKETAR_WHITE},provided.draggableProps.style),children:/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"wrap\",{className:\"selectAble\",children:/*#__PURE__*/_jsx(Cluster,{type:type,style:style})})},type+style)}));}},index));})})}));}})});})})]})});}export default DragdropAva;","map":{"version":3,"sources":["/Users/BobbyZheng/Desktop/INFO_253/Final_project/group-project-bmt/src/components/DragdropAva.js"],"names":["React","useState","useEffect","Cluster","ModAvatar","DragDropContext","Droppable","Draggable","ToggleGroup","POKETAR_WHITE","POKETAR_BLUE","POKETAR_PURPLE","POKETAR_RED","POKETAR_YELLOW","DragdropAva","props","avaDetails","setavaDetails","skinColorSet","hairColorSet","clothColorSet","datafromBackend","handleOnDragEnd","result","destination","source","droppableId","draggable_string","draggableId","regfound_tags","match","type","style","handleOnChangeAvatar","updatedDetails","avaChangeFun","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","setcolorDisplay","Object","entries","map","styles","index","draggableProps","dragHandleProps","backgroundColor","isDragging","color"],"mappings":"ycAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA0C,OAA1C,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,OAASC,eAAT,CAA0BC,SAA1B,CAAqCC,SAArC,KAAsD,qBAAtD,CACA,MAAOC,CAAAA,WAAP,KAAwB,WAAxB,CAEA,GAAMC,CAAAA,aAAa,CAAG,SAAtB,CACA,GAAMC,CAAAA,YAAY,CAAG,SAArB,CACA,GAAMC,CAAAA,cAAc,CAAG,SAAvB,CAAiC;AACjC,GAAMC,CAAAA,WAAW,CAAG,SAApB,CACA,GAAMC,CAAAA,cAAc,CAAG,SAAvB,CAAiC;AAGjC,QAASC,CAAAA,WAAT,CAAsBC,KAAtB,CAA4B,eAEWd,QAAQ,CAACc,KAAK,CAACC,UAAP,CAFnB,wCAEjBA,UAFiB,eAENC,aAFM,eAGxBf,SAAS,CAAC,UAAM,CAAEe,aAAa,CAACF,KAAK,CAACC,UAAP,CAAb,CAAiC,CAA1C,CAA4C,CAACD,KAAK,CAACC,UAAP,CAA5C,CAAT,CAEA,GAAME,CAAAA,YAAY,CAAGH,KAAK,CAACG,YAA3B,CACA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACI,YAA3B,CACA,GAAMC,CAAAA,aAAa,CAAGL,KAAK,CAACK,aAA5B,CACA,GAAMC,CAAAA,eAAe,CAAGN,KAAK,CAACM,eAA9B,CAEA;AACA,QAASC,CAAAA,eAAT,CAAyBC,MAAzB,CAAgC,CAC5B,GAAG,CAACA,MAAM,CAACC,WAAX,CAAwB,OADI,GAEtBC,CAAAA,MAFsB,CAEAF,MAFA,CAEtBE,MAFsB,CAEfD,WAFe,CAEAD,MAFA,CAEfC,WAFe,CAG5B,GAAIA,WAAW,CAACE,WAAZ,GAA4B,YAAhC,CAA6C,CACzC,GAAMC,CAAAA,gBAAgB,CAAGJ,MAAM,CAACK,WAAhC,CACA,GAAMC,CAAAA,aAAa,CAAGF,gBAAgB,CAACG,KAAjB,CAAuB,yBAAvB,CAAtB,CAFyC,SAGnB,CAACD,aAAa,CAAC,CAAD,CAAd,CAAmBA,aAAa,CAAC,CAAD,CAAhC,CAHmB,CAGlCE,IAHkC,SAG5BC,KAH4B,SAIzCC,oBAAoB,CAACF,IAAD,CAAOC,KAAP,CAApB,CACH,CACJ,CAED;AACA,QAASC,CAAAA,oBAAT,CAA8BF,IAA9B,CAAoCC,KAApC,CAA2C,CACvC,GAAME,CAAAA,cAAc,CAAGlB,UAAvB,CACAkB,cAAc,CAACH,IAAD,CAAd,CAAuBC,KAAvB,CACA;AACAjB,KAAK,CAACoB,YAAN,CAAmBD,cAAnB,EACC,CAET,mBACI,YAAK,KAAK,CAAC,iBAAX,CAA6B,EAAE,CAAG,mBAAlC,uBAEA,MAAC,eAAD,EAAiB,SAAS,CAAIZ,eAA9B,wBAEE,KAAC,SAAD,EAAW,WAAW,CAAG,YAAzB,UACG,kBAACc,QAAD,CAAUC,QAAV,CAAuB,CACtB,mBACE,wCAAK,EAAE,CAAG,QAAV,EACID,QAAQ,CAACE,cADb,MAC6B,GAAG,CAAEF,QAAQ,CAACG,QAD3C,CAEE,KAAK,CAAI,CACTC,UAAU,CAAEH,QAAQ,CAACI,cAAT,CAAyB/B,YAAzB,CAAuCD,aAD1C,CAFX,uBAIE,KAAC,SAAD,EAAW,UAAU,CAAIO,UAAzB,EAJF,GADF,CAOG,CATP,EAFF,cAaE,aAAK,SAAS,CAAC,KAAf,wBACE,aAAK,SAAS,CAAC,UAAf,CAA0B,EAAE,CAAC,YAA7B,wBACI,kCADJ,cAEQ,YAAK,SAAS,CAAC,YAAf,uBACA,KAAC,WAAD,EAAa,SAAS,CAAC,QAAvB,CAAgC,SAAS,CAAIE,YAA7C,CAA2D,SAAS,CAAG,WAAvE,CAAoF,cAAc,CAAIH,KAAK,CAAC2B,eAA5G,CAA6H,cAAc,CAAIT,oBAA/I,EADA,EAFR,GADF,cAQE,aAAK,SAAS,CAAC,UAAf,CAA0B,EAAE,CAAC,YAA7B,wBACI,kCADJ,cAEQ,KAAC,WAAD,EAAa,SAAS,CAAC,QAAvB,CAAgC,SAAS,CAAId,YAA7C,CAA2D,SAAS,CAAG,WAAvE,CAAmF,cAAc,CAAIJ,KAAK,CAAC2B,eAA3G,CAA4H,cAAc,CAAIT,oBAA9I,EAFR,GARF,cAaE,aAAK,SAAS,CAAC,UAAf,CAA0B,EAAE,CAAC,aAA7B,wBACI,mCADJ,cAEI,KAAC,WAAD,EAAa,SAAS,CAAC,QAAvB,CAAgC,SAAS,CAAIb,aAA7C,CAA4D,SAAS,CAAG,aAAxE,CAAsF,cAAc,CAAIL,KAAK,CAAC2B,eAA9G,CAA+H,cAAc,CAAIT,oBAAjJ,EAFJ,GAbF,GAbF,cAiCA,WAAI,SAAS,CAAC,cAAd,+DAjCA,cAkCE,YAAK,EAAE,CAAG,mBAAV,UAEGU,MAAM,CAACC,OAAP,CAAevB,eAAf,EAAgCwB,GAAhC,CAAoC,eAAmB,mCAAjBd,IAAiB,UAAXe,MAAW,UACtD,mBAEE,YAAK,EAAE,CAAG,YAAV,uBAEE,KAAC,SAAD,EAAW,WAAW,CAAIf,IAA1B,UACG,kBAACK,QAAD,CAAWC,QAAX,CAAwB,CACzB,mBACE,wCAAK,SAAS,CAAG,gBAAjB,EACMD,QAAQ,CAACE,cADf,MAC+B,GAAG,CAAEF,QAAQ,CAACG,QAD7C,CAEE,KAAK,CAAI,CACLC,UAAU,CAAEH,QAAQ,CAACI,cAAT,CAAyB/B,YAAzB,CAAuCD,aAD9C,CAFX,uBAKE,WAAI,SAAS,CAAG,QAAhB,UACKqC,MAAM,CAACD,GAAP,CAAW,SAACb,KAAD,CAAOe,KAAP,CAAiB,CACzB,oBACI;AACA,KAAC,SAAD,EAAW,WAAW,CAAIhB,IAAI,CAAG,GAAP,CAAYC,KAAtC,CAA6C,KAAK,CAAEe,KAApD,UACC,kBAACX,QAAD,CAAWC,QAAX,CAAwB,CACrB,mBAAO,sDACK,GAAG,CAAED,QAAQ,CAACG,QADnB,EACiCH,QAAQ,CAACY,cAD1C,EAC8DZ,QAAQ,CAACa,eADvE,MAEK,KAAK,gBAAMC,eAAe,CAAEb,QAAQ,CAACc,UAAT,CAAqBxC,cAArB,CAAsCE,cAA7D,CAA8EuC,KAAK,CAAE3C,aAArF,EAAuG2B,QAAQ,CAACY,cAAT,CAAwBhB,KAA/H,CAFV,uBAIK,iCACI,aAAM,SAAS,CAAG,YAAlB,uBACK,KAAC,OAAD,EAAS,IAAI,CAAID,IAAjB,CAAuB,KAAK,CAAIC,KAAhC,EADL,EADJ,EAAUD,IAAI,CAAGC,KAAjB,CAJL,GAAP,CAUH,CAZD,EAAgEe,KAAhE,CAFJ,EAiBD,CAlBF,CADL,EALF,GADF,CA6BC,CA/BH,EAFF,EAFF,CAsCC,CAvCF,CAFH,EAlCF,GAFA,EADJ,CAuFC,CAED,cAAejC,CAAAA,WAAf","sourcesContent":["import React , {useState, useEffect} from \"react\";\nimport Cluster from './Cluster';\nimport ModAvatar from './ModAvatar';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ToggleGroup from './Buttons';\n\nconst POKETAR_WHITE = \"#ffffff\"\nconst POKETAR_BLUE = \"#5db9ff\"\nconst POKETAR_PURPLE = \"#DAF7A6\" //face component selected color?\nconst POKETAR_RED = \"#ff1f1f\"\nconst POKETAR_YELLOW = \"#ffffff\" // face component selections?\n\n\nfunction DragdropAva (props){\n\n    const [avaDetails,setavaDetails] = useState(props.avaDetails);\n    useEffect(() => { setavaDetails(props.avaDetails) }, [props.avaDetails]);\n\n    const skinColorSet = props.skinColorSet;\n    const hairColorSet = props.hairColorSet;\n    const clothColorSet = props.clothColorSet;\n    const datafromBackend = props.datafromBackend;\n\n    // function that handles drag ending event\n    function handleOnDragEnd(result){\n        if(!result.destination) return;\n        const{source,destination} = result;\n        if (destination.droppableId === 'MainAvatar'){\n            const draggable_string = result.draggableId;\n            const regfound_tags = draggable_string.match(/([A-Za-z]+)_([A-Za-z]+)/);\n            const [type, style] = [regfound_tags[1], regfound_tags[2]];\n            handleOnChangeAvatar(type, style);\n        }\n    }\n\n    // update current avatar look\n    function handleOnChangeAvatar(type, style) {\n        const updatedDetails = avaDetails;\n        updatedDetails[type] = style;\n        // console.log(updatedDetails);\n        props.avaChangeFun(updatedDetails);\n        }\n\nreturn (\n    <div class='container-fluid' id = 'content-container'>\n    {/*center avatar*/}\n    <DragDropContext onDragEnd = {handleOnDragEnd}>\n      {/* Dropable portion that of the Avatar display */}\n      <Droppable droppableId = \"MainAvatar\" > \n        {(provided,snapshot) => {\n          return (\n            <div id = \"my_ava\"\n            {...provided.droppableProps} ref={provided.innerRef} \n              style = {{\n              background: snapshot.isDraggingOver? POKETAR_BLUE: POKETAR_WHITE}}>\n              <ModAvatar avaDetails = {avaDetails}/>\n            </div>)\n            }}\n      </Droppable>\n      <div className=\"row\">\n        <div className=\"col-sm-4\" id='skin_color'>\n            <h3>Skin Color</h3>\n                <div className=\"bd-example\">\n                <ToggleGroup className=\"colors\" colorCode = {skinColorSet} colorType = 'skinColor'  changeColorFun = {props.setcolorDisplay} updateFunction = {handleOnChangeAvatar}/> \n                </div>\n        </div> \n\n        <div className=\"col-sm-4\" id='hair_color'>\n            <h3>Hair Color</h3>\n                <ToggleGroup className=\"colors\" colorCode = {hairColorSet} colorType = 'hairColor' changeColorFun = {props.setcolorDisplay} updateFunction = {handleOnChangeAvatar}/> \n        </div>\n\n        <div className=\"col-sm-4\" id='cloth_color'>\n            <h3>Cloth Color</h3>\n            <ToggleGroup className=\"colors\" colorCode = {clothColorSet} colorType = 'clotheColor' changeColorFun = {props.setcolorDisplay} updateFunction = {handleOnChangeAvatar}/> \n        </div>\n      </div>\n\n    {/* Drag and droppable features and clothing */}\n    <h2 className=\"Instructions\"> Step 2: Drag and Drop items to Change his look! </h2>\n      <div id = 'droppable-content'>\n        {/* Double loop that go through all possible type of looking and styles */} \n        {Object.entries(datafromBackend).map(([type, styles]) =>{\n          return(\n            \n            <div id = 'step2_wrap'>\n              {/* Each column is also a droppable */} \n              <Droppable droppableId = {type}>\n                {(provided, snapshot) => {\n                return(\n                  <div className = 'OverflowColumn'\n                    {...provided.droppableProps} ref={provided.innerRef} \n                    style = {{\n                        background: snapshot.isDraggingOver? POKETAR_BLUE: POKETAR_WHITE,\n                    }}>\n                    <ul className = 'addons'>\n                        {styles.map((style,index) => {\n                            return (\n                                // Each item in the column is a draggable\n                                <Draggable draggableId = {type + '_' +style} index={index} key={index}>\n                                {(provided, snapshot) => {\n                                    return(<div\n                                                ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}\n                                                style = {{ backgroundColor: snapshot.isDragging? POKETAR_PURPLE : POKETAR_YELLOW , color: POKETAR_WHITE, ...provided.draggableProps.style\n                                                }}>\n                                                <li key ={type + style}>\n                                                    <wrap className = \"selectAble\">\n                                                        {<Cluster type = {type} style = {style}/>}\n                                                    </wrap>\n                                                </li>\n                                            </div>); \n                                }}\n                                </Draggable>\n                            ); \n                          })\n                        }\n                    </ul>\n                  </div>)\n                }}\n              </Droppable>\n            </div>);\n          })}\n      </div>\n\n      </DragDropContext>\n\n    </div> \n);\n\n    \n}\n\nexport default DragdropAva;"]},"metadata":{},"sourceType":"module"}