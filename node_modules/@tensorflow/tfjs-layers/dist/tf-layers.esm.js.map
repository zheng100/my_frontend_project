{"version":3,"file":"tf-layers.esm.js","sources":["../src/backend/common.ts","../src/backend/state.ts","../src/errors.ts","../src/utils/generic_utils.ts","../src/constraints.ts","../src/exports_constraints.ts","../src/common.ts","../src/utils/math_utils.ts","../src/backend/tfjs_backend.ts","../src/initializers.ts","../src/exports_initializers.ts","../src/utils/types_utils.ts","../src/utils/variable_utils.ts","../src/variables.ts","../src/engine/topology.ts","../src/engine/input_layer.ts","../src/base_callbacks.ts","../src/logs.ts","../src/losses.ts","../src/metrics.ts","../src/optimizers.ts","../src/utils/layer_utils.ts","../src/layers/serialization.ts","../src/utils/serialization_utils.ts","../src/version.ts","../src/engine/executor.ts","../src/engine/container.ts","../src/engine/training_dataset.ts","../src/engine/training_tensors.ts","../src/engine/training.ts","../src/models.ts","../src/exports.ts","../src/activations.ts","../src/regularizers.ts","../src/layers/advanced_activations.ts","../src/utils/conv_utils.ts","../src/layers/convolutional.ts","../src/layers/convolutional_depthwise.ts","../src/layers/core.ts","../src/layers/embeddings.ts","../src/layers/merge.ts","../src/layers/normalization.ts","../src/layers/padding.ts","../src/layers/pooling.ts","../src/layers/recurrent.ts","../src/layers/wrappers.ts","../src/exports_layers.ts","../src/exports_metrics.ts","../src/exports_regularizers.ts","../src/callbacks.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ENV} from '@tensorflow/tfjs-core';\nimport {DataFormat} from '../common';\n\nlet _epsilon: number;\n\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n  if (_epsilon == null) {\n    _epsilon = ENV.get('EPSILON');\n  }\n  return _epsilon;\n}\n\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e: number) {\n  _epsilon = e;\n}\n\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat(): DataFormat {\n  return 'channelsLast';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\nimport {DataType, keep, Scalar, scalar} from '@tensorflow/tfjs-core';\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\n\nexport function getNextUniqueTensorId(): number {\n  return _nextUniqueTensorId++;\n}\n\nconst _uidPrefixes: {[prefix: string]: number} = {};\n\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = ''): string {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}\n\nconst scalarCache: {[typeKey: string]: {[key: number]: Scalar}} = {\n  float32: {},\n  int32: {}\n};\n\nconst DEFAULT_DTYPE: DataType = 'float32';\n\n/**\n * Get scalar, with caching.\n */\nexport function getScalar(value: number, dtype?: DataType): Scalar {\n  if (dtype === undefined) {\n    dtype = DEFAULT_DTYPE;\n  }\n  if (scalarCache[dtype][value] == null) {\n    scalarCache[dtype][value] = scalar(value, dtype);\n    keep(scalarCache[dtype][value]);\n  }\n  return scalarCache[dtype][value];\n}\n\nexport function disposeScalarCache() {\n  for (const typeKey in scalarCache) {\n    for (const key in scalarCache[typeKey]) {\n      scalarCache[typeKey][key].dispose();\n      delete scalarCache[typeKey][key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, IndexError.prototype);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, serialization} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = retVal + Math.abs(obj.id);\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  return {className: instance.getClassName(), config: instance.getConfig()};\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config.className == null || config.config == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config.className as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects.get(className);\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS.className;\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config.config as config.config.customObjects. Objects can use it, if\n      // they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config.config as serialization.ConfigDict;\n      nestedConfig.customObjects = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      const returnObj =\n          fromConfig(cls, config.config, customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config.config);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\nimport {getScalar} from './backend/state';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mulStrict(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n */\n/**\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\n/**\n * MaxNorm weight constraint.\n *\n * Constrains the weights incident to each hidden unit\n * to have a norm less than or equal to a desired value.\n *\n * References\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\n * Srivastava, Hinton, et al.\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n */\nexport class MaxNorm extends Constraint {\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(getScalar(epsilon()), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * [rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\n/**\n * Constrains the weights incident to each hidden unit to have unit norm.\n */\nexport class UnitNorm extends Constraint {\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(\n            w, tfc.add(getScalar(epsilon()), calcL2Norms(w, this.axis))));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\n/**\n * Constains the weight to be non-negative.\n */\nexport class NonNeg extends Constraint {\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              getScalar(this.rate),\n              tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(getScalar(1.0 - this.rate), norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(getScalar(epsilon()), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {Constraint, MaxNorm, MaxNormArgs, MinMaxNorm, MinMaxNormArgs, NonNeg, UnitNorm, UnitNormArgs} from './constraints';\n\n/**\n * @doc {\n *   heading: 'Constraints',\n *   namespace: 'constraints',\n *   useDocsFrom: 'MaxNorm',\n *   configParamIndices: [0]\n * }\n */\nexport function maxNorm(args: MaxNormArgs): Constraint {\n  return new MaxNorm(args);\n}\n\n/**\n * @doc {\n *   heading: 'Constraints',\n *   namespace: 'constraints',\n *   useDocsFrom: 'UnitNorm',\n *   configParamIndices: [0]\n * }\n */\nexport function unitNorm(args: UnitNormArgs): Constraint {\n  return new UnitNorm(args);\n}\n\n/**\n * @doc {\n *   heading: 'Constraints',\n *   namespace: 'constraints',\n *   useDocsFrom: 'NonNeg'\n * }\n */\nexport function nonNeg(): Constraint {\n  return new NonNeg();\n}\n\n/**\n * @doc {\n *   heading: 'Constraints',\n *   namespace: 'constraints',\n *   useDocsFrom: 'MinMaxNormConfig',\n *   configParamIndices: [0]\n * }\n */\nexport function minMaxNorm(config: MinMaxNormArgs): Constraint {\n  return new MinMaxNorm(config);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Common functions for TensorFlow.js Layers.\n */\nimport {checkStringTypeUnionValue} from './utils/generic_utils';\n// A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nconst nameMap: Map<string, number> = new Map<string, number>();\n\n// TODO(cais): Perhaps move the enums to a more suitable place, e.g.,\n//   constants.ts.\n/** @docinline */\nexport type DataFormat = 'channelsFirst'|'channelsLast';\nexport const VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];\nexport function checkDataFormat(value?: string): void {\n  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\n\n/** @docinline */\nexport type PaddingMode = 'valid'|'same'|'causal';\nexport const VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];\nexport function checkPaddingMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\n\n/** @docinline */\nexport type PoolMode = 'max'|'avg';\nexport const VALID_POOL_MODE_VALUES = ['max', 'avg'];\nexport function checkPoolMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\n\nconst _nameScopeStack: string[] = [];\nconst _nameScopeDivider = '/';\n\n/**\n * Enter namescope, which can be nested.\n */\nexport function nameScope<T>(name: string, fn: () => T): T {\n  _nameScopeStack.push(name);\n  try {\n    const val: T = fn();\n    _nameScopeStack.pop();\n    return val;\n  } catch (e) {\n    _nameScopeStack.pop();\n    throw e;\n  }\n}\n\n/**\n * Get the current namescope as a flat, concatenated string.\n */\nfunction currentNameScopePrefix(): string {\n  if (_nameScopeStack.length === 0) {\n    return '';\n  } else {\n    return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n  }\n}\n\n/**\n * Get the name a Tensor (or Variable) would have if not uniqueified.\n * @param tensorName\n * @return Scoped name string.\n */\nexport function getScopedTensorName(tensorName: string): string {\n  if (!isValidTensorName(tensorName)) {\n    throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n  }\n  return currentNameScopePrefix() + tensorName;\n}\n\n/**\n * Get unique names for Tensors and Variables.\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\n *  `getScopedTensorName()`.\n * @return A unique version of the given fully scoped name.\n *   If this is the first time that the scoped name is seen in this session,\n *   then the given `scopedName` is returned unaltered.  If the same name is\n *   seen again (producing a collision), an incrementing suffix is added to the\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\n */\nexport function getUniqueTensorName(scopedName: string): string {\n  if (!isValidTensorName(scopedName)) {\n    throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n  }\n  if (!nameMap.has(scopedName)) {\n    nameMap.set(scopedName, 0);\n  }\n  const index = nameMap.get(scopedName);\n  nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n\n  if (index > 0) {\n    const result = scopedName + '_' + index;\n    // Mark the composed name as used in case someone wants\n    // to call getUniqueTensorName(\"name_1\").\n    nameMap.set(result, 1);\n    return result;\n  } else {\n    return scopedName;\n  }\n}\n\nconst tensorNameRegex = new RegExp(/^[A-Za-z][-A-Za-z0-9\\._\\/]*$/);\n\n/**\n * Determine whether a string is a valid tensor name.\n * @param name\n * @returns A Boolean indicating whether `name` is a valid tensor name.\n */\nexport function isValidTensorName(name: string): boolean {\n  return name.match(tensorNameRegex) ? true : false;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar, Tensor1D, tensor1d} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array | Int32Array | Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n  array: number[] | ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array: number[] | Float32Array): Tensor1D {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tensor1d(array);\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[] | Float32Array): number {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[] | Float32Array): number {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[] | Float32Array): number {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[] | Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[] | Float32Array): number {\n  const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n  const sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[] | Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * deeplearn.js backend.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {onesLike as coreOnesLike, Scalar, scalar, Tensor, Tensor1D, tensor1d, Tensor2D, Tensor3D, Tensor4D, tidy, util, where, zerosLike as coreZerosLike} from '@tensorflow/tfjs-core';\n\nimport {disposeScalarCache, getScalar} from '../backend/state';\nimport {checkDataFormat, DataFormat} from '../common';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {HasShape, Shape} from '../types';\nimport * as math_utils from '../utils/math_utils';\n\nimport {imageDataFormat} from './common';\n\n// tslint:enable\n\n/* Setting and getting backend from deeplearn.js. */\n\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend: 'cpu'|'webgl' = 'webgl';\n\nexport function setBackend(requestedBackend: 'cpu'|'webgl') {\n  tfc.setBackend(requestedBackend);\n  backend = requestedBackend;\n  disposeScalarCache();\n}\n\nexport function getBackend(): 'cpu'|'webgl' {\n  return backend;\n}\n\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic(): boolean {\n  return false;\n}\n\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x: HasShape): number {\n  const shape = x.shape;\n  if (shape.length > 0) {\n    return shape.reduce((a: number, b: number) => a * b);\n  } else {\n    // Scalar.\n    return 1;\n  }\n}\n\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x: Tensor, dtype: tfc.DataType): Tensor {\n  return x.asType(dtype);\n}\n\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x: Tensor, axis = -1): Tensor {\n  const outShape = x.shape.slice();\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n  outShape.splice(axis, 0, 1);\n  return x.reshape(outShape);\n}\n\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x: Tensor, n: number): Tensor {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(\n          `repeat() expects a rank-2 tensor, but received a ` +\n          `rank-${x.shape.length} tensor.`);\n    }\n    const y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n  });\n}\n\n/**\n * Flatten an Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x: Tensor): Tensor {\n  const newShape = [math_utils.arrayProd(x.shape)];\n  return x.reshape(newShape);\n}\n\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x: Tensor): Tensor {\n  if (x.rank <= 1) {\n    throw new ValueError(\n        `batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n  const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n  return x.reshape(newShape);\n}\n\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [start, 0], [size, array.shape[1]]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [start, 0, 0],\n            [size, array.shape[1], array.shape[2]]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [start, 0, 0, 0],\n            [size, array.shape[1], array.shape[2], array.shape[3]]);\n      default:\n        throw new ValueError(\n            `sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [0, start], [array.shape[0], size]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [0, 0, start],\n            [array.shape[0], array.shape[1], size]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [0, 0, 0, start],\n            [array.shape[0], array.shape[1], array.shape[2], size]);\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(\n    array: Tensor, start: number, size: number, axis: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice3d(\n                array as Tensor3D, [0, start, 0],\n                [array.shape[0], size, array.shape[2]]);\n          case 3:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice4d(\n                array as Tensor4D, [0, start, 0, 0],\n                [array.shape[0], size, array.shape[2], array.shape[3]]);\n          case 3:\n            return tfc.slice4d(\n                array as Tensor4D, [0, 0, start, 0],\n                [array.shape[0], array.shape[1], size, array.shape[3]]);\n          case 4:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors: Tensor[], axis = -1): Tensor {\n  let rank: number;\n  if (axis < 0) {\n    rank = tensors[0].rank;\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n  if (axis === tensors[0].rank) {\n    // Porting Note: This is necessary because tfc.concat() requires axis to be\n    //   in the interval [-rank, rank).\n    axis = -1;\n  }\n  // Porting Note: Sparse concat is not supported yet.\n  return tfc.concat(tensors, axis);\n}\n\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a: Tensor, b: Tensor): Tensor {\n  switch (a.rank) {\n    case 1:\n      return tfc.concat1d([a as Tensor1D, b as Tensor1D]);\n    case 2:\n      return tfc.concat2d([a as Tensor2D, b as Tensor2D], 0);\n    case 3:\n      return tfc.concat3d([a as Tensor3D, b as Tensor3D], 0);\n    case 4:\n      return tfc.concat4d([a as Tensor4D, b as Tensor4D], 0);\n    default:\n      throw new ValueError(\n          'concatAlongFirstAxis() received an unsupported tensor rank: ' +\n          a.rank);\n  }\n}\n\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x: Tensor, n: number|number[]): Tensor {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n  if (x.rank !== n.length) {\n    throw new ValueError(\n        `The length of input n (${n.length}) does not match ` +\n        `the number of dimensions in input x (${x.rank})`);\n  }\n  return tfc.tile(x, n);\n}\n\n/* Creation of random tensors. */\n\n\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: 'float32'|'int32',\n    seed?: number): Tensor {\n  return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n\n/* Linear Algebra */\n\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param x A tensor of at least rank 2.\n * @param y A tensor of at least rank 2.\n * @return Result of the dot operation.\n */\nexport function dot(x: Tensor, y: Tensor): Tensor {\n  if ((x.rank < 2) || (y.rank < 2)) {\n    throw new NotImplementedError(\n        `dot requires both inputs to be rank >= 2` +\n        ` but got x shape = ${x.shape} and y shape = ${y.shape}`);\n  }\n  if (y.rank >= 3) {\n    const xLastDim = x.shape.slice(-1)[0];\n    const ySecondLastDim = y.shape.slice(-2)[0];\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(\n          `If rank y >= 3, then the second last dim` +\n          ` of y must equal the last dim of x but got x shape = ${\n              x.shape} and ` +\n          ` y shape = ${y.shape}`);\n    }\n  }\n  // Handle basic 2D x 2D case.\n  if ((x.rank === 2) && (y.rank === 2)) {\n    return tfc.matMul(x as Tensor2D, y as Tensor2D);\n  } else {\n    // Reshape x into the analogous 2D Tensor.\n    const xFirstDims = x.shape.slice();  // Holds all but the last dim of x.\n    const xLastDim = xFirstDims.pop();\n    x = x.reshape([-1, xLastDim]);\n\n    // Reshape y into the analogous 2D Tensor, and keep track of the\n    // required dimensions to reproduce the output shape.\n    const yShape = y.shape.slice();\n    const yLastDim = yShape.pop();\n    const ySecondLastDim = yShape.pop();\n    const yOtherDims = [...yShape, yLastDim];\n    // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n    // where r is the rank of y.\n    const perm = Array.from({length: y.rank}, (_, i) => {\n      if (i === 0) {\n        return y.rank - 2;\n      } else if (i <= y.rank - 2) {\n        return i - 1;\n      }\n      return i;\n    });\n    y = y.transpose(perm).reshape([ySecondLastDim, -1]);\n\n    // Multiply x and y as 2D Tensors, and then reshape back to original.\n    const outputShape = [...xFirstDims, ...yOtherDims];\n    return tfc.matMul(x as Tensor2D, y as Tensor2D).reshape(outputShape);\n  }\n}\n\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x: Tensor): Tensor {\n  // TODO(cais): Move to the core.\n  return tidy(() => {\n    const zerosLikeX = coreZerosLike(x);\n    const onesLikeX = coreOnesLike(x);\n    return where(\n        tfc.equal(x, zerosLikeX), zerosLikeX,\n        where(\n            tfc.greater(x, coreZerosLike(x)), onesLikeX,\n            tfc.mul(getScalar(-1), onesLikeX)));\n  });\n}\n\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices: Tensor, numClasses: number): Tensor {\n  return tidy(() => {\n    if (indices.rank !== 1) {\n      throw new Error(\n          'Only 1D one-hot tensors are supported in the ' +\n          'deeplearn backend, at present.');\n    }\n    indices = indices.toInt();\n    return tfc.oneHot(indices as Tensor1D, numClasses).toFloat();\n  });\n}\n\n/* Elementary math functions. */\n\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(\n    reference: Tensor, indices: number[]|Tensor1D, axis?: number): Tensor {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, 'int32');\n    } else {\n      indices = indices.toInt();\n    }\n    return tfc.gather(reference, indices, axis);\n  });\n}\n\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x: Tensor): Tensor {\n  return tfc.mulStrict(x, x);\n}\n\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic conversion\n *   to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x: Tensor, a: Tensor|number): Tensor {\n  return tidy(() => {\n    if (typeof (a) === 'number') {\n      a = scalar(Math.round(a), 'int32');\n    }\n    if (a.dtype !== 'int32') {\n      throw new NotImplementedError(\n          `Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n    }\n    return tfc.pow(x, a as Tensor);\n  });\n}\n\n/* Neural-network operations. */\n\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(\n    x: Tensor, bias: Tensor, dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n\n    if (bias.rank !== 1 && bias.rank !== x.rank) {\n      throw new ValueError(\n          'Unexpected bias dimensions: ' + bias.rank +\n          '; expected it to be 1 or ' + x.rank);\n    }\n    const biasShape = bias.shape;\n\n    let y: Tensor;\n    if (x.rank === 5) {\n      if (dataFormat === 'channelsFirst') {\n        if (biasShape.length === 1) {\n          y = x.add(bias.reshape([1, biasShape[0], 1, 1, 1]));\n        } else {\n          y = x.add(bias.reshape(\n              [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]));\n        }\n      } else if (dataFormat === 'channelsLast') {\n        if (biasShape.length === 1) {\n          y = x.add(bias.reshape([1, 1, 1, 1, biasShape[0]]));\n        } else {\n          y = x.add(bias.reshape([1].concat(biasShape)));\n        }\n      }\n    } else if (x.rank === 4) {\n      if (dataFormat === 'channelsFirst') {\n        if (biasShape.length === 1) {\n          y = x.add(bias.reshape([1, biasShape[0], 1, 1]));\n        } else {\n          y = x.add(\n              bias.reshape([1, biasShape[2], biasShape[0], biasShape[1]]));\n        }\n      } else if (dataFormat === 'channelsLast') {\n        if (biasShape.length === 1) {\n          y = x.add(bias.reshape([1, 1, 1, biasShape[0]]));\n        } else {\n          y = x.add(bias.reshape([1].concat(biasShape)));\n        }\n      }\n    } else if (x.rank === 3) {\n      if (dataFormat === 'channelsFirst') {\n        if (biasShape.length === 1) {\n          y = x.add(bias.reshape([1, biasShape[0], 1]));\n        } else {\n          y = x.add(bias.reshape([1, biasShape[1], biasShape[0]]));\n        }\n      } else if (dataFormat === 'channelsLast') {\n        if (biasShape.length === 1) {\n          y = x.add(bias.reshape([1, 1, biasShape[0]]));\n        } else {\n          y = x.add(bias.reshape([1].concat(biasShape)));\n        }\n      }\n    } else if (x.rank < 3) {\n      y = x.add(bias);\n    } else {\n      throw new ValueError(`Unsupported input rank by biasAdd: ${x.rank}`);\n    }\n    return y;\n  });\n}\n\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x: Tensor, alpha = 1): Tensor {\n  // TODO(cais): Add support for alpha values other than 1.\n  if (alpha !== 1) {\n    throw new NotImplementedError(\n        `Support for alpha values other than 1 (${alpha}) is not implemented ` +\n        `yet.`);\n  }\n  return tfc.elu(x);\n}\n\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x: Tensor): Tensor {\n  return tidy(() => tfc.div(x, tfc.add(getScalar(1), tfc.abs(x))));\n}\n\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`.\n * @param seed random seed to ensure determinism.\n * @returns Result of the dropout operation.\n */\nexport function dropout(\n    x: Tensor, level: Scalar, noiseShape?: number[], seed?: number): Tensor {\n  return tidy(() => {\n    // TODO(cais): Switch to deeplearn.js implementation of dropout when it\n    //   becomes avaialable.\n    if (noiseShape != null && !util.arraysEqual(x.shape, noiseShape)) {\n      throw new NotImplementedError(\n          'Non-default noise shape is not implemented yet: ' +\n          JSON.stringify(noiseShape));\n    }\n    if (seed != null) {\n      throw new NotImplementedError('seed is not implemented for dropout yet.');\n    }\n    let multiplier = tfc.step(tfc.add(\n        tfc.neg(level) as Scalar, tfc.randomUniform(x.shape, 0, 1, 'float32')));\n    // Scale the kept elements, so the expected sum is unchanged.\n    multiplier = tfc.mul(\n        tfc.div(getScalar(1), tfc.sub(getScalar(1), level)) as Scalar,\n        multiplier);\n    return tfc.mul(x, multiplier);\n  });\n}\n\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x: Tensor): Tensor {\n  return tidy(() => {\n    const y = tfc.add(getScalar(0.5), tfc.mul(getScalar(0.2), x));\n    return tfc.clipByValue(y, 0, 1);\n  });\n}\n\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training` boolean\n *   flag here, because there is no such thing in the TF.js imperative backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase<T>(x: () => T, alt: () => T, training = false): T {\n  return training ? x() : alt();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, eye, linalg, mul, ones, randomUniform, scalar, Scalar, serialization, Tensor, Tensor2D, tidy, truncatedNormal, zeros} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from './backend/state';\nimport * as K from './backend/tfjs_backend';\nimport {checkDataFormat, DataFormat} from './common';\nimport {NotImplementedError, ValueError} from './errors';\nimport {Shape} from './types';\nimport {checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\nimport {arrayProd} from './utils/math_utils';\n\n\n/** @docinline */\nexport type FanMode = 'fanIn'|'fanOut'|'fanAvg';\nexport const VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];\nexport function checkFanMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\n\n/** @docinline */\nexport type Distribution = 'normal'|'uniform';\nexport const VALID_DISTRIBUTION_VALUES = ['normal', 'uniform'];\nexport function checkDistribution(value?: string): void {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport abstract class Initializer extends serialization.Serializable {\n  public fromConfigUsesCustomObjects(): boolean {\n    return false;\n  }\n  /**\n   * Generate an initial value.\n   * @param shape\n   * @param dtype\n   * @return The init value.\n   */\n  abstract apply(shape: Shape, dtype?: DataType): Tensor;\n\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\n/**\n * Initializer that generates tensors initialized to 0.\n */\nexport class Zeros extends Initializer {\n  static className = 'Zeros';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return zeros(shape, dtype);\n  }\n}\nserialization.registerClass(Zeros);\n\n/**\n * Initializer that generates tensors initialized to 1.\n */\nexport class Ones extends Initializer {\n  static className = 'Ones';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return ones(shape, dtype);\n  }\n}\nserialization.registerClass(Ones);\n\nexport interface ConstantArgs {\n  /** The value for each element in the variable. */\n  value: number;\n}\n\n/**\n * Initializer that generates values initialized to some constant.\n */\nexport class Constant extends Initializer {\n  static className = 'Constant';\n  private value: number;\n  constructor(args: ConstantArgs) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(\n          `Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      value: this.value,\n    };\n  }\n}\nserialization.registerClass(Constant);\n\nexport interface RandomUniformArgs {\n  /** Lower bound of the range of random values to generate. */\n  minval?: number;\n  /** Upper bound of the range of random values to generate. */\n  maxval?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\n/**\n * Initializer that generates random values initialized to a uniform\n * distribution.\n *\n * Values will be distributed uniformly between the configured minval and\n * maxval.\n */\nexport class RandomUniform extends Initializer {\n  static className = 'RandomUniform';\n  readonly DEFAULT_MINVAL = -0.05;\n  readonly DEFAULT_MAXVAL = 0.05;\n  private minval: number;\n  private maxval: number;\n  private seed: number;\n\n  constructor(args: RandomUniformArgs) {\n    super();\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {minval: this.minval, maxval: this.maxval, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomUniform);\n\nexport interface RandomNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\n/**\n * Initializer that generates random values initialized to a normal\n * distribution.\n */\nexport class RandomNormal extends Initializer {\n  static className = 'RandomNormal';\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: RandomNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `randomNormal does not support dType ${dtype}.`);\n    }\n\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomNormal);\n\nexport interface TruncatedNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\n/**\n * Initializer that generates random values initialized to a truncated normal.\n * distribution.\n *\n * These values are similar to values from a `RandomNormal` except that values\n * more than two standard deviations from the mean are discarded and re-drawn.\n * This is the recommended initializer for neural network weights and filters.\n */\nexport class TruncatedNormal extends Initializer {\n  static className = 'TruncatedNormal';\n\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: TruncatedNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(TruncatedNormal);\n\nexport interface IdentityArgs {\n  /**\n   * Multiplicative factor to apply to the identity matrix.\n   */\n  gain?: number;\n}\n\n/**\n * Initializer that generates the identity matrix.\n * Only use for square 2D matrices.\n */\nexport class Identity extends Initializer {\n  static className = 'Identity';\n  private gain: Scalar;\n  constructor(args: IdentityArgs) {\n    super();\n    this.gain = args.gain != null ? scalar(args.gain) : getScalar(1.0);\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError(\n            'Identity matrix initializer can only be used for' +\n            ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {gain: this.gain.get()};\n  }\n}\nserialization.registerClass(Identity);\n\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(\n    shape: Shape, dataFormat: DataFormat = 'channelsLast'): number[] {\n  let fanIn: number;\n  let fanOut: number;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport interface VarianceScalingArgs {\n  /** Scaling factor (positive float). */\n  scale: number;\n\n  /** Fanning mode for inputs and outputs. */\n  mode: FanMode;\n\n  /** Probabilistic distribution of the values. */\n  distribution: Distribution;\n\n  /** Random number generator seed. */\n  seed?: number;\n}\n\n\n/**\n * Initializer capable of adapting its scale to the shape of weights.\n * With distribution=NORMAL, samples are drawn from a truncated normal\n * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\n *   - number of input units in the weight tensor, if mode = FAN_IN.\n *   - number of output units, if mode = FAN_OUT.\n *   - average of the numbers of input and output units, if mode = FAN_AVG.\n * With distribution=UNIFORM,\n * samples are drawn from a uniform distribution\n * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.\n */\nexport class VarianceScaling extends Initializer {\n  static className = 'VarianceScaling';\n  private scale: number;\n  private mode: FanMode;\n  private distribution: Distribution;\n  private seed: number;\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args: VarianceScalingArgs) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(\n          `scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode;\n    checkFanMode(this.mode);\n    this.distribution = args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\n            `${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\nserialization.registerClass(VarianceScaling);\n\nexport interface SeedOnlyInitializerArgs {\n  /** Random number generator seed. */\n  seed?: number;\n}\n\n/**\n * Glorot uniform initializer, also called Xavier uniform initializer.\n * It draws samples from a uniform distribution within [-limit, limit]\n * where `limit` is `sqrt(6 / (fan_in + fan_out))`\n * where `fan_in` is the number of input units in the weight tensor\n * and `fan_out` is the number of output units in the weight tensor\n *\n * Reference:\n *   Glorot & Bengio, AISTATS 2010\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.\n */\nexport class GlorotUniform extends VarianceScaling {\n  static className = 'GlorotUniform';\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotUniform);\n\n/**\n * Glorot normal initializer, also called Xavier normal initializer.\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(2 / (fan_in + fan_out))`\n * where `fan_in` is the number of input units in the weight tensor\n * and `fan_out` is the number of output units in the weight tensor.\n *\n * Reference:\n *   Glorot & Bengio, AISTATS 2010\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf\n */\nexport class GlorotNormal extends VarianceScaling {\n  static className = 'GlorotNormal';\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotNormal);\n\n/**\n * He normal initializer.\n *\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(2 / fanIn)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * Reference:\n *     He et al., http://arxiv.org/abs/1502.01852\n */\nexport class HeNormal extends VarianceScaling {\n  static className = 'HeNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeNormal);\n\n/**\n * LeCun normal initializer.\n *\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(1 / fanIn)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * References:\n *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)\n */\nexport class LeCunNormal extends VarianceScaling {\n  static className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunNormal);\n\nexport interface OrthogonalArgs extends SeedOnlyInitializerArgs {\n  /**\n   * Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.\n   */\n  gain?: number;\n}\n\n/**\n * Initializer that generates a random orthogonal matrix.\n *\n * Reference:\n * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)\n */\nexport class Orthogonal extends Initializer {\n  static className = 'Orthogonal';\n  readonly DEFAULT_GAIN = 1;\n  protected readonly gain: number;\n  protected readonly seed: number;\n\n  constructor(args?: OrthogonalArgs) {\n    super();\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n\n    if (this.seed != null) {\n      throw new NotImplementedError(\n          'Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2) {\n        throw new NotImplementedError(\n            'The Orthogonal Initializer does not support non-2D shapes yet.');\n      }\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(\n            `Orthogonal initializer is being called on a matrix with more ` +\n            `than 2000 (${shape[0] * shape[1]}) elements: ` +\n            `Slowness may result.`);\n      }\n\n      // TODO(cais): Add seed support.\n      const normalizedShape =\n          shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32') as Tensor2D;\n      let q = linalg.gramSchmidt(a) as Tensor2D;\n      if (shape[0] > shape[1]) {\n        q = q.transpose();\n      }\n      return mul(getScalar(this.gain), q);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      gain: this.gain,\n      seed: this.seed,\n    };\n  }\n}\nserialization.registerClass(Orthogonal);\n\n/** @docinline */\nexport type InitializerIdentifier = 'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in InitializerIdentifier]: string} = {\n      'constant': 'Constant',\n      'glorotNormal': 'GlorotNormal',\n      'glorotUniform': 'GlorotUniform',\n      'heNormal': 'HeNormal',\n      'identity': 'Identity',\n      'leCunNormal': 'LeCunNormal',\n      'ones': 'Ones',\n      'orthogonal': 'Orthogonal',\n      'randomNormal': 'RandomNormal',\n      'randomUniform': 'RandomUniform',\n      'truncatedNormal': 'TruncatedNormal',\n      'varianceScaling': 'VarianceScaling',\n      'zeros': 'Zeros'\n    };\n\nfunction deserializeInitializer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Initializer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer: Initializer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(initializer);\n}\n\nexport function getInitializer(identifier: InitializerIdentifier|Initializer|\n                               serialization.ConfigDict): Initializer {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else {\n      const config = {className, config: {}};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {Constant, ConstantArgs, GlorotNormal, GlorotUniform, HeNormal, Identity, IdentityArgs, Initializer, LeCunNormal, Ones, Orthogonal, OrthogonalArgs, RandomNormal, RandomNormalArgs, RandomUniform, RandomUniformArgs, SeedOnlyInitializerArgs, TruncatedNormal, TruncatedNormalArgs, VarianceScaling, VarianceScalingArgs, Zeros} from './initializers';\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'Zeros'\n * }\n */\nexport function zeros(): Zeros {\n  return new Zeros();\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'Ones'\n * }\n */\nexport function ones(): Initializer {\n  return new Ones();\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'Constant',\n *   configParamIndices: [0]\n * }\n */\nexport function constant(args: ConstantArgs): Initializer {\n  return new Constant(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'RandomUniform',\n *   configParamIndices: [0]\n * }\n */\nexport function randomUniform(args: RandomUniformArgs): Initializer {\n  return new RandomUniform(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'RandomNormal',\n *   configParamIndices: [0]\n * }\n */\nexport function randomNormal(args: RandomNormalArgs): Initializer {\n  return new RandomNormal(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'TruncatedNormal',\n *   configParamIndices: [0]\n * }\n */\nexport function truncatedNormal(args: TruncatedNormalArgs): Initializer {\n  return new TruncatedNormal(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'Identity',\n *   configParamIndices: [0]\n * }\n */\nexport function identity(args: IdentityArgs): Initializer {\n  return new Identity(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'VarianceScaling',\n *   configParamIndices: [0]\n * }\n */\nexport function varianceScaling(config: VarianceScalingArgs): Initializer {\n  return new VarianceScaling(config);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'GlorotUniform',\n *   configParamIndices: [0]\n * }\n */\nexport function glorotUniform(args: SeedOnlyInitializerArgs): Initializer {\n  return new GlorotUniform(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'GlorotNormal',\n *   configParamIndices: [0]\n * }\n */\nexport function glorotNormal(args: SeedOnlyInitializerArgs): Initializer {\n  return new GlorotNormal(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'HeNormal',\n *   configParamIndices: [0]\n * }\n */\nexport function heNormal(args: SeedOnlyInitializerArgs): Initializer {\n  return new HeNormal(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'LeCunNormal',\n *   configParamIndices: [0]\n * }\n */\nexport function leCunNormal(args: SeedOnlyInitializerArgs): Initializer {\n  return new LeCunNormal(args);\n}\n\n/**\n * @doc {\n *   heading: 'Initializers',\n *   namespace: 'initializers',\n *   useDocsFrom: 'Orthogonal',\n *   configParamIndices: [0]\n * }\n */\nexport function orthogonal(args: OrthogonalArgs): Initializer {\n  return new Orthogonal(args);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\nimport {Shape} from '../types';\n// tslint:enable\n\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x: Shape|Shape[]): boolean {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x: Shape|Shape[]): Shape[] {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x] as Shape[];\n  }\n  return x as Shape[];\n}\n\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs: Tensor|Tensor[]): Tensor {\n  let x: Tensor;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs as Tensor;\n  }\n  return x;\n}\n\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes: Shape|Shape[]): Shape {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes as Shape[];\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes as Shape;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerVariable} from '../variables';\n\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights: LayerVariable[]): number {\n  let count = 0;\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n  return count;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, Tensor, variableGrads} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId} from './backend/state';\nimport {getScopedTensorName, getUniqueTensorName} from './common';\nimport {Constraint} from './constraints';\nimport {NotImplementedError} from './errors';\nimport {HasShape, Shape} from './types';\n\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n  readonly dtype: DataType;\n  readonly shape: Shape;\n\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName: string;\n  readonly trainable: boolean;\n\n  protected readonly val: tfc.Variable;\n  readonly constraint: Constraint;\n  /**\n   * Construct Variable from a `tf.Tensor`.\n   *\n   * If not explicitly named, the Variable will be given a name with the\n   * prefix 'Variable'. Variable names are unique. In the case of name\n   * collision, suffixies '_<num>' will be added to the name.\n   *\n   * @param val Initial value of the Variable.\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\n   *   will default a name with the prefix 'Variable'.\n   * @param constraint Optional, projection function to be applied to the\n   * variable after optimize updates\n   * @throws ValueError if `name` is `null` or `undefined`.\n   */\n  constructor(\n      val: Tensor, dtype: DataType = 'float32',\n      name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true,\n      constraint: Constraint = null) {\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n\n    this.trainable = trainable;\n    this.constraint = constraint;\n\n    this.val = tfc.variable(val, this.trainable, this.name, this.dtype);\n  }\n\n  /**\n   * Get a snapshot of the Variable's value.\n   *\n   * The returned value is a snapshot of the Variable's value at the time of\n   * the invocation. Future mutations in the value of the tensor will only\n   * be reflected by future calls to this method.\n   */\n  read(): Tensor {\n    this.assertNotDisposed();\n    return this.val;\n  }\n\n  /**\n   * Update the value of the Variable.\n   *\n   * @param newVal: The new value to update to. Must be consistent with the\n   *   dtype and shape of the Variable.\n   * @return This Variable.\n   */\n  write(newVal: Tensor) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal);\n    // Skip updating if this is the exact same tensor.\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Dispose this LayersVariable instance from memory.\n   */\n  dispose(): void {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  protected assertNotDisposed(): void {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n}\n\nfunction checkShapesMatch(x: HasShape, y: HasShape): void {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error(\n        'Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n        JSON.stringify(y.shape));\n  }\n}\n\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(\n    x: Tensor, dtype?: DataType, name?: string,\n    constraint?: Constraint): LayerVariable {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(\n    size: number, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(\n    shape: Shape, minval: number, maxval: number, dtype?: DataType,\n    seed?: number, name = 'randomUniform'): LayerVariable {\n  return new LayerVariable(\n      tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'truncatedNormal'): LayerVariable {\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormal does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'randomNormal'): LayerVariable {\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormalVariable does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x: LayerVariable, xNew: Tensor): LayerVariable {\n  return x.write(xNew);\n}\n\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x: LayerVariable, increment: Tensor): LayerVariable {\n  return x.write(tfc.add(x.read(), increment));\n}\n\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x: LayerVariable, decrement: Tensor): LayerVariable {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs: LayerVariable[]): Tensor[] {\n  return xs.map(x => x.read());\n}\n\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(\n    variablesAndValues: Array<[LayerVariable, Tensor]>): void {\n  variablesAndValues.map((variableAndValue) => {\n    const variable: LayerVariable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(\n    lossFn: () => tfc.Scalar, variables: LayerVariable[]): Tensor[] {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList =\n      variables.map(variable => variable.read() as tfc.Variable);\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {DataType, Scalar, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId, getUid} from '../backend/state';\nimport {getScopedTensorName, getUniqueTensorName, nameScope} from '../common';\nimport {Constraint} from '../constraints';\nimport {AttributeError, NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {getInitializer, Initializer} from '../initializers';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs, RegularizerFn, Shape} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as types_utils from '../utils/types_utils';\nimport * as variable_utils from '../utils/variable_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\n// TODO(michaelterry): This is a stub until it's defined.\nexport type Op = (x: LayerVariable) => LayerVariable;\n\n/**\n * Constructor arguments for InputSpec.\n */\nexport interface InputSpecArgs {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n}\n\n/**\n * Specifies the ndim, dtype and shape of every input to a layer.\n *\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\n * a list of instances of InputSpec (one per input tensor).\n *\n * A null entry in a shape is compatible with any dimension,\n * a null shape is compatible with any shape.\n */\nexport class InputSpec {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n\n  constructor(args: InputSpecArgs) {\n    this.dtype = args.dtype;\n    this.shape = args.shape;\n    /*\n      TODO(michaelterry): Could throw error if ndim and shape are both defined\n        (then backport).\n    */\n    if (args.shape != null) {\n      this.ndim = args.shape.length;\n    } else {\n      this.ndim = args.ndim;\n    }\n    this.maxNDim = args.maxNDim;\n    this.minNDim = args.minNDim;\n    this.axes = args.axes || {};\n  }\n}\n\n/**\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n *\n * They are most often encountered when building a graph of `Layer`s for a\n * a `tf.Model` and the input data's shape, but not values are known.\n */\n/** @doc {heading: 'Models', 'subheading': 'Classes'} */\nexport class SymbolicTensor {\n  /* A unique ID for the tensor to be able to differentiate tensors. */\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName?: string;\n  /**\n   * Rank/dimensionality of the tensor.\n   */\n  readonly rank: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  nodeIndex: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  tensorIndex: number;\n\n  /**\n   *\n   * @param dtype\n   * @param shape\n   * @param sourceLayer The Layer that produced this symbolic tensor.\n   * @param inputs The inputs passed to sourceLayer's __call__() method.\n   * @param nodeIndex\n   * @param tensorIndex\n   * @param callArgs The keyword arguments passed to the __call__() method.\n   * @param name\n   * @param outputTensorIndex The index of this tensor in the list of outputs\n   *   returned by apply().\n   */\n  constructor(\n      readonly dtype: DataType, readonly shape: Shape,\n      public sourceLayer: Layer, readonly inputs: SymbolicTensor[],\n      readonly callArgs: Kwargs, name?: string,\n      readonly outputTensorIndex?: number) {\n    this.id = getNextUniqueTensorId();\n    if (name != null) {\n      this.originalName = getScopedTensorName(name);\n      this.name = getUniqueTensorName(this.originalName);\n    }\n    this.rank = shape.length;\n  }\n}\n\n/**\n * Constructor arguments for Node.\n */\nexport interface NodeArgs {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`.\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n}\n\n/**\n * The type of the return value of Layer.dispose() and Container.dispose().\n */\nexport interface DisposeResult {\n  /**\n   * Reference count after the dispose call.\n   */\n  refCountAfterDispose: number;\n\n  /**\n   * Number of variables dispose in this dispose call.\n   */\n  numDisposedVariables: number;\n}\n\nlet _nextNodeID = 0;\n\n/**\n * A `Node` describes the connectivity between two layers.\n *\n * Each time a layer is connected to some new input,\n * a node is added to `layer.inboundNodes`.\n *\n * Each time the output of a layer is used by another layer,\n * a node is added to `layer.outboundNodes`.\n *\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\n * describing the origin of the `inputTensors`, verifying the following:\n *\n * `inputTensors[i] ==\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\n *   tensorIndices[i]]`\n *\n * A node from layer A to layer B is added to:\n *     A.outboundNodes\n *     B.inboundNodes\n */\nexport class Node {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n\n  readonly id: number;\n\n  constructor(\n      args: NodeArgs,\n      // TODO(michaelterry): Define actual type for this.\n      public callArgs?: Kwargs) {\n    this.id = _nextNodeID++;\n    /*\n      Layer instance (NOT a list).\n      this is the layer that takes a list of input tensors\n      and turns them into a list of output tensors.\n      the current node will be added to\n      the inboundNodes of outboundLayer.\n    */\n    this.outboundLayer = args.outboundLayer;\n\n    /*\n        The following 3 properties describe where\n        the input tensors come from: which layers,\n        and for each layer, which node and which\n        tensor output of each node.\n    */\n\n    // List of layer instances.\n    this.inboundLayers = args.inboundLayers;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.nodeIndices = args.nodeIndices;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.tensorIndices = args.tensorIndices;\n\n    /*\n        Following 2 properties:\n        tensor inputs and outputs of outboundLayer.\n    */\n\n    // List of tensors. 1:1 mapping with inboundLayers.\n    this.inputTensors = args.inputTensors;\n    // List of tensors, created by outboundLayer.call().\n    this.outputTensors = args.outputTensors;\n\n    /*\n        Following 2 properties: input and output masks.\n        List of tensors, 1:1 mapping with inputTensor.\n    */\n    this.inputMasks = args.inputMasks;\n    // List of tensors, created by outboundLayer.computeMask().\n    this.outputMasks = args.outputMasks;\n\n    // Following 2 properties: input and output shapes.\n\n    // List of shape tuples, shapes of inputTensors.\n    this.inputShapes = args.inputShapes;\n    // List of shape tuples, shapes of outputTensors.\n    this.outputShapes = args.outputShapes;\n\n    // Add nodes to all layers involved.\n    for (const layer of args.inboundLayers) {\n      if (layer != null) {\n        layer.outboundNodes.push(this);\n      }\n    }\n    args.outboundLayer.inboundNodes.push(this);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const inboundNames: string[] = [];\n    for (const layer of this.inboundLayers) {\n      if (layer != null) {\n        inboundNames.push(layer.name);\n      } else {\n        inboundNames.push(null);\n      }\n    }\n    return {\n      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n      inboundLayers: inboundNames,\n      nodeIndices: this.nodeIndices,\n      tensorIndices: this.tensorIndices\n    };\n  }\n}\n\n/** Constructor arguments for Layer. */\nexport interface LayerArgs {\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  inputShape?: Shape;\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  batchInputShape?: Shape;\n  /**\n   * If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n   * `batchSize` is used to construct the `batchInputShape`: `[batchSize,\n   * ...inputShape]`\n   */\n  batchSize?: number;\n  /**\n   * The data-type for this layer. Defaults to 'float32'.\n   * This argument is only applicable to input layers (the first layer of a\n   * model).\n   */\n  dtype?: DataType;\n  /** Name for this layer. */\n  name?: string;\n  /** Whether this layer is trainable. Defaults to true. */\n  trainable?: boolean;\n  /** Whether the weights of this layer are updatable by `fit`. */\n  updatable?: boolean;\n  /**\n   * Initial weight values of the layer.\n   */\n  weights?: Tensor[];\n  /** Legacy support. Do not use for new code. */\n  inputDType?: DataType;\n}\n\n// If necessary, add `output` arguments to the CallHook function.\n// This is currently used for testing only, but may be used for debugger-related\n// purposes in the future.\nexport type CallHook = (inputs: Tensor|Tensor[], kwargs: Kwargs) => void;\n\nlet _nextLayerID = 0;\n\n/**\n * A layer is a grouping of operations and weights that can be composed to\n * create a `tf.Model`.\n *\n * Layers are constructed by using the functions under the\n * [tf.layers](#Layers-Basic) namespace.\n */\n/** @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'} */\nexport abstract class Layer extends serialization.Serializable {\n  /** Name for this layer. Must be unique within a model. */\n  name: string;\n  /**\n   * List of InputSpec class instances.\n   *\n   * Each entry describes one required input:\n   * - ndim\n   * - dtype\n   * A layer with `n` input tensors must have an `inputSpec` of length `n`.\n   */\n  inputSpec: InputSpec[];\n  supportsMasking: boolean;\n  /** Whether the layer weights will be updated during training. */\n  trainable: boolean;\n  updatable: boolean;\n  batchInputShape: Shape;\n  dtype: DataType;\n  initialWeights: Tensor[];\n\n  inboundNodes: Node[];\n  outboundNodes: Node[];\n\n  activityRegularizer: Regularizer;\n\n  protected _trainableWeights: LayerVariable[];\n  private _nonTrainableWeights: LayerVariable[];\n  private _losses: RegularizerFn[];\n  // TODO(cais): _updates is currently unused.\n  private _updates: Tensor[];\n  private _built: boolean;\n  private _callHook: CallHook = null;\n\n  private _addedWeightNames: string[] = [];\n\n  readonly id: number;\n\n  // Porting Notes: PyKeras does not have this property in this base Layer\n  //   class. Instead lets Layer subclass set it dynamically and checks the\n  //   value with `hasattr`. In tfjs-layers, we let this be a member of this\n  //   base class.\n  protected _stateful = false;\n\n  protected _refCount: number|null;\n\n  // A flag for whether fast (i.e., all-zero) weight initialization is to\n  // be used during `build()` call. This speeds up weight initialization\n  // by saving unnecessary calls to expensive initializers in cases where\n  // the initialized values will be overwritten by loaded weight values\n  // during model loading.\n  private fastWeightInitDuringBuild: boolean;\n\n  constructor(args: LayerArgs) {\n    super();\n    this.id = _nextLayerID++;\n\n    this.activityRegularizer = null;\n\n    this.inputSpec = null;\n    this.supportsMasking = false;\n\n    // These properties will be set upon call of this.build()\n    this._trainableWeights = [];\n    this._nonTrainableWeights = [];\n    this._losses = [];\n    this._updates = [];\n    this._built = false;\n\n    /*\n      These lists will be filled via successive calls\n      to this.addInboundNode().\n     */\n    this.inboundNodes = [];\n    this.outboundNodes = [];\n\n    let name = args.name;\n    if (!name) {\n      const prefix = this.getClassName();\n      name = generic_utils.toSnakeCase(prefix) + '_' + getUid(prefix);\n    }\n    this.name = name;\n\n    this.trainable = args.trainable == null ? true : args.trainable;\n    this.updatable = args.updatable == null ? true : args.updatable;\n\n    if (args.inputShape != null || args.batchInputShape != null) {\n      /*\n        In this case we will later create an input layer\n        to insert before the current layer\n       */\n      let batchInputShape: Shape;\n      if (args.batchInputShape != null) {\n        batchInputShape = args.batchInputShape;\n      } else if (args.inputShape != null) {\n        let batchSize: number = null;\n        if (args.batchSize != null) {\n          batchSize = args.batchSize;\n        }\n        batchInputShape = [batchSize].concat(args.inputShape);\n      }\n      this.batchInputShape = batchInputShape;\n\n      // Set dtype.\n      let dtype = args.dtype;\n      if (dtype == null) {\n        dtype = args.inputDType;\n      }\n      if (dtype == null) {\n        dtype = 'float32';\n      }\n      this.dtype = dtype;\n    }\n\n    if (args.weights != null) {\n      this.initialWeights = args.weights;\n    } else {\n      this.initialWeights = null;\n    }\n\n    // The value of `_refCount` is initialized to null. When the layer is used\n    // in a symbolic way for the first time, it will be set to 1.\n    this._refCount = null;\n\n    this.fastWeightInitDuringBuild = false;\n  }\n\n  /**\n   * Converts a layer and its index to a unique (immutable type) name.\n   * This function is used internally with `this.containerNodes`.\n   * @param layer The layer.\n   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\n   *   nodes.\n   *\n   * @returns The unique name.\n   */\n  protected static nodeKey(layer: Layer, nodeIndex: number) {\n    return layer.name + '_ib-' + nodeIndex.toString();\n  }\n\n  /**\n   * Returns this.inboundNode at index nodeIndex.\n   *\n   * Porting note: This is a replacement for _get_node_attribute_at_index()\n   * @param nodeIndex\n   * @param attrName The name of the attribute related to request for this node.\n   */\n  private getNodeAtIndex(nodeIndex: number, attrName: string): Node {\n    if (this.inboundNodes.length === 0) {\n      throw new RuntimeError(\n          'The layer has never been called ' +\n          `and thus has no defined ${attrName}.`);\n    }\n    if (this.inboundNodes.length <= nodeIndex) {\n      throw new ValueError(\n          `Asked to get ${attrName} at node ${nodeIndex}, ` +\n          `but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n    }\n    return this.inboundNodes[nodeIndex];\n  }\n\n  /**\n   * Retrieves the input tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple inputs).\n   */\n  getInputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple outputs).\n   */\n  getOutputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n  }\n\n  // Properties\n\n  /**\n   * Retrieves the input tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Input tensor or list of input tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get input(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer input\" ' +\n          'is ill-defined. ' +\n          'Use `getInputAt(nodeIndex)` instead.');\n    } else if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' is not connected, no input to return.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Output tensor or list of output tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get output(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has no inbound nodes.');\n    }\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer output\" ' +\n          'is ill-defined. ' +\n          'Use `getOutputAt(nodeIndex)` instead.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'output').outputTensors);\n  }\n\n  get losses(): RegularizerFn[] {\n    return this._losses;\n  }\n\n  /**\n   * Retrieves the Layer's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Layer.loss in PyKeras.\n    //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return this.losses.map(lossFn => lossFn());\n  }\n\n  get updates(): Tensor[] {\n    return this._updates;\n  }\n\n  get built(): boolean {\n    return this._built;\n  }\n\n  set built(built: boolean) {\n    this._built = built;\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (this.trainable) {\n      return this._trainableWeights;\n    } else {\n      return [];\n    }\n  }\n\n  set trainableWeights(weights: LayerVariable[]) {\n    this._trainableWeights = weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return this._trainableWeights.concat(this._nonTrainableWeights);\n    } else {\n      return this._nonTrainableWeights;\n    }\n  }\n\n  set nonTrainableWeights(weights: LayerVariable[]) {\n    this._nonTrainableWeights = weights;\n  }\n\n  /**\n   * The concatenation of the lists trainableWeights and nonTrainableWeights\n   * (in this order).\n   */\n  get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  get stateful(): boolean {\n    return this._stateful;\n  }\n\n  /**\n   * Reset the states of the layer.\n   *\n   * This method of the base Layer class is essentially a no-op.\n   * Subclasses that are stateful (e.g., stateful RNNs) should override this\n   * method.\n   */\n  resetStates(): void {\n    if (!this.stateful) {\n      throw new Error(\n          'Cannot call the resetStates() method of a non-stateful Layer ' +\n          'object.');\n    }\n  }\n\n  /**\n   * Checks compatibility between the layer and provided inputs.\n   *\n   * This checks that the tensor(s) `input`\n   * verify the input assumptions of the layer\n   * (if any). If not, exceptions are raised.\n   *\n   * @param inputs Input tensor or list of input tensors.\n   *\n   * @exception ValueError in case of mismatch between\n   *   the provided inputs and the expectations of the layer.\n   */\n  protected assertInputCompatibility(inputs: Tensor|Tensor[]|SymbolicTensor|\n                                     SymbolicTensor[]): void {\n    inputs = generic_utils.toList(inputs);\n    if (this.inputSpec == null || this.inputSpec.length === 0) {\n      return;\n    }\n    const inputSpec = generic_utils.toList(this.inputSpec);\n    if (inputs.length !== inputSpec.length) {\n      throw new ValueError(\n          `Layer ${this.name} expects ${inputSpec.length} inputs, ` +\n          `but it received ${inputs.length} input tensors. ` +\n          `Input received: ${inputs}`);\n    }\n    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n      const x = inputs[inputIndex];\n      const spec: InputSpec = inputSpec[inputIndex];\n      if (spec == null) {\n        continue;\n      }\n\n      // Check ndim.\n      const ndim = x.rank;\n      if (spec.ndim != null) {\n        if (ndim !== spec.ndim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}: ` +\n              `expected ndim=${spec.ndim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.maxNDim != null) {\n        if (ndim > spec.maxNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.minNDim != null) {\n        if (ndim < spec.minNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n        }\n      }\n\n      // Check dtype.\n      if (spec.dtype != null) {\n        if (x.dtype !== spec.dtype) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name} ` +\n              `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n        }\n      }\n\n      // Check specific shape axes.\n      if (spec.axes) {\n        const xShape = x.shape;\n        for (const key in spec.axes) {\n          const axis = Number(key);\n          const value = spec.axes[key];\n          // Perform Python-style slicing in case axis < 0;\n          // TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n          // ensure type safety through Underscore calls.\n          const xShapeAtAxis =\n              axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n          if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n            throw new ValueError(\n                `Input ${inputIndex} is incompatible with layer ` +\n                `${this.name}: expected axis ${axis} of input shape to ` +\n                `have value ${value} but got shape ${xShape}.`);\n          }\n        }\n      }\n\n      // Check shape.\n      if (spec.shape != null) {\n        for (let i = 0; i < spec.shape.length; ++i) {\n          const specDim = spec.shape[i];\n          const dim = x.shape[i];\n          if (specDim != null && dim != null) {\n            if (specDim !== dim) {\n              throw new ValueError(\n                  `Input ${inputIndex} is incompatible with layer ` +\n                  `${this.name}: expected shape=${spec.shape}, ` +\n                  'found shape=${xShape}.');\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * This is where the layer's logic lives.\n   *\n   * @param inputs Input tensor, or list/tuple of input tensors.\n   * @param kwargs Additional keyword arguments.\n   *\n   * @return A tensor or list/tuple of tensors.\n   */\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return inputs;\n  }\n\n  protected invokeCallHook(inputs: Tensor|Tensor[], kwargs: Kwargs) {\n    if (this._callHook != null) {\n      this._callHook(inputs, kwargs);\n    }\n  }\n\n  /**\n   * Set call hook.\n   * This is currently used for testing only.\n   * @param callHook\n   */\n  setCallHook(callHook: CallHook) {\n    this._callHook = callHook;\n  }\n\n  /**\n   * Clear call hook.\n   * This is currently used for testing only.\n   */\n  clearCallHook() {\n    this._callHook = null;\n  }\n\n  /**\n   * Builds or executes a `Layer's logic.\n   *\n   * When called with `tf.Tensor`(s), execute the `Layer`s computation and\n   * return Tensor(s). For example:\n   *\n   * ```js\n   * const denseLayer = tf.layers.dense({\n   *   units: 1,\n   *   kernelInitializer: 'zeros',\n   *   useBias: false\n   * });\n   *\n   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\n   * // numeric values).\n   * const input = tf.ones([2, 2]);\n   * const output = denseLayer.apply(input);\n   *\n   * // The output's value is expected to be [[0], [0]], due to the fact that\n   * // the dense layer has a kernel initialized to all-zeros and does not have\n   * // a bias.\n   * output.print();\n   * ```\n   *\n   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\n   * future execution.  This entails internal book-keeping on shapes of\n   * expected Tensors, wiring layers together, and initializing weights.\n   *\n   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\n   * building of non-`tf.Sequential` models. For example:\n   *\n   * ```js\n   * const flattenLayer = tf.layers.flatten();\n   * const denseLayer = tf.layers.dense({units: 1});\n   *\n   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\n   * const input = tf.input({shape: [2, 2]});\n   * const output1 = flattenLayer.apply(input);\n   *\n   * // output1.shape is [null, 4]. The first dimension is the undetermined\n   * // batch size. The second dimension comes from flattening the [2, 2]\n   * // shape.\n   * console.log(JSON.stringify(output1.shape));\n   *\n   * // The output SymbolicTensor of the flatten layer can be used to call\n   * // the apply() of the dense layer:\n   * const output2 = denseLayer.apply(output1);\n   *\n   * // output2.shape is [null, 1]. The first dimension is the undetermined\n   * // batch size. The second dimension matches the number of units of the\n   * // dense layer.\n   * console.log(JSON.stringify(output2.shape));\n   *\n   * // The input and output and be used to construct a model that consists\n   * // of the flatten and dense layers.\n   * const model = tf.model({inputs: input, outputs: output2});\n   * ```\n   *\n   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\n   * @param kwargs Additional keyword arguments to be passed to `call()`.\n   *\n   * @return Output of the layer's `call` method.\n   *\n   * @exception ValueError error in case the layer is missing shape information\n   *   for its `build` call.\n   */\n  // Porting Note: This is a replacement for __call__() in Python.\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    kwargs = kwargs || {};\n\n    this.assertNotDisposed();\n\n    // Ensure inputs are all the same type.\n    const inputsList = generic_utils.toList(inputs);\n\n    let allAreSymbolic = true;\n    for (const input of inputsList) {\n      if (!(input instanceof SymbolicTensor)) {\n        allAreSymbolic = false;\n        break;\n      }\n    }\n    let noneAreSymbolic = true;\n    for (const input of inputsList) {\n      if (input instanceof SymbolicTensor) {\n        noneAreSymbolic = false;\n        break;\n      }\n    }\n\n    if (allAreSymbolic === noneAreSymbolic) {\n      throw new ValueError(\n          'Arguments to apply() must be all ' +\n          'SymbolicTensors or all Tensors');\n    }\n\n    // TODO(michaelterry): nameScope() may not be necessary.\n    return nameScope(this.name, () => {\n      // Handle laying building (weight creating, input spec locking).\n      if (!this.built) {\n        /*\n          Throw exceptions in case the input is not compatible\n          with the inputSpec specified in the layer constructor.\n         */\n        this.assertInputCompatibility(inputs);\n\n        // Collect input shapes to build layer.\n        const inputShapes: Shape[] = [];\n        for (const xElem of generic_utils.toList(inputs)) {\n          inputShapes.push(xElem.shape);\n        }\n        this.build(generic_utils.singletonOrArray(inputShapes));\n        this.built = true;\n\n        // Load weights that were specified at layer instantiation.\n        if (this.initialWeights) {\n          this.setWeights(this.initialWeights);\n        }\n\n        if (this._refCount === null && noneAreSymbolic) {\n          // The first use of this layer is a non-symbolic call, set ref count\n          // to 1 so the Layer can be properly disposed if its dispose() method\n          // is called.\n          this._refCount = 1;\n        }\n      }\n\n      /*\n        Throw exceptions in case the input is not compatible\n        with the inputSpec set at build time.\n      */\n      this.assertInputCompatibility(inputs);\n\n      // Handle mask propagation.\n      // TODO(michaelterry): Mask propagation not currently implemented.\n\n      // Actually call the layer, collecting output(s), mask(s), and shape(s).\n      if (noneAreSymbolic) {\n        let output = this.call(inputs as Tensor | Tensor[], kwargs);\n        // TODO(michaelterry): Compute the outputMask\n\n        // If the layer returns tensors from its inputs, unmodified,\n        // we copy them to avoid loss of tensor metadata.\n        const outputList: Tensor[] = generic_utils.toList(output);\n        const outputListCopy: Tensor[] = [];\n        // TODO(michaelterry): This copying may not be necessary given our eager\n        // backend.\n        for (let x of outputList) {\n          if (inputsList.indexOf(x) !== -1) {\n            x = x.clone();\n          }\n          outputListCopy.push(x);\n        }\n        output = generic_utils.singletonOrArray(outputListCopy);\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        // TODO(michaelterry): Call addInboundNode()?\n        return output;\n      } else {\n        const inputShape = collectInputShape(inputs);\n        const outputShape = this.computeOutputShape(inputShape);\n        let output: SymbolicTensor|SymbolicTensor[];\n        const outputDType = guessOutputDType(inputs);\n        this.warnOnIncompatibleInputShape(\n            Array.isArray(inputs) ? inputShape[0] as Shape :\n                                    inputShape as Shape);\n\n        if (outputShape != null && outputShape.length > 0 &&\n            Array.isArray(outputShape[0])) {\n          // We have multiple output shapes. Create multiple output tensors.\n          output = (outputShape as Shape[])\n                       .map(\n                           (shape, index) => new SymbolicTensor(\n                               outputDType, shape, this,\n                               generic_utils.toList(inputs), kwargs, this.name,\n                               index));\n        } else {\n          output = new SymbolicTensor(\n              outputDType, outputShape as Shape, this,\n              generic_utils.toList(inputs), kwargs, this.name);\n        }\n\n        /*\n          Add an inbound node to the layer, so that it keeps track\n          of the call and of all new variables created during the call.\n          This also updates the layer history of the output tensor(s).\n          If the input tensor(s) had no previous history,\n          this does nothing.\n        */\n        this.addInboundNode(\n            inputs as SymbolicTensor | SymbolicTensor[], output, null, null,\n            inputShape, outputShape, kwargs);\n        this._refCount++;\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        return output;\n      }\n    });\n  }\n\n  /**\n   * Check compatibility between input shape and this layer's batchInputShape.\n   *\n   * Print warning if any incompatibility is found.\n   *\n   * @param inputShape Input shape to be checked.\n   */\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {\n    if (this.batchInputShape == null) {\n      return;\n    } else if (inputShape.length !== this.batchInputShape.length) {\n      console.warn(\n          `The rank of the input tensor provided (shape: ` +\n          `${JSON.stringify(inputShape)}) does not match that of the ` +\n          `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` +\n          `of the layer ${this.name}`);\n    } else {\n      let dimMismatch = false;\n      this.batchInputShape.forEach((dimension, i) => {\n        if (dimension != null && inputShape[i] != null &&\n            inputShape[i] !== dimension) {\n          dimMismatch = true;\n        }\n      });\n      if (dimMismatch) {\n        console.warn(\n            `The shape of the input tensor ` +\n            `(${JSON.stringify(inputShape)}) does not ` +\n            `match the expectation of layer ${this.name}: ` +\n            `${JSON.stringify(this.batchInputShape)}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieves the output shape(s) of a layer.\n   *\n   * Only applicable if the layer has only one inbound node, or if all inbound\n   * nodes have the same output shape.\n   *\n   * @returns Output shape or shapes.\n   * @throws AttributeError: if the layer is connected to more than one incoming\n   *   nodes.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  get outputShape(): Shape|Shape[] {\n    if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `The layer ${this.name} has never been called and thus has no ` +\n          `defined output shape.`);\n    }\n    const allOutputShapes: string[] = [];\n    for (const node of this.inboundNodes) {\n      const shapeString = JSON.stringify(node.outputShapes);\n      if (allOutputShapes.indexOf(shapeString) === -1) {\n        allOutputShapes.push(shapeString);\n      }\n    }\n    if (allOutputShapes.length === 1) {\n      const outputShapes = this.inboundNodes[0].outputShapes;\n      if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n          outputShapes.length === 1) {\n        return (outputShapes as Shape[])[0];\n      } else {\n        return outputShapes;\n      }\n\n    } else {\n      throw new AttributeError(\n          `The layer ${this.name} has multiple inbound nodes with different ` +\n          `output shapes. Hence the notion of \"outut shape\" is ill-defined ` +\n          `for the layer.`);\n      // TODO(cais): Implement getOutputShapeAt().\n    }\n  }\n\n  /**\n   * Counts the total number of numbers (e.g., float32, int32) in the\n   * weights.\n   *\n   * @returns An integer count.\n   * @throws RuntimeError: If the layer is not built yet (in which case its\n   *   weights are not defined yet.)\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  countParams(): number {\n    if (!this.built) {\n      throw new RuntimeError(\n          `You tried to call countParams() on ${this.name}, ` +\n          `but the layer is not built yet. Build it first by calling ` +\n          `build(batchInputShape).`);\n    }\n    return variable_utils.countParamsInWeights(this.weights);\n  }\n\n  /**\n   * Creates the layer weights.\n   *\n   * Must be implemented on all layers that have weights.\n   *\n   * Called when apply() is called to construct the weights.\n   *\n   * @param inputShape A `Shape` or array of `Shape` (unused).\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  build(inputShape: Shape|Shape[]) {\n    this.built = true;\n  }\n\n  /**\n   * Returns the current values of the weights of the layer.\n   *\n   * @param trainableOnly Whether to get the values of only trainable weights.\n   * @returns Weight values as an `Array` of `tf.Tensor`s.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  getWeights(trainableOnly = false): Tensor[] {\n    return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n  }\n\n  /**\n   * Sets the weights of the layer, from Tensors.\n   *\n   * @param weights a list of Tensors. The number of arrays and their shape\n   *   must match number of the dimensions of the weights of the layer (i.e.\n   *   it should match the output of `getWeights`).\n   *\n   * @exception ValueError If the provided weights list does not match the\n   *   layer's specifications.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  setWeights(weights: Tensor[]): void {\n    tidy(() => {\n      const params = this.weights;\n      if (params.length !== weights.length) {\n        // TODO(cais): Restore the following and use `providedWeights`, instead\n        // of `weights` in the error message, once the deeplearn.js bug is\n        // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n        // providedWeights = JSON.stringify(weights).substr(0, 50);\n        throw new ValueError(\n            `You called setWeights(weights) on layer \"${this.name}\" ` +\n            `with a weight list of length ${weights.length}, ` +\n            `but the layer was expecting ${params.length} weights. ` +\n            `Provided weights: ${weights}...`);\n      }\n      if (params.length === 0) {\n        return;\n      }\n      const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n      const paramValues = batchGetValue(params);\n      for (let i = 0; i < paramValues.length; ++i) {\n        const pv = paramValues[i];\n        const p = params[i];\n        const w = weights[i];\n        if (!util.arraysEqual(pv.shape, w.shape)) {\n          throw new ValueError(\n              `Layer weight shape ${pv.shape} ` +\n              `not compatible with provided weight shape ${w.shape}`);\n        }\n        weightValueTuples.push([p, w]);\n      }\n      batchSetValue(weightValueTuples);\n    });\n  }\n\n  /**\n   * Adds a weight variable to the layer.\n   *\n   * @param name Name of the new weight variable.\n   * @param shape The shape of the weight.\n   * @param dtype The dtype of the weight.\n   * @param initializer An initializer instance.\n   * @param regularizer A regularizer instance.\n   * @param trainable Whether the weight should be trained via backprop or not\n   *   (assuming that the layer itself is also trainable).\n   * @param constraint An optional trainable.\n   * @return The created weight variable.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  protected addWeight(\n      name: string, shape: Shape, dtype?: DataType, initializer?: Initializer,\n      regularizer?: Regularizer, trainable?: boolean,\n      constraint?: Constraint): LayerVariable {\n    // Reject duplicate weight names.\n    if (this._addedWeightNames.indexOf(name) !== -1) {\n      throw new ValueError(\n          `Duplicate weight name ${name} for layer ${this.name}`);\n    }\n    this._addedWeightNames.push(name);\n\n    if (dtype == null) {\n      dtype = 'float32';\n    }\n\n    if (this.fastWeightInitDuringBuild) {\n      initializer = getInitializer('zeros');\n    }\n    const initValue = initializer.apply(shape, dtype);\n    const weight =\n        new LayerVariable(initValue, dtype, name, trainable, constraint);\n    initValue.dispose();\n    // Request backend not to dispose the weights of the model on scope() exit.\n    if (regularizer != null) {\n      this.addLoss(() => regularizer.apply(weight.read()));\n    }\n    if (trainable == null) {\n      trainable = true;\n    }\n    if (trainable) {\n      this._trainableWeights.push(weight);\n    } else {\n      this._nonTrainableWeights.push(weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Set the fast-weight-initialization flag.\n   *\n   * In cases where the initialized weight values will be immediately\n   * overwritten by loaded weight values during model loading, setting\n   * the flag to `true` saves unnecessary calls to potentially expensive\n   * initializers and speeds up the loading process.\n   *\n   * @param value Target value of the flag.\n   */\n  setFastWeightInitDuringBuild(value: boolean) {\n    this.fastWeightInitDuringBuild = value;\n  }\n\n  /**\n   * Add losses to the layer.\n   *\n   * The loss may potentionally be conditional on some inputs tensors,\n   * for instance activity losses are conditional on the layer's inputs.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  addLoss(losses: RegularizerFn|RegularizerFn[]): void {\n    if (losses == null || Array.isArray(losses) && losses.length === 0) {\n      return;\n    }\n    // Update this.losses\n    losses = generic_utils.toList(losses);\n    if (this._losses !== undefined && this._losses !== null) {\n      this.losses.push(...losses);\n    }\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    if (!this.supportsMasking) {\n      if (mask != null) {\n        if (Array.isArray(mask)) {\n          mask.forEach(maskElement => {\n            if (maskElement != null) {\n              throw new TypeError(\n                  `Layer ${this.name} does not support masking, ` +\n                  'but was passed an inputMask.');\n            }\n          });\n        } else {\n          throw new TypeError(\n              `Layer ${this.name} does not support masking, ` +\n              'but was passed an inputMask.');\n        }\n      }\n      // masking not explicitly supported: return null as mask\n      return null;\n    }\n    // if masking is explictly supported, by default\n    // carry over the input mask\n    return mask;\n  }\n\n  /**\n   * Internal method to create an inbound node for the layer.\n   *\n   * @param inputTensors List of input tensors.\n   * @param outputTensors List of output tensors.\n   * @param inputMasks List of input masks (a mask can be a tensor, or null).\n   * @param outputMasks List of output masks (a mask can be a tensor, or null).\n   * @param inputShapes List of input shape tuples.\n   * @param outputShapes List of output shape tuples.\n   * @param kwargs Dictionary of keyword arguments that were passed to the\n   *   `call` method of the layer at the call that created the node.\n   */\n  private addInboundNode(\n      inputTensors: SymbolicTensor|SymbolicTensor[],\n      outputTensors: SymbolicTensor|SymbolicTensor[],\n      inputMasks: Tensor|Tensor[], outputMasks: Tensor|Tensor[],\n      inputShapes: Shape|Shape[], outputShapes: Shape|Shape[],\n      kwargs: {} = null): void {\n    const inputTensorList: SymbolicTensor[] =\n        generic_utils.toList(inputTensors);\n    outputTensors = generic_utils.toList(outputTensors);\n    inputMasks = generic_utils.toList(inputMasks);\n    outputMasks = generic_utils.toList(outputMasks);\n    inputShapes = types_utils.normalizeShapeList(inputShapes);\n    outputShapes = types_utils.normalizeShapeList(outputShapes);\n\n    // Collect input tensor(s) coordinates.\n    const inboundLayers: Layer[] = [];\n    const nodeIndices: number[] = [];\n    const tensorIndices: number[] = [];\n    for (const x of inputTensorList) {\n      /*\n       * TODO(michaelterry): Keras adds this value to tensors; it's not\n       * clear whether we'll use this or not.\n       */\n      inboundLayers.push(x.sourceLayer as Layer);\n      nodeIndices.push(x.nodeIndex);\n      tensorIndices.push(x.tensorIndex);\n    }\n\n    // Create node, add it to inbound nodes.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node(\n        {\n          outboundLayer: this,\n          inboundLayers,\n          nodeIndices,\n          tensorIndices,\n          inputTensors: inputTensorList,\n          outputTensors,\n          inputMasks,\n          outputMasks,\n          inputShapes,\n          outputShapes\n        },\n        kwargs);\n\n    // Update tensor history\n    for (let i = 0; i < outputTensors.length; i++) {\n      // TODO(michaelterry: _uses_learning_phase not tracked.\n      outputTensors[i].sourceLayer = this;\n      outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n      outputTensors[i].tensorIndex = i;\n    }\n  }\n\n  /**\n   * Returns the config of the layer.\n   *\n   * A layer config is a TS dictionary (serializable)\n   * containing the configuration of a layer.\n   * The same layer can be reinstantiated later\n   * (without its trained weights) from this configuration.\n   *\n   * The config of a layer does not include connectivity\n   * information, nor the layer class name.  These are handled\n   * by 'Container' (one layer of abstraction above).\n   *\n   * Porting Note: The TS dictionary follows TS naming standrds for\n   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\n   * should use a helper function to convert to the pythonic storage\n   * standard. (see serialization_utils.convertTsToPythonic)\n   *\n   * @returns TS dictionary of configuration.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  getConfig(): serialization.ConfigDict {\n    const config:\n        serialization.ConfigDict = {name: this.name, trainable: this.trainable};\n    if (this.batchInputShape != null) {\n      config['batchInputShape'] = this.batchInputShape;\n    }\n    if (this.dtype != null) {\n      config['dtype'] = this.dtype;\n    }\n    return config;\n  }\n\n  /**\n   * Dispose the weight variables that this Layer instance holds.\n   *\n   * @returns {number} Number of disposed variables.\n   */\n  protected disposeWeights(): number {\n    this.weights.forEach(weight => weight.dispose());\n    return this.weights.length;\n  }\n\n  protected assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Layer '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose layer's weights.\n   *\n   * This method decrease the reference count of the Layer object by 1.\n   *\n   * A Layer is reference-counted. Its reference count is incremented by 1\n   * the first item its `apply()` method is called and when it becomes a part\n   * of a new `Node` (through calling the `apply()`) method on a\n   * `tf.SymbolicTensor`).\n   *\n   * If the reference count of a Layer becomes 0, all the weights will be\n   * disposed and the underlying memory (e.g., the textures allocated in WebGL)\n   * will be freed.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * weights of the Layer will *not* be disposed.\n   *\n   * After a Layer is disposed, it cannot be used in calls such as `apply()`,\n   * `getWeights()` or `setWeights()` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the Container after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the layer has already\n   *   been disposed.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  dispose(): DisposeResult {\n    if (!this.built) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been ` +\n          `built yet.`);\n    }\n\n    if (this._refCount === null) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been used ` +\n          `yet.`);\n    }\n\n    this.assertNotDisposed();\n\n    let numDisposedVariables = 0;\n    if (--this._refCount === 0) {\n      numDisposedVariables = this.disposeWeights();\n    }\n\n    return {refCountAfterDispose: this._refCount, numDisposedVariables};\n  }\n}\n\n/**\n * Collects the input shape(s) of a list of `tf.Tensor`s or\n * `tf.SymbolicTensor`s.\n *\n * TODO(michaelterry): Update PyKeras docs (backport).\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return List of shape tuples (or single tuple), one tuple per input.\n */\nfunction collectInputShape(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                           Tensor[]): Shape|Shape[] {\n  inputTensors =\n      generic_utils.toList(inputTensors) as SymbolicTensor[] | Tensor[];\n  const shapes: Shape[] = [];\n  for (const x of inputTensors) {\n    shapes.push(x.shape);\n  }\n  return generic_utils.singletonOrArray(shapes);\n}\n\n/**\n * Guesses output dtype based on inputs.\n *\n * At present, just returns 'float32' for any input.\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return The guessed DType. At present, always returns 'float32'.\n */\nfunction guessOutputDType(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                          Tensor[]): DataType {\n  return 'float32';\n}\n\n/**\n * Returns the list of input tensors necessary to compute `tensor`.\n *\n * Output will always be a list of tensors (potentially with 1 element).\n *\n * @param tensor The tensor to start from.\n * @param layer Origin layer of the tensor.\n * @param nodeIndex Origin node index of the tensor.\n *\n * @return Array of input tensors.\n */\nexport function getSourceInputs(\n    tensor: SymbolicTensor, layer?: Layer,\n    nodeIndex?: number): SymbolicTensor[] {\n  if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n    layer = tensor.sourceLayer;\n    nodeIndex = tensor.nodeIndex;\n  }\n  if (layer.inboundNodes.length === 0) {\n    return [tensor];\n  } else {\n    const node = layer.inboundNodes[nodeIndex];\n    if (node.inboundLayers.length === 0) {\n      return node.inputTensors;\n    } else {\n      const sourceTensors: SymbolicTensor[] = [];\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const x = node.inputTensors[i];\n        const layer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const previousSources = getSourceInputs(x, layer, nodeIndex);\n        // Avoid input redundancy.\n        for (const x of previousSources) {\n          if (sourceTensors.indexOf(x) === -1) {\n            sourceTensors.push(x);\n          }\n        }\n      }\n      return sourceTensors;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {ValueError} from '../errors';\nimport {Kwargs, Shape} from '../types';\n\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/**\n * Constructor arguments for InputLayer.\n *\n * Note: You should provide only inputShape or batchInputShape (not both).\n * If only inputShape is provided, then the batchInputShape is determined by\n * the batchSize argument and the inputShape: [batchSize].concat(inputShape).\n */\nexport interface InputLayerArgs {\n  /** Input shape, not including the batch axis. */\n  inputShape?: Shape;\n  /** Optional input batch size (integer or null). */\n  batchSize?: number;\n  /** Batch input shape, including the batch axis. */\n  batchInputShape?: Shape;\n  /** Datatype of the input.  */\n  dtype?: DataType;\n  /**\n   * Whether the placeholder created is meant to be sparse.\n   */\n  sparse?: boolean;  // TODO(michaelterry): Not clear whether we'll need this.\n\n  /** Name of the layer. */\n  name?: string;\n}\n\n/**\n * An input layer is an entry point into a `tf.Model`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.preidct(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.preidct(tf.zeros([1, 3])).print();\n * ```\n */\nexport class InputLayer extends Layer {\n  static readonly className = 'InputLayer';\n  sparse: boolean;\n  constructor(args: InputLayerArgs) {\n    super({\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid('input').toString()\n    });\n    // Normalize config.batchSize and config.sparse\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n\n    this.trainable = false;\n    this.built = true;\n    this.sparse = args.sparse;\n\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError(\n          'Only provide the inputShape OR ' +\n          'batchInputShape argument to inputLayer, not both at the same time.');\n    }\n    let batchInputShape = args.batchInputShape;\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError(\n            'An InputLayer should be passed either a ' +\n            '`batchInputShape` or an `inputShape`.');\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      // TODO(michaelterry): Backport to PyKeras\n      if (args.batchSize != null) {\n        throw new ValueError(\n            'Cannot specify batchSize if batchInputShape is' +\n            'specified when creating an InputLayer.');\n      }\n    }\n\n    const dtype = args.dtype || 'float32';\n\n    this.batchInputShape = batchInputShape;\n    this.dtype = dtype;\n    // TODO(michaelterry): Backport this to PyKeras?\n    this.inputSpec = [{shape: batchInputShape}];\n\n    const inputTensor = new SymbolicTensor(\n        this.dtype, this.batchInputShape, this, [], {}, this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0;\n\n    // Create an input node to add to this.outboundNode.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor {\n    throw new ValueError(\n        'Cannot pass any input to an ' +\n        `InputLayer's apply() method. InputLayer name: ${this.name}`);\n  }\n\n  dispose(): DisposeResult {\n    // dispose() for InputLayer is overridden as no-op.\n    return {refCountAfterDispose: this._refCount, numDisposedVariables: 0};\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      batchInputShape: this.batchInputShape,\n      dtype: this.dtype,\n      sparse: this.sparse,\n      name: this.name\n    };\n  }\n}\nserialization.registerClass(InputLayer);\n\n/**\n * Config for the Input function.\n *\n * Note: You should provide only shape or batchShape (not both).\n * If only shape is provided, then the batchShape becomes\n * [null].concat(inputShape).\n */\nexport interface InputConfig {\n  /**\n   * A shape, not including the batch size. For instance, `shape=[32]`\n   * indicates that the expected input will be batches of 32-dimensional\n   * vectors.\n   */\n  shape?: Shape;\n  /**\n   * A shape tuple (integer), including the batch size. For instance,\n   * `batchShape=[10, 32]` indicates that the expected input will be batches of\n   * 10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\n   * arbitrary number of 32-dimensional vectors.\n   */\n  batchShape?: Shape;\n  /**\n   * An optional name string for the layer. Should be unique in a model (do not\n   * reuse the same name twice). It will be autogenerated if it isn't provided.\n   */\n  name?: string;\n  dtype?: DataType;\n  /**\n   * A boolean specifying whether the placeholder to be created is sparse.\n   */\n  sparse?: boolean;\n}\n\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n */\nexport function Input(config: InputConfig): SymbolicTensor {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error(\n        'Please provide to Input either a `shape`' +\n        ' or a `batchShape` argument. Note that ' +\n        '`shape` does not include the batch ' +\n        'dimension.');\n  }\n  if (config.batchShape != null && config.shape != null) {\n    // TODO(michaelterry): Backport to PyKeras.\n    throw new ValueError(\n        'Please provide either a `shape` or `batchShape` ' +\n        'argument to Input, but not both.');\n  }\n  let batchShape = config.batchShape;\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n\n  let dtype = config.dtype;\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  const inputLayer = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype,\n    sparse: config.sparse\n  });\n\n  const outputs = inputLayer.inboundNodes[0].outputTensors;\n  return outputs[0];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {add, div, keep, mul, nextFrame, Scalar, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from './backend/state';\nimport {Container} from './engine/container';\nimport {ValueError} from './errors';\nimport {Logs, resolveScalarsInLogs, UnresolvedLogs} from './logs';\nimport * as generic_utils from './utils/generic_utils';\n\n/** Verbosity logging level when fitting a model. */\nexport enum ModelLoggingVerbosity {\n  SILENT = 0,\n  VERBOSE = 1\n}\n\nexport type Params = {\n  [key: string]: number|string|boolean|number[]|string[]|boolean[];\n};\n\nexport type YieldEveryOptions = 'auto'|'batch'|'epoch'|'never';\n\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport abstract class BaseCallback {\n  // TODO(michaelterry): This type is a best guess.\n  validationData: Tensor|Tensor[] = null;\n  /**\n   * Training parameters (eg. verbosity, batch size, number of epochs...).\n   */\n  params: Params;\n\n  setParams(params: Params): void {\n    this.params = params;\n  }\n\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {}\n\n  async onTrainBegin(logs?: UnresolvedLogs) {}\n\n  async onTrainEnd(logs?: UnresolvedLogs) {}\n\n  // Model needs to call Callback.setModel(), but cannot actually depend on\n  // Callback because that creates a cyclic dependency.  Providing this no-op\n  // method on BaseCallback breaks the cycle: this way Model can depend on\n  // BaseCallback but not on Callback.  The argument is typed as `Container`\n  // (the superclass of Model) to avoid recapitulating the cycle.  Callback\n  // overrides this method and enforces that the argument is really a Model.\n  setModel(model: Container): void {\n    // Do nothing. Use Callback instead of BaseCallback to track the model.\n  }\n}\n\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n  callbacks: BaseCallback[];\n  queueLength: number;\n\n  // TODO(cais): When the need arises, uncomment the following lines and\n  // implement the queue for time values.\n  // private deltaTBatch: number;\n  // private deltaTsBatchBegin: Array<number>;\n  // private deltaTsBatchEnd: Array<number>;\n\n  /**\n   * Constructor of CallbackList.\n   * @param callbacks Array of `Callback` instances.\n   * @param queueLength Queue length for keeping running statistics over\n   *   callback execution time.\n   */\n  constructor(callbacks?: BaseCallback[], queueLength = 10) {\n    // TODO(cais): Make use of queueLength when implementing the queue for time\n    // values.\n    if (callbacks == null) {\n      callbacks = [];\n    }\n    this.callbacks = callbacks;\n    this.queueLength = queueLength;\n  }\n\n  append(callback: BaseCallback): void {\n    this.callbacks.push(callback);\n  }\n\n  setParams(params: Params): void {\n    for (const callback of this.callbacks) {\n      callback.setParams(params);\n    }\n  }\n\n  setModel(model: Container): void {\n    for (const callback of this.callbacks) {\n      callback.setModel(model);\n    }\n  }\n\n  /**\n   * Called at the start of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochBegin(epoch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochEnd(epoch, logs);\n    }\n  }\n\n  /**\n   * Called  right before processing a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchBegin(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchEnd(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the beginning of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainBegin(logs);\n    }\n  }\n\n  /**\n   * Called at the end of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainEnd(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainEnd(logs);\n    }\n  }\n}\n\n/**\n * A class that manages thread yielding during model training.\n *\n * The lifetime of an instance of `ModelTrainingYielder` is that of a\n * `Model.fit()` call. In other words, each `Model.fit()` call must create\n * and use a separate `ModelTrainingYielder` object.\n */\nexport class ModelTrainingYielder {\n  // How many batches to skip at the beginning of a `Model.fit` call.\n  // The first batches usually are longer than the rest, because they may\n  // involve warm-up time.\n  static readonly SKIP_FIRST_BATCHES = 1;\n\n  // How many batches to average over when calculating the average batch\n  // duration.\n  static readonly DECISION_BATCH_COUNT = 2;\n\n  // How many milliseconds to wait before yielding again.\n  static readonly THRESHOLD_MILLIS = 16;\n\n  private yieldEvery: YieldEveryOptions;\n  private batchCount: number;\n  private lastYieldBatchCount: number;\n  private batchStartMillis: number;\n  private batchDurationsMillis: number[];\n  private autoYieldEveryBatches: number;\n\n  /**\n   * Constructor of ModelTrainingYielder\n   *\n   * @param yieldEvery The configuration for how often the yielding will occur.\n   */\n  constructor(yieldEvery: YieldEveryOptions) {\n    this.yieldEvery = yieldEvery;\n    this.batchCount = 0;\n    this.batchDurationsMillis = [];\n    this.autoYieldEveryBatches = null;\n    this.batchStartMillis = util.now();\n  }\n\n  /**\n   * Find the first Scalar tensor in `logs` and await data() on it.\n   *\n   * This causes a data download (e.g., from GPU) and therefore clears the\n   * queued operations (e.g., on the GPU).\n   */\n  private async resolveOneTensorInLogs(logs: UnresolvedLogs) {\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value !== 'number') {\n        await (value as Scalar).data();\n        break;\n      }\n    }\n  }\n\n  /**\n   * The action taken when a batch ends.\n   *\n   * The action taken depends on the `yieldEvery` configuration.\n   *\n   * * In the case of `auto`, during the first several batches, this method\n   *   will estimate the average duration of each batch. It will then decide\n   *   how often the yielding will occur based on the estimation. The yielding\n   *   is achieved through\n   *   - Awaiting `data()` on one of the Tensors in `logs`, causing the queued\n   *     operations to clear.\n   *   - Calling `await nextFrame()`.\n   * * In the case of `batch` or `epoch`, the yielding will occur on the end of\n   *   every batch or every epoch, respectively.\n   * * In the case of `never`, the yielding will never occur.\n   *\n   * @param logs The logs from the batch.\n   */\n  async maybeYieldOnBatch(logs: UnresolvedLogs) {\n    if (this.yieldEvery === 'auto') {\n      this.batchCount++;\n      if (this.autoYieldEveryBatches == null) {\n        // autoYieldEveryBatches has not been determined yet. We are still in\n        // the measurement phase.\n        await this.resolveOneTensorInLogs(logs);\n        const t = util.now();\n        await nextFrame();\n        // We skip the first few batches for timing, because they usually\n        // involve some warm-up time.\n        if (this.batchCount > ModelTrainingYielder.SKIP_FIRST_BATCHES) {\n          this.batchDurationsMillis.push(t - this.batchStartMillis);\n          if (this.batchDurationsMillis.length >=\n              ModelTrainingYielder.DECISION_BATCH_COUNT) {\n            const meanBatchDuration =\n                this.batchDurationsMillis.reduce((dur, prev) => dur + prev) /\n                this.batchDurationsMillis.length;\n            this.autoYieldEveryBatches = Math.round(\n                ModelTrainingYielder.THRESHOLD_MILLIS / meanBatchDuration);\n            if (this.autoYieldEveryBatches < 1) {\n              this.autoYieldEveryBatches = 1;\n            }\n          }\n        }\n        this.batchStartMillis = util.now();\n        this.lastYieldBatchCount = this.batchCount;\n      } else {\n        // autoYieldEveryBatch has been determined. We perform yielding\n        // accordingly.\n        if (this.batchCount - this.lastYieldBatchCount >=\n            this.autoYieldEveryBatches) {\n          await nextFrame();\n          await this.resolveOneTensorInLogs(logs);\n          this.lastYieldBatchCount = this.batchCount;\n        }\n      }\n    } else if (this.yieldEvery === 'batch') {\n      await nextFrame();\n    }\n  }\n\n  async maybeYieldOnEpoch() {\n    if (this.yieldEvery === 'epoch') {\n      await nextFrame();\n    }\n  }\n}\n\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every Model.\n */\nexport class BaseLogger extends BaseCallback {\n  private seen: number;\n  private totals: UnresolvedLogs;\n  private autoYielder: ModelTrainingYielder;\n  private yieldEvery: YieldEveryOptions;\n\n  constructor(yieldEvery?: YieldEveryOptions) {\n    super();\n\n    this.yieldEvery = yieldEvery || 'auto';\n  }\n\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    this.autoYielder = new ModelTrainingYielder(this.yieldEvery);\n  }\n\n  async onEpochBegin(epoch: number) {\n    this.seen = 0;\n    this.totals = {};\n  }\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    await this.autoYielder.maybeYieldOnBatch(logs);\n\n    if (logs == null) {\n      logs = {};\n    }\n    const batchSize = logs['size'] == null ? 0 : logs['size'] as number;\n    this.seen += batchSize;\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value === 'number') {\n        if (!this.totals.hasOwnProperty(key)) {\n          this.totals[key] = 0;\n        }\n        this.totals[key] = this.totals[key] as number + value * batchSize;\n      } else {\n        let oldTotalsToDispose: Scalar;\n        if (key in this.totals) {\n          oldTotalsToDispose = this.totals[key] as Scalar;\n        } else {\n          this.totals[key] = getScalar(0);\n        }\n        this.totals[key] = tidy(\n            () => add((this.totals[key] as Scalar),\n                      mul(value, getScalar(batchSize))) as Scalar);\n        if (oldTotalsToDispose != null) {\n          oldTotalsToDispose.dispose();\n        }\n      }\n    }\n  }\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    await this.autoYielder.maybeYieldOnEpoch();\n\n    if (logs != null) {\n      for (const key of this.params['metrics'] as string[]) {\n        if (this.totals[key] == null) {\n          continue;\n        }\n        if (typeof this.totals[key] === 'number') {\n          logs[key] = this.totals[key] as number / this.seen;\n        } else {\n          tidy(() => {\n            logs[key] = mul(div(getScalar(1), getScalar(this.seen)) as Scalar,\n                            this.totals[key] as Scalar) as Scalar;\n            (this.totals[key] as Tensor).dispose();\n            keep(logs[key] as Scalar);\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n  epoch: number[];\n  history: {[key: string]: Array<number|Tensor>};\n\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    this.epoch = [];\n    this.history = {};\n  }\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    this.epoch.push(epoch);\n    for (const key in logs) {\n      if (this.history[key] == null) {\n        this.history[key] = [];\n      }\n      this.history[key].push(logs[key]);\n    }\n  }\n\n  /**\n   * Await the values of all losses and metrics.\n   */\n  async syncData() {\n    const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n    const keys: string[] = [];\n    const indices: number[] = [];\n    for (const key in this.history) {\n      const valueArray = this.history[key];\n      for (let i = 0; i < valueArray.length; ++i) {\n        if (typeof valueArray[i] !== 'number') {\n          const valueScalar = valueArray[i] as Tensor;\n          promises.push(valueScalar.data());\n          keys.push(key);\n          indices.push(i);\n        }\n      }\n    }\n    const values = await Promise.all(promises);\n    for (let n = 0; n < values.length; ++n) {\n      const tensorToDispose = this.history[keys[n]][indices[n]] as Tensor;\n      tensorToDispose.dispose();\n      this.history[keys[n]][indices[n]] = values[n][0];\n    }\n  }\n}\n\nexport interface CustomCallbackArgs {\n  onTrainBegin?: (logs?: Logs) => Promise<void>;\n  onTrainEnd?: (logs?: Logs) => Promise<void>;\n  onEpochBegin?: (epoch: number, logs?: Logs) => Promise<void>;\n  onEpochEnd?: (epoch: number, logs?: Logs) => Promise<void>;\n  onBatchBegin?: (batch: number, logs?: Logs) => Promise<void>;\n  onBatchEnd?: (batch: number, logs?: Logs) => Promise<void>;\n}\n\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n  protected readonly trainBegin: (logs?: Logs) => Promise<void>;\n  protected readonly trainEnd: (logs?: Logs) => Promise<void>;\n  protected readonly epochBegin: (epoch: number, logs?: Logs) => Promise<void>;\n  protected readonly epochEnd: (epoch: number, logs?: Logs) => Promise<void>;\n  protected readonly batchBegin: (batch: number, logs?: Logs) => Promise<void>;\n  protected readonly batchEnd: (batch: number, logs?: Logs) => Promise<void>;\n\n  constructor(args: CustomCallbackArgs) {\n    super();\n    this.trainBegin = args.onTrainBegin;\n    this.trainEnd = args.onTrainEnd;\n    this.epochBegin = args.onEpochBegin;\n    this.epochEnd = args.onEpochEnd;\n    this.batchBegin = args.onBatchBegin;\n    this.batchEnd = args.onBatchEnd;\n  }\n\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs): Promise<void> {\n    if (this.epochBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochBegin(epoch, logs as Logs);\n    }\n  }\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs): Promise<void> {\n    if (this.epochEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochEnd(epoch, logs as Logs);\n    }\n  }\n\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs): Promise<void> {\n    if (this.batchBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchBegin(batch, logs as Logs);\n    }\n  }\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs): Promise<void> {\n    if (this.batchEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchEnd(batch, logs as Logs);\n    }\n  }\n\n  async onTrainBegin(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainBegin(logs as Logs);\n    }\n  }\n\n  async onTrainEnd(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainEnd(logs as Logs);\n    }\n  }\n}\n\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(callbacks: BaseCallback|BaseCallback[]|\n                                     CustomCallbackArgs|\n                                     CustomCallbackArgs[]): BaseCallback[] {\n  if (callbacks == null) {\n    return null;\n  }\n  if (callbacks instanceof BaseCallback) {\n    return [callbacks as BaseCallback];\n  }\n  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n    return callbacks as BaseCallback[];\n  }\n  // Convert custom callback configs to custom callback objects.\n  const callbackConfigs =\n      generic_utils.toList(callbacks) as CustomCallbackArgs[];\n  return callbackConfigs.map(\n      callbackConfig => new CustomCallback(callbackConfig));\n}\n\nexport declare type BaseCallbackConstructor = {\n  new (): BaseCallback\n};\n\n/**\n * A global registry for callback constructors to be used during Model.fit().\n */\nexport class CallbackConstructorRegistry {\n  private static constructors:\n      {[verbosityLevel: number]: BaseCallbackConstructor[]} = {};\n\n  /**\n   * Blocks public access to constructor.\n   */\n  private constructor() {}\n\n  /**\n   * Register a tf.Model.fit() callback constructor.\n   *\n   * The registered callback constructor will be used to instantiate\n   * callbacks for every tf.Model.fit() call afterwards.\n   *\n   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n   *   is to be reigstered.\n   * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n   * @throws Error, if the same callbackConstructor has been registered before,\n   *   either at the same or a different `verbosityLevel`.\n   */\n  static registerCallbackConstructor(\n      verbosityLevel: number, callbackConstructor: BaseCallbackConstructor) {\n    util.assert(\n        verbosityLevel >= 0 && Number.isInteger(verbosityLevel),\n        `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n      CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n    }\n    CallbackConstructorRegistry.constructors[verbosityLevel].push(\n        callbackConstructor);\n  }\n\n  private static checkForDuplicate(callbackConstructor:\n                                       BaseCallbackConstructor) {\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const constructors = CallbackConstructorRegistry.constructors[+levelName];\n      constructors.forEach(ctor => {\n        if (ctor === callbackConstructor) {\n          throw new ValueError('Duplicate callback constructor.');\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear all registered callback constructors.\n   */\n  protected static clear() {\n    CallbackConstructorRegistry.constructors = {};\n  }\n\n  /**\n   * Create callbacks using the registered callback constructors.\n   *\n   * Given `verbosityLevel`, all constructors registered at that level or above\n   * will be called and the instantiated callbacks will be used.\n   *\n   * @param verbosityLevel: Level of verbosity.\n   */\n  static createCallbacks(verbosityLevel: number): BaseCallback[] {\n    const constructors: BaseCallbackConstructor[] = [];\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const level = +levelName;\n      if (verbosityLevel >= level) {\n        constructors.push(...CallbackConstructorRegistry.constructors[level]);\n      }\n    }\n    return constructors.map(ctor => new ctor());\n  }\n}\n\nexport function configureCallbacks(\n    callbacks: BaseCallback[], yieldEvery: YieldEveryOptions,\n    verbose: ModelLoggingVerbosity, epochs: number, initialEpoch: number,\n    numTrainSamples: number, stepsPerEpoch: number, batchSize: number,\n    doValidation: boolean,\n    callbackMetrics: string[]): {callbackList: CallbackList, history: History} {\n  const history = new History();\n  const actualCallbacks: BaseCallback[] = [\n    new BaseLogger(yieldEvery),\n    ...CallbackConstructorRegistry.createCallbacks(verbose)\n  ];\n  if (callbacks != null) {\n    actualCallbacks.push(...callbacks);\n  }\n  actualCallbacks.push(history);\n  const callbackList = new CallbackList(actualCallbacks);\n\n  // TODO(cais): Figure out when this Model instance can have a dynamically\n  //   set property called 'callback_model' as in PyKeras.\n\n  callbackList.setParams({\n    epochs,\n    initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize,\n    verbose,\n    doValidation,\n    metrics: callbackMetrics,\n  });\n  return {callbackList, history};\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, Scalar} from '@tensorflow/tfjs-core';\n\n/**\n * Logs in which values can be either numbers or Tensors (Scalars).\n *\n * Used internally.\n */\nexport type UnresolvedLogs = {\n  [key: string]: number|Scalar;\n};\n\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n  const keys: string[] = [];\n  const scalarsToDispose: Scalar[] = [];\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      const valueScalar = value as Scalar;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n  const values = await Promise.all(promises);\n  for (let i = 0; i < values.length; ++i) {\n    logs[keys[i]] = values[i][0];\n  }\n\n  // Dispose the original scalar tensors.\n  dispose(scalarsToDispose);\n}\n\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}\n\n/**\n * Logs in which values can only be numbers.\n *\n * Used when calling client-provided custom callbacks.\n */\nexport type Logs = {\n  [key: string]: number;\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\nimport {getScalar} from './backend/state';\nimport * as K from './backend/tfjs_backend';\nimport {ValueError} from './errors';\nimport {LossOrMetricFn} from './types';\n\n\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x: Tensor, axis?: number): Tensor {\n  return tidy(() => {\n    const squareSum = tfc.sum(K.square(x), axis, true);\n    const epsilonTensor = tfc.mul(scalar(epsilon()), tfc.onesLike(x));\n    const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n    return tfc.div(x, norm);\n  });\n}\n\n/**\n * Loss or metric function: Mean squared error.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);\n * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);\n * const mse = tf.metrics.meanSquaredError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean squared error Tensor.\n */\nexport function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\n\n/**\n * Loss or metric function: Mean absolute error.\n *\n * Mathematically, mean absolute error is defined as:\n *   `mean(abs(yPred - yTrue))`,\n * wherein the `mean` is applied over feature dimensions.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);\n * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);\n * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean absolute error Tensor.\n */\nexport function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\n\n/**\n * Loss or metric function: Mean absolute percentage error.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);\n * const yPred = tf.tensor2d([[0, 1], [11, 24]]);\n * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean absolute percentage error Tensor.\n */\nexport function meanAbsolutePercentageError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const diff = tfc.sub(yTrue, yPred);\n    const clippedTrue =\n        tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n    const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n    return tfc.mul(getScalar(100.0), tfc.mean(absResult, -1));\n  });\n}\n\nexport function meanSquaredLogarithmicError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const one = getScalar(1.0);\n\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n    const firstLog = tfc.log(tfc.add(one, clippedPred));\n\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n    const secondLog = tfc.log(tfc.add(one, clippedTrue));\n\n    return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n  });\n}\n\nexport function squaredHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const zeroTensor = getScalar(0.0);\n    const one = getScalar(1.0);\n    const maxResult =\n        tfc.maximum(zeroTensor, tfc.sub(one, tfc.mul(yTrue, yPred)));\n    return tfc.mean(K.square(maxResult), -1);\n  });\n}\n\nexport function hinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const zeroTensor = getScalar(0.0);\n    const one = getScalar(1.0);\n    const maxResult =\n        tfc.maximum(zeroTensor, tfc.sub(one, tfc.mul(yTrue, yPred)));\n    return tfc.mean(maxResult, -1);\n  });\n}\n\nexport function categoricalHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const zeroTensor = getScalar(0.0);\n    const one = getScalar(1.0);\n    const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n    const neg = tfc.max(tfc.mul(tfc.sub(one, yTrue), yPred), -1);\n    return tfc.maximum(zeroTensor, tfc.add(one, tfc.sub(neg, pos)));\n  });\n}\n\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const log2 = getScalar(Math.log(2.0));\n    const predictionDiff = tfc.sub(yPred, yTrue);\n    const logcoshResult = tfc.sub(\n        tfc.add(\n            predictionDiff,\n            tfc.softplus(tfc.mul(getScalar(-2.0), predictionDiff))),\n        log2);\n    return tfc.mean(logcoshResult, -1);\n  });\n}\n\n/**\n * Categorical crossentropy between an output tensor and a target tensor.\n *\n * @param target A tensor of the same shape as `output`.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function categoricalCrossentropy(\n    target: Tensor, output: Tensor, fromLogits = false): Tensor {\n  return tidy(() => {\n    if (fromLogits) {\n      output = tfc.softmax(output);\n    } else {\n      // scale preds so that the class probabilities of each sample sum to 1.\n      const outputSum = tfc.sum(output, output.shape.length - 1, true);\n      output = tfc.div(output, outputSum);\n    }\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    return tfc.neg(tfc.sum(\n        tfc.mul(target.toFloat(), tfc.log(output)), output.shape.length - 1));\n  });\n}\n\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(\n    target: Tensor, output: Tensor): Tensor {\n  return tidy(() => {\n    const flatTarget = tfc.floor(K.flatten(target)).toInt() as Tensor1D;\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    const outputShape = output.shape;\n    const oneHotTarget =\n        tfc.oneHot(flatTarget, outputShape[outputShape.length - 1])\n            .reshape(outputShape);\n    const fromLogits = false;\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n  });\n}\n\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(\n    labels: Tensor, logits: Tensor): Tensor {\n  if (!util.arraysEqual(labels.shape, logits.shape)) {\n    throw new ValueError(\n        `logits and labels must have the same shape, but got shapes ` +\n        `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n  }\n  return tidy(() => {\n    // The logistic loss formula from above is\n    //   x - x * z + log(1 + exp(-x))\n    // For x < 0, a more numerically stable formula is\n    //   -x * z + log(1 + exp(x))\n    // Note that these two expressions can be combined into the following:\n    //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n    const reluLogits = logits.relu();\n    const negAbsLogits = logits.abs().neg();\n    return reluLogits.sub(logits.mul(labels)).add(negAbsLogits.exp().log1p());\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    let y: Tensor;\n    y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n    y = tfc.log(tfc.div(y, tfc.sub(getScalar(1), y)));\n    return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n  });\n}\n\nexport function kullbackLeiblerDivergence(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n    return tfc.sum(\n        tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n  });\n}\n\nexport function poisson(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const logPred = tfc.log(tfc.add(getScalar(epsilon()), yPred));\n    return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n  });\n}\n\n/**\n * Loss or metric function: Cosine proximity.\n *\n * Mathematically, cosine proximity is defined as:\n *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,\n * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`\n * represents element-wise multiplication.\n *\n * ```js\n * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);\n * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);\n * const proximity = tf.metrics.cosineProximity(yTrue, yPred);\n * proximity.print();\n * ```\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Cosine proximity Tensor.\n */\nexport function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const trueNormalized = l2Normalize(yTrue, -1);\n    const predNormalized = l2Normalize(yPred, -1);\n    const trueXPred = tfc.mul(trueNormalized, predNormalized);\n    return tfc.neg(tfc.sum(trueXPred, -1));\n  });\n}\n\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n\n// TODO(michaelterry): Add deserialize() function.\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn: string|LossOrMetricFn): LossOrMetricFn {\n  const lossesMap: {[functionName: string]: LossOrMetricFn} = {\n    meanSquaredError,\n    meanAbsoluteError,\n    meanAbsolutePercentageError,\n    meanSquaredLogarithmicError,\n    squaredHinge,\n    hinge,\n    categoricalHinge,\n    logcosh,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    binaryCrossentropy,\n    kullbackLeiblerDivergence,\n    poisson,\n    cosineProximity\n  };\n  if (typeof identifierOrFn === 'string') {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n    let errMsg = `Unknown loss ${identifierOrFn}`;\n    if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n      errMsg = `Unknown loss ${identifierOrFn}. ` +\n          'Use \"categoricalCrossentropy\" as the string name for ' +\n          'tf.losses.softmaxCrossEntropy';\n    }\n    throw new ValueError(errMsg);\n  } else {\n    return identifierOrFn;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from './backend/state';\nimport * as K from './backend/tfjs_backend';\nimport {NotImplementedError, ValueError} from './errors';\nimport {categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss} from './losses';\nimport {binaryCrossentropy as lossBinaryCrossentropy} from './losses';\nimport {LossOrMetricFn} from './types';\n\n/**\n * Binary accuracy metric function.\n *\n * `yTrue` and `yPred` can have 0-1 values. Example:\n * ```js\n * const x = tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);\n * const y = tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);\n * const accuracy = tfl.metrics.binaryAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in\n * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,\n * a value >= 0.5 and <= 1.0 is interpreted as 1.\n * )\n * Example:\n * ```js\n * const x = tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);\n * const y = tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth.\n * @param yPred Binary Tensor of prediction.\n * @return Accuracy Tensor.\n */\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const threshold = tfc.mul(getScalar(0.5), tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\n\n/**\n * Categorical accuracy metric function.\n *\n * Example:\n * ```js\n * const x = tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);\n * const y = tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);\n * const accuracy = tf.metrics.categoricalAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth: one-hot encoding of categories.\n * @param yPred Binary Tensor of prediction: probabilities or logits for the\n *   same categories as in `yTrue`.\n * @return Accuracy Tensor.\n */\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(\n      () => K.cast(\n          tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const one = getScalar(1);\n    return tfc.logicalAnd(yTrue.equal(one), yPred.equal(one))\n        .sum()\n        .cast('float32');\n  });\n}\n\nfunction falseNegatives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const one = getScalar(1);\n    const zero = getScalar(0);\n    return tfc.logicalAnd(yTrue.equal(one), yPred.equal(zero))\n        .sum()\n        .cast('float32');\n  });\n}\n\nfunction falsePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const one = getScalar(1);\n    const zero = getScalar(0);\n    return tfc.logicalAnd(yTrue.equal(zero), yPred.equal(one))\n        .sum()\n        .cast('float32');\n  });\n}\n\n/**\n * Computes the precision of the predictions with respect to the labels.\n *\n * Example:\n * ```js\n * const x = tensor2d(\n *    [\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1].\n *      [1, 0, 0, 0],\n *      [0, 0, 1, 0]\n *    ]\n * );\n *\n * const y = tensor2d(\n *    [\n *      [0, 0, 1, 0],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1].\n *      [0, 1, 0, 0],\n *      [0, 1, 0, 0]\n *    ]\n * );\n *\n * const precision = tf.metrics.precision(x, y);\n * precision.print();\n * ```\n *\n * @param yTrue The ground truth values. Expected to be contain only 0-1 values.\n * @param yPred The predicted values. Expected to be contain only 0-1 values.\n * @return Precision Tensor.\n */\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const zero = getScalar(0);\n\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n\n    const denominator = tp.add(fp);\n\n    return tfc.where(tfc.greater(denominator, zero), tp.div(denominator), zero)\n        .cast('float32');\n  });\n}\n\n/**\n * Computes the recall of the predictions with respect to the labels.\n *\n * Example:\n * ```js\n * const x = tensor2d(\n *    [\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1].\n *      [1, 0, 0, 0],\n *      [0, 0, 1, 0]\n *    ]\n * );\n *\n * const y = tensor2d(\n *    [\n *      [0, 0, 1, 0],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1].\n *      [0, 1, 0, 0],\n *      [0, 1, 0, 0]\n *    ]\n * );\n *\n * const recall = tf.metrics.recall(x, y);\n * recall.print();\n * ```\n *\n * @param yTrue The ground truth values. Expected to be contain only 0-1 values.\n * @param yPred The predicted values. Expected to be contain only 0-1 values.\n * @return Recall Tensor.\n */\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const zero = getScalar(0);\n\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n\n    const denominator = tp.add(fn);\n\n    return tfc.where(tfc.greater(denominator, zero), tp.div(denominator), zero)\n        .cast('float32');\n  });\n}\n\n/**\n * Binary crossentropy metric function.\n *\n * Example:\n * ```js\n * const x = tensor2d([[0], [1], [1], [1]]);\n * const y = tensor2d([[0], [0], [0.5], [1]]);\n * const crossentropy = tf.metrics.binaryCrossentropy(x, y);\n * crossentropy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth.\n * @param yPred Binary Tensor of prediction, probabilities for the `1` case.\n * @return Accuracy Tensor.\n */\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\n\n/**\n * Sparse categorical accuracy metric function.\n * \n * ```Example:\n * const yTrue = tensor1d([1, 1, 2, 2, 0]);\n * const yPred = tensor2d(\n *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\n * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);\n * crossentropy.print();\n * ```\n *\n * @param yTrue True labels: indices.\n * @param yPred Predicted probabilities or logits.\n * @returns Accuracy tensor.\n */\nexport function sparseCategoricalAccuracy(\n  yTrue: Tensor, yPred: Tensor): Tensor {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = yTrue.squeeze([yTrue.rank - 1]);\n  }\n  yPred = yPred.argMax(-1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = yPred.asType(yTrue.dtype);\n  }\n  return tfc.equal(yTrue, yPred).asType('float32');\n}\n\nexport function topKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\nexport function sparseTopKCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n\n// TODO(cais, nielsene): Add serialize().\n\nexport function get(identifier: string|LossOrMetricFn): LossOrMetricFn {\n  const metricsMap: {[functionName: string]: LossOrMetricFn} = {\n    binaryAccuracy,\n    categoricalAccuracy,\n    precision,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    mse,\n    MSE,\n    mae,\n    MAE,\n    mape,\n    MAPE,\n    cosine,\n  };\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\n\nimport {Optimizer, train} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\n\nimport {ValueError} from './errors';\n\n// Add (de)serialize()\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier: string): Optimizer {\n  const optimizerMap: {[optimizerName: string]: () => Optimizer} = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a Model object.\n *\n * @param model tf.Model instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 65;\n    positions = positions || [0.45, 0.85, 1];\n  } else {\n    lineLength = lineLength || 98;\n    positions = positions || [0.33, 0.55, 0.67, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', connections[i]], positions, printFn);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source layers/__init__.py */\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {deserializeKerasObject} from '../utils/generic_utils';\n\n/**\n * Instantiate a layer from a config dictionary.\n * @param config dict of the form {class_name: str, config: dict}\n * @param customObjects dict mapping class names (or function names)\n *   of custom (non-Keras) objects to class/functions\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns Layer instance (may be Model, Sequential, Layer...)\n */\nexport function deserialize(\n    config: serialization.ConfigDict,\n    customObjects = {} as serialization.ConfigDict,\n    fastWeightInit = false): serialization.Serializable {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'layer', fastWeightInit);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Porting note: This file doesn't exist in PyKeras.\n// Its purpose here is to centralize the boundary layer between\n// tfjs-layers's internal Config TS-Centric format and PyKeras's\n// serialized Python Config format.\n\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {PyJsonValue} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n\n/**\n * Test whether a value in an array is the name of a Model or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName<T>(\n    key: string, index: number, value: T): boolean {\n  return (key === 'inboundNodes' || key === 'outputLayers' ||\n          key === 'inputLayers') &&\n      index === 0 && typeof value === 'string';\n}\n\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(\n    pythonicConfig: PyJsonValue, key?: string): serialization.ConfigDictValue {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (\n      (typeof pythonicConfig === 'number') ||\n      (typeof pythonicConfig === 'boolean')) {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n    return tsArray;\n  } else {\n    const tsDict: serialization.ConfigDict = {};\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of Model and Layer instances, should not undergo the\n        // camel-case conversion.\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = generic_utils.toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n    return tsDict;\n  }\n}\n\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(\n    tsConfig: serialization.ConfigDictValue, key?: string): PyJsonValue {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (\n      (typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n    return pyArray;\n  } else {\n    const pyDict: serialization.ConfigDict = {};\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = generic_utils.toSnakeCase(tsKey);\n      if ((tsKey === 'name' || tsKey === 'className') &&\n          typeof tsValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of Model and Layer instances, should not undergo the\n        // snake-case conversion.\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n    return pyDict;\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '0.9.2';\nexport {version};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\n\nimport {cast, dispose, memory, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {ValueError} from '../errors';\nimport {Kwargs} from '../types';\nimport {toList} from '../utils/generic_utils';\n\nimport {InputLayer} from './input_layer';\nimport {SymbolicTensor} from './topology';\n\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key: SymbolicTensor, val: Tensor): Tensor {\n  // Check dtype compatibility.\n  if (key.dtype == null || key.dtype === val.dtype) {\n    //  a.  If types match, return val tensor as is.\n    return val;\n  }\n  try {\n    //  b. Attempt to convert to expected type.\n    return cast(val, key.dtype);\n  } catch (err) {\n    //  c. If conversion fails, return helpful error.\n    throw new ValueError(\n        `The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n        `of the key '${key.name}' (${key.dtype}).`);\n  }\n}\n\n/**\n * A concrete Tensor value for a symbolic tensor as the key.\n */\nexport interface Feed {\n  key: SymbolicTensor;\n  value: Tensor;\n}\n\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n  private id2Value: {[id: number]: Tensor} = {};\n  private id2Mask: {[id: number]: Tensor} = {};\n  private name2Id: {[name: string]: number} = {};\n\n  /**\n   * Constructor, optionally does copy-construction.\n   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n   *   copy-construction will be performed.\n   */\n  constructor(feeds?: Feed[]|FeedDict) {\n    if (feeds instanceof FeedDict) {\n      for (const id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n      for (const feed of feeds) {\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n\n  /**\n   * Add a key-value pair to the FeedDict.\n   *\n   * @param key The key of the feed.\n   * @param value The value of the tensor feed.\n   * @param mask The value of the mask feed (optional).\n   * @returns This `FeedDict`.\n   * @throws ValueError: If the key `SymbolicTensor` already exists in the\n   *   `FeedDict`.\n   */\n  add(key: SymbolicTensor, value: Tensor, mask?: Tensor): FeedDict {\n    if (this.id2Value[key.id] == null) {\n      this.id2Value[key.id] = assertFeedCompatibility(key, value);\n      this.name2Id[key.name] = key.id;\n      if (mask != null) {\n        this.id2Mask[key.id] = mask;\n      }\n    } else {\n      throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n    }\n    return this;\n  }\n\n  /**\n   * Add a Feed to the FeedDict.\n   * @param feed The new `Feed` to add.\n   * @returns This `FeedDict`.\n   */\n  addFeed(feed: Feed) {\n    this.add(feed.key, feed.value);\n  }\n\n  /**\n   * Probe whether a key already exists in the FeedDict.\n   * @param key\n   */\n  hasKey(key: SymbolicTensor): boolean {\n    return this.id2Value[key.id] != null;\n  }\n\n  /**\n   * Get all the SymbolicTensor available in this FeedDict.\n   */\n  names(): string[] {\n    return Object.keys(this.name2Id);\n  }\n\n  /**\n   * Get the feed value for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed value.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getValue(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Value[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Value[id];\n    }\n  }\n\n  /**\n   * Get the feed mask for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed mask.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getMask(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Mask[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Mask[id];\n    }\n  }\n\n  /** Dispose all mask Tensors held by this object. */\n  disposeMasks() {\n    if (this.id2Mask != null) {\n      dispose(this.id2Mask);\n    }\n  }\n}\n\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nconst cachedSorted: {[concatFetchNames: string]: SymbolicTensor[]} = {};\n\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nconst cachedRecipientCounts:\n    {[concatFetchNames: string]: {[fetchName: string]: number}} = {};\n\n/**\n * Interface for the optional object used for probing the memory\n * usage and other statistics during execution.\n */\nexport interface ExecutionProbe {\n  /**\n   * Maximum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  maxNumTensors?: number;\n\n  /**\n   * Minimum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  minNumTensors?: number;\n}\n\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(\n    fetches: SymbolicTensor|SymbolicTensor[], feedDict: FeedDict,\n    kwargs?: Kwargs, probe?: ExecutionProbe): Tensor|\n    Tensor[]|[Tensor | Tensor[]] {\n  const training: boolean = kwargs == null ? false : kwargs['training'];\n\n  const arrayFetches = Array.isArray(fetches);\n  const fetchArray: SymbolicTensor[] =\n      arrayFetches ? fetches as SymbolicTensor[] : [fetches as SymbolicTensor];\n\n  const outputNames = fetchArray.map(t => t.name);\n  const finalOutputs: Tensor[] = [];\n  const feedNames = feedDict.names();\n  for (const outputName of outputNames) {\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n\n  if (probe != null) {\n    // For optional probing of memory footprint during execution.\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  }\n\n  // Check cache.\n  const fetchAndFeedKey =\n      outputNames.join(',') + '|' + feedDict.names().join(',');\n  let sorted: SymbolicTensor[];\n  let recipientCounts: {[fetchName: string]: number};\n  if (cachedSorted[fetchAndFeedKey] == null) {\n    // Cache doesn't contain the desired combination of fetches. Compute\n    // topological sort for the combination for the first time.\n    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts;\n\n    // Store results in cache for future use.\n    cachedSorted[fetchAndFeedKey] = sorted;\n    cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n  }\n  sorted = cachedSorted[fetchAndFeedKey];\n  recipientCounts = {};\n  if (!training) {\n    Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n  }\n\n  const internalFeedDict = new FeedDict(feedDict);\n\n  // Start iterative execution on the topologically-sorted SymbolicTensors.\n  for (let i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      // For optional probing of memory usage during execution.\n      const numTensors = memory().numTensors;\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n\n    const symbolic = sorted[i];\n    const srcLayer = symbolic.sourceLayer;\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n    const inputValues: Tensor[] = [];\n    const inputMasks: Tensor[] = [];\n    const tensorsToDispose: Tensor[] = [];\n\n    let maskExists = false;\n    for (const input of symbolic.inputs) {\n      const value = internalFeedDict.getValue(input);\n      const mask = internalFeedDict.getMask(input);\n      inputValues.push(value);\n      inputMasks.push(mask);\n      if (mask != null) {\n        maskExists = true;\n      }\n      if (!training) {\n        recipientCounts[input.name]--;\n        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n            outputNames.indexOf(input.name) === -1 && !value.isDisposed) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs['mask'] = inputMasks[0];\n    }\n    const outputTensors =\n        toList(srcLayer.apply(inputValues, kwargs)) as Tensor[];\n    let outputMask: Tensor|Tensor[] = null;\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n    const layerOutputs = getNodeOutputs(symbolic);\n    const outputSymbolicTensors =\n        Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n        internalFeedDict.add(\n            outputSymbolicTensors[i], outputTensors[i],\n            Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n      const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[i];\n      }\n    }\n\n    if (!training) {\n      // Clean up Tensors that are no longer needed.\n      dispose(tensorsToDispose);\n    }\n  }\n  // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n  // tensors as we go, because these tensors are sometimes passed over a\n  // series of mutliple layers, i.e., not obeying the immediate input\n  // relations in the graph. If this becomes a memory-usage concern,\n  // we can improve this in the future.\n  internalFeedDict.disposeMasks();\n\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n\ntype RecipientCounts = {\n  [fetchName: string]: number\n};\n\nexport type RecipientMap = {\n  [fetchName: string]: Set<string>;\n};\n\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(\n    fetches: SymbolicTensor[], feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientCounts: RecipientCounts} {\n  util.assert(\n      fetches != null && fetches.length > 0,\n      `Exepcted at least one fetch, got none`);\n\n  let finalSorted: SymbolicTensor[] = [];\n  let finalRecipientMap: RecipientMap = {};\n  if (fetches.length === 1) {\n    // Special-casing 1 fetch for efficiency.\n    const out =\n        getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    const visited = new Set<string>();\n    for (const fetch of fetches) {\n      const {sorted, recipientMap} =\n          getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n\n      // Merge sorted SymbolicTensor Arrays.\n      for (const symbolicTensor of sorted) {\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      }\n\n      // Merge recipient maps.\n      for (const name in recipientMap) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = new Set<string>();\n        }\n        recipientMap[name].forEach(\n            recipient => finalRecipientMap[name].add(recipient));\n      }\n    }\n  }\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\n\nfunction recipientMap2Counts(recipientMap: RecipientMap): RecipientCounts {\n  const recipientCounts: RecipientCounts = {};\n  for (const name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n  return recipientCounts;\n}\n\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(\n    fetch: SymbolicTensor, feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientMap: RecipientMap} {\n  const visited = new Set<string>();\n  const sorted: SymbolicTensor[] = [];\n  const recipientMap: RecipientMap = {};\n\n  // Put keys of the feedDict into visited first, so they don't have to be\n  // walked. This is needed in case where there are feeds for intermediate\n  // SymbolicTensors of the graph.\n  for (const key of feedDict.names()) {\n    visited.add(key);\n  }\n\n  const stack: SymbolicTensor[] = [];\n  const marks: number[] = [];\n\n  // Initial population of stack and marks.\n  stack.push(fetch);\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n    if (visited.has(top.name)) {\n      stack.pop();\n      continue;\n    }\n    const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n    if (top.inputs.length === 0 || topIsMarked) {\n      // Input SymbolicTensor or all children have been visited.\n      stack.pop();\n      sorted.push(top);\n      visited.add(top.name);\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n      // been visited yet. Push them onto the stack.\n      marks.push(stack.length - 1);\n      for (const input of top.inputs) {\n        // Increment the recipient count. Note that this needs to happen\n        // regardless of whether the SymbolicTensor has been visited before.\n        if (recipientMap[input.name] == null) {\n          recipientMap[input.name] = new Set<string>();\n        }\n        recipientMap[input.name].add(top.name);\n\n        if (visited.has(input.name)) {\n          continue;  // Avoid repeated visits to the same SymbolicTensor.\n        }\n        stack.push(input);\n      }\n    }\n  }\n  return {sorted, recipientMap};\n}\n\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch: SymbolicTensor): SymbolicTensor|\n    SymbolicTensor[] {\n  let layerOutputs: SymbolicTensor|SymbolicTensor[];\n  if (fetch.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch.sourceLayer.output;\n  } else {\n    let nodeIndex: number = null;\n    for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n      for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n               .outputTensors) {\n        if (outputTensor.id === fetch.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n  }\n  return layerOutputs;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {Scalar, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {deserialize as deserializeLayer} from '../layers/serialization';\nimport {Kwargs, NamedTensorMap, PyJsonDict, Shape} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {convertTsToPythonic} from '../utils/serialization_utils';\nimport * as types_utils from '../utils/types_utils';\nimport {batchSetValue, LayerVariable} from '../variables';\nimport {version as layersVersion} from '../version';\n\nimport {execute, FeedDict} from './executor';\nimport {InputLayer} from './input_layer';\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/**\n * Converts layers weights to a format suitable for TensorFlow.js Layers.\n *\n * Porting Note: The function `preprocess_weights_for_loading()` in PyKeras\n * performs conversion from Keras 1 to Keras 2. But in TypeScript, we\n * require Keras version to be 2. Thus this conversion is not applicable. We\n * simply check the Keras version and pass the weights through.\n *\n * @param layer Layer instance.\n * @param weights Input weights.\n * @param originalKerasVersion Keras version for the weights.\n * @param originalBackend Keras backend the weights were trained with.\n * @returns Output weights as Tensors.\n */\nfunction preprocessWeightsForLoading(\n    layer: Layer, weights: LayerVariable[], originalKerasVersion?: string,\n    originalBackend?: string): LayerVariable[] {\n  if (!originalKerasVersion.startsWith('2.')) {\n    throw new ValueError(\n        'Unsupported Keras version in weights being loaded: ' +\n        originalKerasVersion);\n  }\n  return weights;\n}\n\n/**\n * Create an Tensor from info about dtype, shape and values.\n * @param dtype DType string.\n * @param shape Shape.\n * @param value Values of the array, as a scalar or nested Array of proper\n *   shape.\n * @returns An Tensor instance.\n */\n// tslint:disable-next-line:no-any\nfunction loadTensor(dtype: string, shape: Shape, value: any): Tensor {\n  const dataType = generic_utils.stringToDType(dtype);\n  return Tensor.make(\n      shape, {values: shape.length === 0 ? value : util.flatten(value)},\n      dataType);\n}\n\n// TODO(cais): Maybe remove the following (b/74015805).\n/**\n * Load weights from a weights JSON object to an array of layers.\n *\n * Porting Note: This is ported from the Python function\n *   load_weights_from_hdf5_group_by_name()\n *\n * @param weightsJSON. The input JSON object represent the weights from a\n *   trained Keras model. See scripts/pykeras.py for more details.\n * @param layers An array of target layers.\n * @param skipMismatch Whether to skip loading of layers where there is a\n *   mismatch in the number of weights, or a mismatch in the shape of the\n *   weights.\n */\nexport function loadWeightsFromJson(\n    weightsJSON: PyJsonDict, layers: Layer[], skipMismatch = false): void {\n  const originalKerasVersion = weightsJSON['keras_version'] as string;\n  const originalBackend = weightsJSON['backend'] as string;\n  const layerNames = layers.map(layer => layer.name);\n\n  // Reverse index of layer name to list of layers with name.\n  const index: {[layerName: string]: Layer[]} = {};\n  for (const layer of layers) {\n    if (layer.name != null) {\n      if (index[layer.name] == null) {\n        index[layer.name] = [];\n      }\n      index[layer.name].push(layer);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  const nameToWeights = weightsJSON['weights'] as {[name: string]: any};\n  const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n  for (let k = 0; k < layerNames.length; ++k) {\n    const name = layerNames[k];\n    let layerWeights = nameToWeights[name];\n    if (layerWeights == null) {\n      layerWeights = [];\n    }\n\n    let weightValues: LayerVariable[] = [];\n    for (let n = 0; n < layerWeights.length; ++n) {\n      // tslint:disable:no-any\n      const weightEntry =\n          layerWeights[n] as {[key: string]: string | Shape | any};\n      // tslint:enable\n      weightValues.push(new LayerVariable(loadTensor(\n          weightEntry['dtype'], weightEntry['shape'] as Shape,\n          weightEntry['value'])));\n    }\n    for (const layer of index[name]) {\n      const symbolicWeights = layer.weights;\n      weightValues = preprocessWeightsForLoading(\n          layer, weightValues, originalKerasVersion, originalBackend);\n      if (weightValues.length !== symbolicWeights.length) {\n        if (skipMismatch) {\n          console.warn(\n              `Skipping loading of weights of layer ${layer.name} ` +\n              `due to mismatch in number of weights: (${weightValues.length} ` +\n              `vs ${symbolicWeights.length}).`);\n        } else {\n          throw new ValueError(\n              `Layer #${k} (named \"${layer.name}\") expects ` +\n              `${symbolicWeights.length} weight(s), but the saved weights ` +\n              `have ${weightValues.length} element(s).`);\n        }\n      }\n\n      // Set values.\n      for (let i = 0; i < weightValues.length; ++i) {\n        if (skipMismatch) {\n          if (!util.arraysEqual(\n                  symbolicWeights[i].shape, weightValues[i].shape)) {\n            console.warn(\n                `Skipping loading of weights for layer ${layer.name} due ` +\n                `to mismatch in shape (${symbolicWeights[i].shape} vs ` +\n                `${weightValues[i].shape})`);\n            continue;\n          }\n        }\n        weightValueTuples.push([symbolicWeights[i], weightValues[i].read()]);\n      }\n    }\n  }\n  batchSetValue(weightValueTuples);\n}\n\n/**\n * Load weights from a named tensor map.\n *\n * Porting Note: This is ported from the Python function\n *   load_weights_from_hdf5_group_by_name()\n *\n * @param weights The named tensor map mapping names of weights to weight\n *   values.\n * @param strict Require that the provided weights exactly match those required\n *   by the layers.  Default true.  Passing false means that both extra weights\n *   and missing weights will be silently ignored.\n * @param layers An array of target layers.\n */\nexport function loadWeightsFromNamedTensorMap(\n    weights: NamedTensorMap, layers: Layer[], strict = true): void {\n  // Make a dictionary mapping weight name to weight.\n  const nameToWeight: {[name: string]: LayerVariable} = {};\n  let totalWeightsCount = 0;\n  for (const layer of layers) {\n    for (const weight of layer.weights) {\n      if (nameToWeight[weight.originalName] != null) {\n        throw new ValueError(`Duplicate weight name: ${weight.originalName}`);\n      }\n      nameToWeight[weight.originalName] = weight;\n      totalWeightsCount++;\n    }\n  }\n\n  const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n  for (const name in weights) {\n    if (nameToWeight[name] != null) {\n      weightValueTuples.push([nameToWeight[name], weights[name]]);\n    } else if (strict) {\n      throw new ValueError(\n          `Provided weight data has no target variable: ${name}`);\n    }\n    delete nameToWeight[name];\n  }\n\n  if (strict) {\n    // Check that all weights are set.\n    const unsetNames: string[] = [];\n    for (const name in nameToWeight) {\n      unsetNames.push(name);\n    }\n    if (unsetNames.length > 0) {\n      throw new ValueError(\n          `${unsetNames.length} of ${totalWeightsCount} weights are not set: ` +\n          `${unsetNames}`);\n    }\n  }\n\n  batchSetValue(weightValueTuples);\n}\n\n/** Constructor config for Container. */\nexport interface ContainerArgs {\n  inputs: SymbolicTensor|SymbolicTensor[];\n  outputs: SymbolicTensor|SymbolicTensor[];\n  name?: string;\n}\n\n/**\n * A Container is a directed acyclic graph of layers.\n *\n * It is the topological form of a \"model\". A Model\n * is simply a Container with added training routines.\n *\n */\nexport abstract class Container extends Layer {\n  inputs: SymbolicTensor[];\n  outputs: SymbolicTensor[];\n\n  inputLayers: Layer[];\n  inputLayersNodeIndices: number[];\n  inputLayersTensorIndices: number[];\n\n  outputLayers: Layer[];\n  outputLayersNodeIndices: number[];\n  outputLayersTensorIndices: number[];\n\n  layers: Layer[];\n  layersByDepth: {[depth: string]: Layer[]};\n  nodesByDepth: {[depth: string]: Node[]};\n\n  containerNodes = new Set<string>();\n\n  // TODO(michaelterry): Add cache support\n  // private outputMaskCache: any;\n  // private outputTensorCache: any;\n  // private outputShapeCache: any;\n\n  inputNames: string[];\n  outputNames: string[];\n  feedInputShapes: Shape[];\n\n  protected internalInputShapes: Shape[];\n  protected internalOutputShapes: Shape[];\n  // TODO(cais): Maybe 'feed' should not in the names of these variables,\n  //   due to the fact that our backend is not symbolic.\n  protected feedInputNames: string[];\n  protected feedOutputNames: string[];\n\n  constructor(args: ContainerArgs) {\n    // No args passed to super's constructor.\n    super({});\n    this.name = args.name;\n    if (this.name == null) {\n      const prefix = this.getClassName().toLowerCase();\n      this.name = getUid(prefix);\n    }\n\n    this.supportsMasking = false;\n    this.trainable = true;\n    this.updatable = true;\n\n    // TODO(michaelterry): Initialize perInputLosses/Updates here.\n\n    // Container-specific properties.\n    if (Array.isArray(args.inputs)) {\n      this.inputs = args.inputs.slice();\n    } else {\n      this.inputs = [args.inputs];\n    }\n    if (Array.isArray(args.outputs)) {\n      this.outputs = args.outputs.slice();\n    } else {\n      this.outputs = [args.outputs];\n    }\n\n    // Check for redundancy in inputs.\n    if (generic_utils.unique(this.inputs).length !== this.inputs.length) {\n      throw new ValueError(\n          'The list of inputs passed to the model is ' +\n          'redundant. All inputs should only appear once. Found: ' +\n          this.inputs.map(x => x.name));\n    }\n\n    // Check for redundancy in outputs.\n    if (generic_utils.unique(this.outputs).length !== this.outputs.length) {\n      console.warn(\n          'The list of outputs passed to the model is redundant. ' +\n          'All outputs should only appear once. Found: ' +\n          this.outputs.map(x => x.name));\n    }\n\n    /*\n      List of initial layers (1 to 1 mapping with this.inputs, hence the same\n      layer might appear twice)\n    */\n    this.inputLayers = [];\n    this.inputLayersNodeIndices = [];\n    this.inputLayersTensorIndices = [];\n    /*\n      List of layers (1 to 1 mapping with this.outputs, hence the same layer\n      might appear twice)\n    */\n    this.outputLayers = [];\n    this.outputLayersNodeIndices = [];\n    this.outputLayersTensorIndices = [];\n    /*\n      All layers in order of horizontal graph traversal. Entries are unique.\n      Includes input and output layers.\n    */\n    this.layers = [];\n\n    // TODO(michaelterry): Determine if caching still needed with eager\n    // backend.\n    /*\n      This is for performance optimization when calling the Container on new\n      inputs. Every time the Container is called on a set on input tensors,\n      we compute the output tensors, output masks and output shapes in one pass,\n      then cache them here. When one of these outputs is queried later,\n      we retrieve it from there instead of recomputing it.\n    */\n    // this.outputTensorCache = {};\n    // this.outputShapeCache = {};\n\n    // Build this.outputLayers:\n    for (const x of this.outputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      this.outputLayers.push(layer as Layer);\n      this.outputLayersNodeIndices.push(nodeIndex);\n      this.outputLayersTensorIndices.push(tensorIndex);\n    }\n\n    // TODO(michaelterry): Add output mask cache code.\n\n    // Build this.inputLayers:\n    for (const x of this.inputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      /*\n        It's supposed to be an input layer, so only one node\n        and one tensor output.\n      */\n      generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n      generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n      this.inputLayers.push(layer as Layer);\n      this.inputLayersNodeIndices.push(nodeIndex);\n      this.inputLayersTensorIndices.push(tensorIndex);\n    }\n\n    // Build this.inputNames and this.outputNames.\n    this.inputNames = [];\n    this.outputNames = [];\n    this.feedInputShapes = [];\n    this.feedInputNames = [];\n    this.feedOutputNames = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      // Check that layer is an InputLayer.\n      if (!(layer instanceof InputLayer)) {\n        throw new TypeError(\n            'Input layers to a Model must be InputLayer objects. ' +\n            `Received inputs: ${args.inputs}. ` +\n            `Input ${i} (0-based) originates ` +\n            `from layer type ${layer.getClassName()}.`);\n      }\n      this.inputNames.push(layer.name);\n      this.feedInputShapes.push(layer.batchInputShape);\n\n      this.feedInputNames.push(layer.name);\n    }\n    for (const layer of this.outputLayers) {\n      this.outputNames.push(layer.name);\n    }\n\n    this.internalInputShapes = this.inputs.map(x => x.shape);\n    this.internalOutputShapes = this.outputs.map(x => x.shape);\n\n    /*\n      Container_nodes: set of nodes included in the graph (not all nodes\n      included in the layers are relevant to the current graph).\n    */\n    // ids of all nodes relevant to the Container:\n    const nodesDepths: {[nodeID: string]: number} = {};\n    // To recover nodes from their ID.\n    const nodeIDToNode: {[nodeID: string]: Node} = {};\n    const layersDepths: {[layerID: string]: number} = {};\n    // To layers from their ID.\n    const layerIDToLayer: {[layerID: string]: Layer} = {};\n    const layerIndices: {[layerID: string]: number} = {};\n    const nodesInDecreasingDepth: Node[] = [];\n\n    /**\n     * Builds a map of the graph of layers.\n     *\n     * This recursively updates the map `layerIndices`,\n     * the list `nodesInDecreasingDepth` and the set `containerNodes`.\n     *\n     * @param tensor Some tensor in a graph.\n     * @param finishedNodes Set of nodes whose subgraphs have been traversed\n     *         completely. Useful to prevent duplicated work.\n     * @param nodesInProgress Set of nodes that are currently active on the\n     *         recursion stack. Useful to detect cycles.\n     * @param layer Layer from which `tensor` comes from. If not provided,\n     *   will be obtained from tensor.sourceLayer.\n     * @param nodeIndex Node index from which `tensor` comes from.\n     * @param tensorIndex TensorIndex from which `tensor` comes from.\n     *\n     * @exception RuntimeError if a cycle is detected.\n     */\n    const buildMapOfGraph =\n        (tensor: SymbolicTensor, finishedNodes: Node[], nodesInProgress: Node[],\n         layer?: Layer, nodeIndex?: number, tensorIndex?: number) => {\n          if (layer == null || nodeIndex == null || tensorIndex == null) {\n            layer = tensor.sourceLayer as Layer;\n            nodeIndex = tensor.nodeIndex;\n            tensorIndex = tensor.tensorIndex;\n          }\n          const node = layer.inboundNodes[nodeIndex];\n\n          // Prevent cycles.\n          if (nodesInProgress.indexOf(node) !== -1) {\n            throw new RuntimeError(\n                `The tensor ${tensor.name} at layer \"${layer.name}\" ` +\n                'is part of a cycle.');\n          }\n\n          // Don't repeat work for shared subgraphs\n          if (finishedNodes.indexOf(node) !== -1) {\n            return;\n          }\n\n          // Update containerNodes.\n          this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n\n          // Store the traversal order for layer sorting.\n          if (!(layer.id in layerIndices)) {\n            layerIndices[layer.id] = Object.keys(layerIndices).length;\n          }\n\n          if (nodesInProgress.indexOf(node) === -1) {\n            nodesInProgress.push(node);\n          }\n\n          // Propagate to all previous tensors connected to this node.\n          const numInboundLayers = node.inboundLayers.length;\n          for (let i = 0; i < numInboundLayers; i++) {\n            const x = node.inputTensors[i];\n            const layer = node.inboundLayers[i];\n            const nodeIndex = node.nodeIndices[i];\n            const tensorIndex = node.tensorIndices[i];\n            buildMapOfGraph(\n                x, finishedNodes, nodesInProgress, layer, nodeIndex,\n                tensorIndex);\n          }\n          finishedNodes.push(node);\n          while (nodesInProgress.indexOf(node) >= 0) {\n            nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n          }\n          nodesInDecreasingDepth.push(node);\n        };\n\n    const finishedNodes: Node[] = [];\n    const nodesInProgress: Node[] = [];\n    for (const x of this.outputs) {\n      buildMapOfGraph(x, finishedNodes, nodesInProgress);\n    }\n\n    const reversedNodesInDecreasingDepth =\n        nodesInDecreasingDepth.slice().reverse();\n    for (const node of reversedNodesInDecreasingDepth) {\n      nodeIDToNode[node.id] = node;\n      // If the depth is not set, the node has no outbound nodes (depth 0).\n      if (!(node.id in nodesDepths)) {\n        nodesDepths[node.id] = 0;\n      }\n      let depth = nodesDepths[node.id];\n\n      // Update the depth of the corresponding layer\n      const previousDepth =\n          (layersDepths[node.outboundLayer.id] == null ?\n               0 :\n               layersDepths[node.outboundLayer.id]);\n\n      /*\n        If we've seen this layer before at a higher depth, we should use that\n        depth instead of the node depth.  This is necessary for shared layers\n        that have inputs at different depth levels in the graph.\n      */\n      depth = Math.max(depth, previousDepth);\n      layersDepths[node.outboundLayer.id] = depth;\n      layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n      nodesDepths[node.id] = depth;\n\n      // Update the depth of inbound nodes.\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const inboundLayer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n        const previousDepth =\n            (nodesDepths[inboundNode.id] == null ? 0 :\n                                                   nodesDepths[inboundNode.id]);\n        nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);\n        nodeIDToNode[inboundNode.id] = inboundNode;\n      }\n    }\n\n    // Build a dict {depth: list of nodes with this depth}\n    const nodesByDepth: {[depth: string]: Node[]} = {};\n    for (const nodeID in nodesDepths) {\n      const depth = nodesDepths[nodeID];\n      if (!(depth in nodesByDepth)) {\n        nodesByDepth[depth] = [];\n      }\n      nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n    }\n\n    // Build a dict {depth: list of layers with this depth}\n    const layersByDepth: {[depth: string]: Layer[]} = {};\n    for (const layerID in layersDepths) {\n      const depth = layersDepths[layerID];\n      if (!(depth in layersByDepth)) {\n        layersByDepth[depth] = [];\n      }\n      layersByDepth[depth].push(layerIDToLayer[layerID]);\n    }\n\n    // Get sorted list of layer depths.\n    let depthKeys = Object.keys(layersByDepth)\n                        .map(x => parseInt(x, 10))\n                        .sort(generic_utils.reverseNumberCompare);\n\n    // Set this.layers and this.layersByDepth.\n    this.layers = [];\n    for (const depth of depthKeys) {\n      const layersForDepth = layersByDepth[depth];\n      // Container.layers needs to have a deterministic order:\n      // here we order them by traversal order.\n      layersForDepth.sort((a, b) => {\n        const aIndex = layerIndices[a.id];\n        const bIndex = layerIndices[b.id];\n        if (aIndex < bIndex) {\n          return -1;\n        }\n        if (aIndex > bIndex) {\n          return 1;\n        }\n        return 0;\n      });\n      for (const layer of layersForDepth) {\n        this.layers.push(layer);\n      }\n    }\n    this.layersByDepth = layersByDepth;\n\n    // Get sorted list of node depths;\n    depthKeys = Object.keys(nodesByDepth)\n                    .map(x => parseInt(x, 10))\n                    .sort(generic_utils.reverseNumberCompare);\n\n    // Check that all tensors required are computable.\n    // computable_tensors: all tensors in the graph\n    // that can be computed from the inputs provided.\n    const computableTensors = this.inputs.slice();\n\n    // To provide a better error msg.\n    const layersWithCompleteInput: string[] = [];\n    for (const depth of depthKeys) {\n      for (const node of nodesByDepth[depth]) {\n        const layer = node.outboundLayer;\n        if (layer != null) {\n          for (const x of node.inputTensors) {\n            if (computableTensors.indexOf(x) === -1) {\n              throw new RuntimeError(\n                  `Graph disconnected: cannot obtain value for tensor ${x}` +\n                  ` at layer \"${layer.name}\". ` +\n                  'The following previous layers were accessed without ' +\n                  `issue: ${layersWithCompleteInput}`);\n            }\n          }\n          for (const x of node.outputTensors) {\n            computableTensors.push(x);\n          }\n          layersWithCompleteInput.push(layer.name);\n        }\n      }\n    }\n\n    // Set this.containerNodes and this.nodesByDepth.\n    this.nodesByDepth = nodesByDepth;\n\n    // Ensure name unicity, which will be crucial for serialization\n    // (since serialized nodes refer to layers by their name).\n    const allNames = this.layers.map(x => x.name);\n    for (const name of allNames) {\n      const numOccurrences = allNames.filter(x => x === name).length;\n      if (numOccurrences !== 1) {\n        throw new RuntimeError(\n            `The name \"${name}\" is used ${numOccurrences} times ` +\n            'in the model. All layer names should be unique. Layer names: ' +\n            JSON.stringify(allNames));\n      }\n    }\n\n    // Layer parameters.\n    // The new container starts with a single inbound node\n    // for its inputs, and no outbound nodes.\n    // Will be appended to by future calls to apply().\n    this.outboundNodes = [];\n    // Will be appended to below, and by future calls to apply().\n    this.inboundNodes = [];\n\n    // Create the node linking internal inputs to internal outputs.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: this.inputs,\n      outputTensors: this.outputs,\n      inputMasks: this.inputs.map(x => null),\n      outputMasks: this.outputs.map(x => null),\n      inputShapes: this.inputs.map(x => x.shape),\n      outputShapes: this.outputs.map(x => x.shape)\n    });\n    this.built = true;\n    this._refCount = 1;  // The ref count of a container always start at 1.\n  }\n\n  protected assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Container '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose a Model's weights.\n   *\n   * This method decrease the reference count of the Model object by 1.\n   *\n   * A Model is reference-counted. Its reference count is incremented by 1\n   * when it is first constructed and when it is used as a Layer of another\n   * Model.\n   *\n   * If the reference count of a Model becomes 0, the `dispose` method of\n   * all its constituent `Layer`s will be called.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * `dispose` method of its constituent `Layer`s will *not* be called.\n   *\n   * After a Model is disposed, it cannot be used in calls such as\n   * 'predict`, `evaluate` or `fit` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the Model after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the Model has\n   *   already been disposed.\n   */\n  dispose(): DisposeResult {\n    this.assertNotDisposed();\n    const result:\n        DisposeResult = {refCountAfterDispose: null, numDisposedVariables: 0};\n    if (--this._refCount === 0) {\n      for (const layer of this.layers) {\n        result.numDisposedVariables += layer.dispose().numDisposedVariables;\n      }\n    }\n    result.refCountAfterDispose = this._refCount;\n    return result;\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    // Porting Note: This check below is to prevent errors where the\n    //   _trainableWeights inherited from the parent class (Layer) gets\n    //   inadvertently used.\n    if (this._trainableWeights.length > 0) {\n      throw new ValueError(\n          'Container instance unexpectedly contains _trainableWeights.' +\n          'The trainable weights of a Container are a union of the ' +\n          'trainable weights of its consituent Layers. Its own ' +\n          '_trainableWeights must remain an empty Array.');\n    }\n\n    if (!this.trainable) {\n      return [];\n    }\n    let weights: LayerVariable[] = [];\n    for (const layer of this.layers) {\n      weights = weights.concat(layer.trainableWeights);\n    }\n    return weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const layer of this.layers) {\n      weights.push(...layer.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const layer of this.layers) {\n        trainableWeights.push(...layer.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  /**\n   * Loads all layer weights from a JSON object.\n   *\n   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\n   *   TypeScript. The utility script at `scripts/pykeras.py` offers means\n   *   to convert them into JSON strings compatible with this method.\n   * Porting Note: TensorFlow.js Layers supports only loading by name currently.\n   *\n   * @param weightsJSON A JSON mapping weight names to weight values as nested\n   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\n   *   names to `tf.Tensor` objects.\n   * @param skipMismatch Whether to skip loading of layers where there is a\n   *   mismatch in the number of weights, or a mismatch in the shape of the\n   *   weight (only valid when `by_name`=True).\n   * @param isNamedTensorMap Whether the 1st argument (`weightsJSON`) is a\n   *   `NamedTensorMap`.\n   * @param strict Require that the provided weights exactly match those\n   *   required by the container.  Default: `true`.  Passing `false` means that\n   *   extra weights and missing weights will be silently ignored.\n   */\n  loadWeights(\n      weightsJSON: PyJsonDict|NamedTensorMap, skipMismatch = false,\n      isNamedTensorMap = false, strict = true) {\n    // TODO(cais): Maybe the JsonDict support should be removed after serving\n    //   weights from XHR is working. If so, the `loadWeightsFromJson` flag\n    //   should be removed as well. (b/74015805)\n    // TODO(cais): See if we can use smarter type resolution to avoid sending\n    //   the type info as a separate arg (isNamedTensormap).\n    if (isNamedTensorMap) {\n      loadWeightsFromNamedTensorMap(\n          weightsJSON as NamedTensorMap, this.layers, strict);\n    } else {\n      loadWeightsFromJson(weightsJSON as PyJsonDict, this.layers, skipMismatch);\n    }\n  }\n\n  /**\n   * Util shared between different serialization methods.\n   * @returns Model config with Keras version information added.\n   */\n  private updatedConfig(): serialization.ConfigDict {\n    const theConfig = this.getConfig();\n    const modelConfig: serialization.ConfigDict = {\n      className: this.getClassName(),\n      config: theConfig,\n      kerasVersion: `tfjs-layers ${layersVersion}`,\n      // TODO(nielsene): Replace something like K.backend() once\n      // possible.\n      backend: 'TensorFlow.js'\n    };\n    return modelConfig;\n  }\n\n  /**\n   * Returns a JSON string containing the network configuration.\n   *\n   * To load a network from a JSON save file, use\n   * models.modelFromJSON(jsonString);\n   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\n   * @param returnString Whether the return value should be stringified\n   *    (default: `true`).\n   * @returns a JSON string if `returnString` (default), or a JSON object if\n   *   `!returnString`.\n   */\n  // tslint:disable-next-line:no-any\n  toJSON(unused?: any, returnString = true): string|PyJsonDict {\n    const modelConfig = convertTsToPythonic(this.updatedConfig()) as PyJsonDict;\n    return returnString ? JSON.stringify(modelConfig) : modelConfig;\n  }\n\n  /**\n   * Call the model on new inputs.\n   *\n   * In this case `call` just reapplies all ops in the graph to the new inputs\n   * (e.g. build a new computational graph from the provided inputs).\n   *\n   * @param inputs A tensor or list of tensors.\n   * @param mask A mask or list of masks. A mask can be either a tensor or null\n   *   (no mask).\n   *\n   * @return A tensor if there is a single output, or a list of tensors if there\n   *   are more than one outputs.\n   */\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = generic_utils.toList(inputs);\n      const feedDict = new FeedDict();\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n      return execute(this.outputs, feedDict, kwargs) as Tensor | Tensor[];\n    });\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tidy(() => {\n      inputs = generic_utils.toList(inputs);\n      let masks: Tensor[];\n      if (mask == null) {\n        masks = generic_utils.pyListRepeat(null, inputs.length);\n      } else {\n        masks = generic_utils.toList(mask);\n      }\n      // TODO(michaelterry): Add support for mask caching.\n      return this.runInternalGraph(inputs, masks)[1];\n    });\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   */\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    const inputShapes = types_utils.normalizeShapeList(inputShape);\n    if (inputShapes.length !== this.inputLayers.length) {\n      throw new ValueError(\n          `Invalid inputShape argument ${inputShape}: ` +\n          `model has ${this.inputLayers.length} tensor inputs.`);\n    }\n\n    // TODO(michaelterry): Add caching\n    const layersToOutputShapes: {[shapeKey: string]: Shape} = {};\n    for (let i = 0; i < inputShapes.length; i++) {\n      const layer = this.inputLayers[i];\n      const inputShape = inputShapes[i];\n      // It's an input layer: computeOutputShape is identity,\n      // and there is only one node and one tensor output.\n      const shapeKey = layer.name + '_0_0';\n      layersToOutputShapes[shapeKey] = inputShape;\n    }\n\n    const depthKeys = Object.keys(this.nodesByDepth)\n                          .map(x => parseInt(x, 10))\n                          .sort(generic_utils.reverseNumberCompare);\n    // Iterate over nodes, by depth level.\n    if (depthKeys.length > 1) {\n      for (const depth of depthKeys) {\n        const nodes = this.nodesByDepth[depth];\n        for (const node of nodes) {\n          // This is always a single layer, never a list.\n          const layer = node.outboundLayer;\n          if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {\n            // We've already covered the input layers a few lines above.\n            continue;\n          }\n          // Potentially redundant list, same size of node.inputTensors.\n          const inputShapes: Shape[] = [];\n          for (let j = 0; j < node.inboundLayers.length; j++) {\n            const inboundLayer = node.inboundLayers[j];\n            const nodeIndex = node.nodeIndices[j];\n            const tensorIndex = node.tensorIndices[j];\n            const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;\n            const inputShape = layersToOutputShapes[shapeKey];\n            inputShapes.push(inputShape);\n          }\n\n          const outputShape = layer.computeOutputShape(\n              generic_utils.singletonOrArray(inputShapes));\n\n          const outputShapes = types_utils.normalizeShapeList(outputShape);\n          const nodeIndex = layer.inboundNodes.indexOf(node);\n          for (let j = 0; j < outputShapes.length; j++) {\n            const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n            layersToOutputShapes[shapeKey] = outputShapes[j];\n          }\n        }\n      }\n    }\n\n    // Read final output shapes from layersToOutputShapes.\n    const outputShapes: Shape[] = [];\n    const outputShapeKeys: string[] = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n      outputShapeKeys.push(shapeKey);\n    }\n\n    for (let i = 0; i < outputShapeKeys.length; i++) {\n      const key = outputShapeKeys[i];\n      generic_utils.assert(key in layersToOutputShapes);\n      outputShapes.push(layersToOutputShapes[key]);\n    }\n\n    // TODO(michaelterry): Update cache\n    return generic_utils.singletonOrArray(outputShapes);\n  }\n\n  /**\n   * Computes output tensors for new inputs.\n   *\n   * Note:\n   *   - Expects `inputs` to be a list (potentially with 1 element).\n   *\n   * @param inputs List of tensors\n   * @param masks List of masks (tensors or null).\n   * @return Three lists: outputTensors, outputMasks, outputShapes\n   */\n  protected runInternalGraph(inputs: Tensor[], masks?: Tensor[]):\n      [Tensor[], Tensor[], Shape[]] {\n    if (masks == null) {\n      masks = generic_utils.pyListRepeat(null, inputs.length);\n    }\n\n    // Dictionary mapping reference tensors to tuples\n    // (computed tensor, compute mask)\n    // we assume a 1:1 mapping from tensor to mask\n    // TODO: raise exception when a `.computeMask()` call\n    // does not return a list the same size as `call`\n    const tensorMap: {[tensorID: string]: [Tensor, Tensor]} = {};\n    for (let i = 0; i < this.inputs.length; ++i) {\n      const x = this.inputs[i];\n      const y = inputs[i];\n      const mask = masks[i];\n      tensorMap[x.id] = [y, mask];\n    }\n\n    const depthKeys = Object.keys(this.nodesByDepth)\n                          .map(x => parseInt(x, 10))\n                          .sort(generic_utils.reverseNumberCompare);\n    for (const depth of depthKeys) {\n      const nodes = this.nodesByDepth[depth];\n      for (const node of nodes) {\n        // This is always a single layer, never a list.\n        const layer = node.outboundLayer;\n        const referenceInputTensors = node.inputTensors;\n        const referenceOutputTensors = node.outputTensors;\n\n        // If all previous input tensors are available in tensorMap,\n        // then call node.inboundLayer on them.\n        // List of tuples [input, mask]:\n        const computedData = new Array<[Tensor, Tensor]>();\n        for (const x of referenceInputTensors) {\n          if (x.id in tensorMap) {\n            computedData.push(tensorMap[x.id]);\n          }\n        }\n        if (computedData.length === referenceInputTensors.length) {\n          // TODO(michaelterry): Add K.name_scope here, if we need it.\n          let kwargs: Kwargs = {};\n          let computedTensors: Tensor[];\n          let computedMasks: Tensor[];\n          let outputTensors: Tensor[];\n          let outputMasks: Tensor[];\n          // call layer\n          if (node.callArgs != null) {\n            kwargs = node.callArgs;\n          }\n          if (computedData.length === 1) {\n            const [computedTensor, computedMask] = computedData[0];\n            if (kwargs.mask == null) {\n              kwargs['mask'] = computedMask;\n            }\n            outputTensors =\n                generic_utils.toList(layer.call(computedTensor, kwargs));\n            outputMasks = generic_utils.toList(\n                layer.computeMask(computedTensor, computedMask));\n            computedTensors = [computedTensor];\n            computedMasks = [computedMask];\n          } else {\n            computedTensors = computedData.map(x => x[0]);\n            computedMasks = computedData.map(x => x[1]);\n            if (kwargs.mask == null) {\n              kwargs['mask'] = computedMasks;\n            }\n            outputTensors =\n                generic_utils.toList(layer.call(computedTensors, kwargs));\n            outputMasks = generic_utils.toList(\n                layer.computeMask(computedTensors, computedMasks));\n          }\n\n          if (layer.activityRegularizer) {\n            throw new NotImplementedError(\n                'Model invocation with concrete Tensor value(s) in the ' +\n                'presence of activity regularizer(s) is not supported yet.');\n          }\n          // TODO(michaelterry): Add model updates and losses\n\n          // Update tensor map.\n          for (let i = 0; i < referenceOutputTensors.length; ++i) {\n            const x = referenceOutputTensors[i];\n            const y = outputTensors[i];\n            const mask = outputMasks[i];\n            tensorMap[x.id] = [y, mask];\n          }\n        }\n      }\n    }\n\n    const outputTensors: Tensor[] = [];\n    const outputMasks: Tensor[] = [];\n    const outputShapes: Shape[] = [];\n    for (const x of this.outputs) {\n      generic_utils.assert(\n          x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n      const [tensor, mask] = tensorMap[x.id];\n      outputShapes.push(tensor.shape);\n      outputTensors.push(tensor);\n      outputMasks.push(mask);\n    }\n\n    // TODO(michaelterry): Add support for caches.\n    return [outputTensors, outputMasks, outputShapes];\n  }\n\n  /**\n   * Builds a map of internal node keys to node ordering.\n   * Used in serializaion a node orderings may change as unused nodes are\n   * dropped. Porting Note:  This helper method was pulled out of getConfig to\n   * improve readability.\n   * @param layers An array of Layers in the model.\n   * @returns Map of Node Keys to index order within the layer.\n   */\n  private buildNodeConversionMap(layers: Layer[]): {[nodeKey: string]: number} {\n    const nodeConversionMap: {[nodeKey: string]: number} = {};\n    let keptNodes: number;\n    for (const layer of this.layers) {\n      keptNodes = layer instanceof Container ? 1 : 0;\n      for (let originalNodeIndex = 0;\n           originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        if (this.containerNodes.has(nodeKey)) {\n          // i.e. we mark it to be saved\n          nodeConversionMap[nodeKey] = keptNodes;\n          keptNodes += 1;\n        }\n      }\n    }\n    return nodeConversionMap;\n  }\n\n  /**\n   * Retrieves a layer based on either its name (unique) or index.\n   *\n   * Indices are based on order of horizontal graph traversal (bottom-up).\n   *\n   * If both `name` and `index` are specified, `index` takes precedence.\n   *\n   * @param name Name of layer.\n   * @param index Index of layer.\n   * @returns A Layer instance.\n   * @throws ValueError: In case of invalid layer name or index.\n   */\n  /**\n   * @doc {\n   *    heading: 'Layers',\n   *    subheading: 'Classes',\n   *    namespace: 'layers',\n   *    subclasses: ['Model']\n   * }\n   */\n  getLayer(name?: string, index?: number): Layer {\n    if (index != null) {\n      if (this.layers.length <= index) {\n        throw new ValueError(\n            `Was asked to retrieve layer at index ${index}, but model only ` +\n            `has ${this.layers.length} layer(s).`);\n      } else {\n        return this.layers[index];\n      }\n    } else {\n      if (name == null) {\n        throw new ValueError('Provide either a layer name or layer index');\n      }\n    }\n\n    for (const layer of this.layers) {\n      if (layer.name === name) {\n        return layer;\n      }\n    }\n    throw new ValueError(`No such layer: ${name}`);\n  }\n\n  /**\n   * Retrieves the Container's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Container.loss in PyKeras.\n    //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return tidy(() => {\n      const losses: Scalar[] = [];\n      for (const layer of this.layers) {\n        for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length;\n             ++nodeIndex) {\n          const nodeKey = Container.nodeKey(layer, nodeIndex);\n          if (this.containerNodes.has(nodeKey)) {\n            losses.push(...layer.calculateLosses());\n          }\n        }\n      }\n      // TODO(cais): Add any unconditional model-level losses?\n      return losses;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {name: this.name};\n\n    // Build a map from layer unique name (self._node_key)\n    // to the index of the nodes that are saved in the config.\n    // Only nodes in container_nodes are saved.\n    const nodeConversionMap: {[nodeKey: string]: number} =\n        this.buildNodeConversionMap(this.layers);\n\n    // Serialize and save the layers in layerConfigs\n    const layerConfigs = [];\n    for (const layer of this.layers) {\n      const layerClassName = layer.getClassName();\n      const layerConfig = layer.getConfig();\n      const filteredInboundNodes = [];\n      for (let originalNodeIndex = 0;\n           originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const node = layer.inboundNodes[originalNodeIndex];\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        let kwargs = {};\n        if (this.containerNodes.has(nodeKey)) {\n          // The node is relevant to the model:\n          // add to filteredInboundNodes.\n          if (node.callArgs) {\n            try {\n              JSON.stringify(node.callArgs);\n              kwargs = node.callArgs;\n            } catch (err) {\n              console.warn(\n                  `Layer ${layer.name} was passed ` +\n                  `non-serializable keyword arguments: ` +\n                  `${node.callArgs}. They will not be included ` +\n                  `in the serialized model (and thus will be ` +\n                  `missing at deserialization time).`);\n              kwargs = {};\n            }\n          }\n          if (node.inboundLayers.length > 0) {\n            const nodeData = [];\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n              const inboundLayer = node.inboundLayers[i];\n              const nodeIndex = node.nodeIndices[i];\n              const tensorIndex = node.tensorIndices[i];\n              const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);\n              let newNodeIndex = nodeConversionMap[nodeKey];\n              if (newNodeIndex == null) {\n                newNodeIndex = 0;\n              }\n              nodeData.push(\n                  [inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n            }\n            filteredInboundNodes.push(nodeData);\n          }\n        }\n      }\n      layerConfigs.push({\n        name: layer.name,\n        className: layerClassName,\n        config: layerConfig,\n        inboundNodes: filteredInboundNodes\n      });\n    }\n    config['layers'] = layerConfigs;\n    // Gather info about inputs and outputs\n    const modelInputs = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      const nodeIndex = this.inputLayersNodeIndices[i];\n\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === undefined) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.inputLayersTensorIndices[i];\n      modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config['inputLayers'] = modelInputs;\n\n    const modelOutputs = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === undefined) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config['outputLayers'] = modelOutputs;\n    return config;\n  }\n\n  /**\n   * Instantiates a Model from its config (output of `get_config()`).\n   * @param cls the class to create\n   * @param config Model config dictionary.\n   * @param customObjects An optional dictionary of custom objects.\n   * @param fastWeightInit Optional flag to use fast weight initialization\n   *   during deserialization. This is applicable to cases in which\n   *   the initialization will be immediately overwritten by loaded weight\n   *   values. Default: `false`.\n   * @returns A model instance.\n   * @throws ValueError: In case of improperly formatted config dict.\n   */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict,\n      fastWeightInit = false): T {\n    // Layer instances created during\n    // the graph reconstruction process\n    const createdLayers: {[layerName: string]: Layer} = {};\n\n    // Dictionary mapping layer instances to\n    // node data that specifies a layer call.\n    // It acts as a queue that maintains any unprocessed\n    // layer call until it becomes possible to process it\n    // (i.e. until the input tensors to the call all exist).\n    const unprocessedNodes:\n        {[layer: string]: serialization.ConfigDict[][]} = {};\n    function addUnprocessedNode(\n        layer: Layer, nodeData: serialization.ConfigDict[]) {\n      if (!(layer.name in unprocessedNodes)) {\n        unprocessedNodes[layer.name] = [nodeData];\n      } else {\n        unprocessedNodes[layer.name].push(nodeData);\n      }\n    }\n\n    function processNode(layer: Layer, nodeData: serialization.ConfigDict[]) {\n      const inputTensors: SymbolicTensor[] = [];\n      let kwargs;\n      for (const inputData of nodeData) {\n        const inboundLayerName = inputData[0] as string;\n        const inboundNodeIndex = inputData[1] as number;\n        const inboundTensorIndex = inputData[2] as number;\n        if (inputData.length === 3) {\n          kwargs = {};\n        } else if (inputData.length === 4) {\n          kwargs = inputData[3] as serialization.ConfigDict;\n        } else {\n          throw new ValueError(`Improperly formatted model config for layer ${\n              JSON.stringify(layer)}: ${JSON.stringify(inputData)}`);\n        }\n        if (!(inboundLayerName in createdLayers)) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundLayer = createdLayers[inboundLayerName];\n        if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n        inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n      }\n      // Call layer on its inputs, thus creating the node\n      // and building the layer if needed.\n      // Note: This has Eager vs Graph Implications.\n      if (inputTensors.length > 0) {\n        layer.apply(\n            generic_utils.singletonOrArray(inputTensors),\n            kwargs);  // was ** kwargs\n      }\n    }\n\n    /**\n     * Deserialize a layer, then call it on appropriate inputs.\n     * @param layerData: layer config dict.\n     * @throws ValueError: In case of improperly formatted `layer_data`\n     * dict.\n     */\n    function processLayer(layerData: serialization.ConfigDict|null) {\n      const layerName = layerData.name as string;\n      // Instantiate layer.\n      const layer = deserializeLayer(\n                        layerData,\n                        config.customObjects != null ?\n                            config.customObjects as serialization.ConfigDict :\n                            {}) as Layer;\n      layer.setFastWeightInitDuringBuild(fastWeightInit);\n      createdLayers[layerName] = layer;\n      // Gather layer inputs.\n      const inboundNodesData =\n          layerData.inboundNodes as serialization.ConfigDict[];\n      for (const nodeData of inboundNodesData) {\n        if (!(nodeData instanceof Array)) {\n          throw new ValueError(\n              `Corrupted configuration, expected array for nodeData: ${\n                  nodeData}`);\n        }\n        // We don't process nodes (i.e. make layer calls)\n        // on the fly because the inbound node may not yet exist,\n        // in case of layer shared at different topological depths\n        // (e.g.a model such as A(B(A(B(x)))))\n        addUnprocessedNode(layer, nodeData);\n      }\n    }\n\n    // First, we create all layers and enqueue nodes to be processed.\n    const name = config.name;\n    const layersFromConfig = config.layers as serialization.ConfigDict[];\n    for (const layerData of layersFromConfig) {\n      processLayer(layerData);\n    }\n\n    // Then we process nodes in order of layer depth.\n    // Nodes that cannot yet be processed(if the inbound node\n    // does not yet exist) are re - enqueued, and the process\n    // is repeated until all nodes are processed.\n    while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n      for (const layerData of layersFromConfig) {\n        const layer = createdLayers[layerData.name as string];\n        if (layer.name in unprocessedNodes) {\n          const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n          delete unprocessedNodes[layer.name];\n          for (const nodeData of currentUnprocessedNodesForLayer) {\n            processNode(layer, nodeData);\n          }\n        }\n      }\n    }\n\n    const inputTensors: SymbolicTensor[] = [];\n    const outputTensors: SymbolicTensor[] = [];\n    const inputLayersFromConfig =\n        config.inputLayers as serialization.ConfigDict[];\n    for (const layerData of inputLayersFromConfig) {\n      const layerName = layerData[0] as string;\n      const nodeIndex = layerData[1] as number;\n      const tensorIndex = layerData[2] as number;\n      generic_utils.assert(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      inputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    const outputLayersFromConfig =\n        config.outputLayers as serialization.ConfigDict[];\n    for (const layerData of outputLayersFromConfig) {\n      const layerName = layerData[0] as string;\n      const nodeIndex = layerData[1] as number;\n      const tensorIndex = layerData[2] as number;\n      generic_utils.assert(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      outputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    return new cls({inputs: inputTensors, outputs: outputTensors, name});\n  }\n\n  /**\n   * Determine whether the container is stateful.\n   *\n   * Porting Note: this is the equivalent of the stateful @property of\n   *   the Container class in PyKeras.\n   */\n  get stateful(): boolean {\n    // Porting Note: This check is to prevent inadvertent setting of the\n    //   _stateful property of the Container instance.\n    if (this._stateful) {\n      throw new ValueError(\n          'Container instance unexpectedly has _stateful = true. The ' +\n          'statefulness of a Container is determined by the Layers it ' +\n          'contains. Its _stateful property must remain the default false.');\n    }\n    for (const layer of this.layers) {\n      if (layer.stateful) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Reset the state of all stateful constituent layers (if any).\n   *\n   * Examples of stateful layers include RNN layers whose `stateful` property\n   * is set as `true`.\n   */\n  resetStates() {\n    tidy(() => {\n      this.layers.forEach(layer => {\n        // tslint:disable:no-any\n        if (layer.stateful) {\n          layer.resetStates();\n        }\n        // tslint:enable:no-any\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {TensorContainer} from '@tensorflow/tfjs-core/dist/tensor_types';\n\nimport {getScalar} from '../backend/state';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {singletonOrArray, toList} from '../utils/generic_utils';\n\nimport {Dataset, LazyIterator, TensorMap, TensorOrTensorMap} from './dataset_stub';\n\n/**\n * Interface for configuring model training based on a dataset object.\n */\nexport interface ModelFitDatasetArgs<T extends TensorContainer> {\n  /**\n   * (Optional) Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. It should\n   * typically be equal to the number of samples of your dataset divided by\n   * the batch size, so that `fitDataset`() call can utilize the entire dataset.\n   * If it is not provided, use `done` return value in `iterator.next()` as\n   * signal to finish an epoch.\n   */\n  batchesPerEpoch?: number;\n\n  /**\n   * The number of times to iterate over the training dataset.\n   *\n   * An integer.\n   */\n  epochs: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can consist of one or more of the following fields: `onTrainBegin`,\n   * `onTrainEnd`, `onEpochBegin`, `onEpochEnd`, `onBatchBegin`, `onBatchEnd`.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be any of the following:\n   *\n   *   - an Array of `tf.Tensor` objects: [xVal, yVal]\n   *   - an Array of `tf.Tensor` objects:\n   *       [xVal, yVal, valSampleWeights] (not implemented yet).\n   *   - a dataset object.\n   *\n   * If `validationData` is an Array of Tensor objects, the `tf.Tensor` will be\n   * sliced into batches during validation, using the parameter\n   * `validationBatchSize` (which defaults to 32). The entirety of the\n   * `tf.Tensor` objects will be used in the validation.\n   *\n   * If `validationData` is a dataset object, and the `validationBatches`\n   * parameter is specified, the validation will use `validationBatches` batches\n   * drawn from the dataset object. If `validationBatches` parameter is not\n   * specified, the validation will stop when the dataset is exhausted.\n   *\n   * The model will not be trained on this data.\n   */\n  validationData?:\n      [\n        tfc.Tensor|tfc.Tensor[]|TensorMap, tfc.Tensor|tfc.Tensor[]|TensorMap\n      ]|[tfc.Tensor | tfc.Tensor[] | TensorMap,\n         tfc.Tensor|tfc.Tensor[]|TensorMap, tfc.Tensor|tfc.Tensor[]|TensorMap]|\n      Dataset<T>;\n\n  /**\n   * Optional batch size for validation.\n   *\n   * Used only if `validationData` is an array of `tf.Tensor` objects, i.e., not\n   * a dataset object.\n   *\n   * If not specified, its value defaults to 32.\n   */\n  validationBatchSize?: number;\n\n  /**\n   * (Optional) Only relevant if `validationData` is specified and is a dataset\n   * object.\n   *\n   * Total number of batches of samples to draw from `validationData` for\n   * validation purpose before stopping at the end of every epoch. If not\n   * specified, `evaluateDataset` will use `iterator.next().done` as signal to\n   * stop validation.\n   */\n  validationBatches?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * - The value can be one of the following strings:\n   *   - 'auto': automatically determine how frequently the yielding happens\n   *     by measuring the duration of each batch of training (default).\n   *   - 'batch': yield every batch.\n   *   - 'epoch': yield every epoch.\n   *   - 'never': never yield. (But yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run).\n   */\n  initialEpoch?: number;\n}\n\n/**\n * Interface for configuring model evaluation based on a dataset object.\n */\nexport interface ModelEvaluateDatasetArgs {\n  /**\n   * Number of batches to draw from the dataset object before ending the\n   * evaluation.\n   */\n  batches?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n}\n\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n\n/**\n * Standardize the output of a dataset iterator for use by Model.fitDataset().\n *\n * @param model: A `tf.Model` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an array of two tensor containers. Each of the two elements of the array\n *   must be a single `tf.Tensor` or a map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s followed\n *   by the target `tf.Tensor`s.\n */\nfunction standardizeDataIteratorOutput(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, iteratorOut: TensorContainer): tfc.Tensor[] {\n  if (model.outputs.length > 1) {\n    throw new NotImplementedError(\n        `Support for training a model with multiple output tensors with ` +\n        `a dataset object is not implemented yet.`);\n  }\n\n  tfc.util.assert(\n      Array.isArray(iteratorOut) && iteratorOut.length === 2,\n      'Dataset iterator for fitDataset() is expected to generate ' +\n          'an Array of length 2: `[xs, ys]`, but instead generates ' +\n          iteratorOut);\n  // TODO(cais): If there are multiple inputs or outputs, make sure\n  //   they all have the same batch size.\n  iteratorOut = iteratorOut as [TensorOrTensorMap, TensorOrTensorMap];\n  const ys = iteratorOut[1] as tfc.Tensor;\n  let xs = iteratorOut[0] as TensorOrTensorMap;\n  if (xs instanceof tfc.Tensor) {\n    tfc.util.assert(\n        model.inputs.length === 1,\n        `Model has multiple ${model.inputs.length} inputs, hence it ` +\n            `expects the input dataset to generate a dictionary of tensors ` +\n            ` (with keys ${JSON.stringify(model.inputNames)}, ` +\n            `but received a single tensor.`);\n    tfc.util.assert(\n        xs.shape[0] === ys.shape[0],\n        `Mismatch in batch size between x and y tensors (${xs.shape[0]} vs. ` +\n            `${ys.shape[0]})`);\n    return [xs, ys];\n  } else {\n    let batchSize: number;\n    xs = xs as TensorMap;\n    const flattendXs: tfc.Tensor[] = [];\n    // Check that all the required keys are available and all the batch sizes\n    // are equal.\n    for (const inputName of model.inputNames) {\n      if (xs[inputName] == null) {\n        throw new ValueError(\n            `The feature data generated by the dataset lacks the required ` +\n            `input key '${inputName}'.`);\n      }\n      flattendXs.push(xs[inputName]);\n      if (batchSize == null) {\n        batchSize = xs[inputName].shape[0];\n      } else {\n        tfc.util.assert(\n            xs[inputName].shape[0] === batchSize,\n            `Mismatch in batch size between x and y tensors ` +\n                `(${xs[inputName].shape[0]} vs. ${ys.shape[0]})`);\n      }\n    }\n    return flattendXs.concat(ys);\n  }\n\n  // TODO(cais): Handle case in which ys is a TensorMap.\n}\n\nfunction standardizeTensorValidationData<T extends TensorContainer>(\n    data:\n        [\n          tfc.Tensor|tfc.Tensor[], tfc.Tensor|tfc.Tensor[]\n        ]|[tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n           tfc.Tensor | tfc.Tensor[]]):\n    {xs: tfc.Tensor|tfc.Tensor[], ys: tfc.Tensor|tfc.Tensor[]} {\n  if (data.length === 3) {\n    throw new NotImplementedError(\n        'Validation with sample weights is not implemented yet.');\n  }\n  return {xs: data[0], ys: data[1]};\n}\n\nexport async function fitDataset<T extends TensorContainer>(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>,\n    args: ModelFitDatasetArgs<T>): Promise<History> {\n  const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n  tfc.util.assert(\n      model.optimizer != null,\n      'You must compile a model before training/testing. Use ' +\n          'Model.compile(modelCompileConfig).');\n\n  tfc.util.assert(\n      args != null,\n      `For fitDataset(), the 2nd argument (config) is required, ` +\n          `but it is not provided in this call.`);\n  tfc.util.assert(\n      args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs),\n      `For fitDataset(), config.epochs is expected to be a positive ` +\n          `integer, but got ${args.epochs}`);\n  tfc.util.assert(\n      !hasBatchesPerEpoch ||\n          (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)),\n      `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n          `positive integer if specified, but got ${args.batchesPerEpoch}`);\n  tfc.util.assert(\n      // tslint:disable-next-line:no-any\n      (args as any)['validationSplit'] == null,\n      '`validationSplit` is not supported by `fitDataset()`. ' +\n          'Use validationData instead.');\n\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n\n  try {\n    const doValidation = args.validationData != null;\n    let valXs: tfc.Tensor|tfc.Tensor[];\n    let valYs: tfc.Tensor|tfc.Tensor[];\n    if (doValidation) {\n      if (isDatasetObject(args.validationData)) {\n        tfc.util.assert(\n            args.validationBatches == null ||\n                (args.validationBatches > 0 &&\n                 Number.isInteger(args.validationBatches)),\n            `For fitDataset() with dataset-based validation, ` +\n                `config.validationBatches is expected not to be provided, ` +\n                `or to be a positive integer, ` +\n                `but got ${args.validationBatches}`);\n      } else {\n        const validationData = standardizeTensorValidationData(\n            args.validationData as\n                    [tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[]] |\n            [\n              tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n              tfc.Tensor | tfc.Tensor[]\n            ]);\n        valXs = validationData.xs;\n        valYs = validationData.ys;\n      }\n    }\n\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let callbackMetrics: string[];\n    if (doValidation) {\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks);\n    const {callbackList, history} = configureCallbacks(\n        callbacks, args.yieldEvery, args.verbose, args.epochs, null, null,\n        args.batchesPerEpoch,\n        null,  // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n\n    let dataIterator = await dataset.iterator();\n    while (epoch < args.epochs) {\n      const epochLogs: UnresolvedLogs = {};\n      await callbackList.onEpochBegin(epoch);\n      let stepsDone = 0;\n      let batchIndex = 0;\n      if (!hasBatchesPerEpoch) {\n        dataIterator = await dataset.iterator();\n      }\n      while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n        const iteratorOut = await dataIterator.next();\n\n        // If `batchesPerEpoch` is specified, the dataset should not be\n        // exhausted until all epoches are done.\n        if (hasBatchesPerEpoch && iteratorOut.done) {\n          console.warn(\n              'You provided `batchesPerEpoch` as ' +\n              `${args.batchesPerEpoch}, ` +\n              'but your dataset iterator ran out of data after ' +\n              `${stepsDone} batches; ` +\n              'interrupting training. Make sure that your ' +\n              'dataset can generate at least `batchesPerEpoch * epochs` ' +\n              'batches (in this case, ' +\n              `${args.batchesPerEpoch * args.epochs} batches). ` +\n              'You may need to use the repeat() function when building ' +\n              'your dataset.');\n          break;\n        }\n\n\n        if (iteratorOut.value != null) {\n          const xsAndYs =\n              standardizeDataIteratorOutput(model, iteratorOut.value);\n          const batchLogs: UnresolvedLogs = {};\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = xsAndYs[0].shape[0];\n\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n          // Train on batch.\n          // TODO(cais): Take care of models with multiple outputs.\n          const outs = trainFunction(xsAndYs);\n          tfc.dispose(xsAndYs);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n          }\n\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n\n          batchIndex++;\n          stepsDone++;\n        }\n\n        if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                                 iteratorOut.done) {\n          // Epoch finished. Perform validation.\n          if (doValidation) {\n            let valOuts: tfc.Scalar[];\n            if (isDatasetObject(args.validationData)) {\n              valOuts = toList(await model.evaluateDataset(\n                  args.validationData, {batches: args.validationBatches}));\n            } else {\n              valOuts = toList(model.evaluate(valXs, valYs, {\n                batchSize: args.validationBatchSize == null ?\n                    DEFAULT_VALIDATION_BATCH_SIZE :\n                    args.validationBatchSize,\n                verbose: 0\n              }));\n            }\n            for (let i = 0; i < model.metricsNames.length; ++i) {\n              epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n            }\n          }\n          // Call `break` to exit one epoch lopp after validation is done. If\n          // config.batchesPerEpoch is specified, an epoch while loop will stop\n          // when `stepsDone >= config.batchesPerEpoch`. When\n          // config.batchesPerEpoch is not provided, the following `break` is\n          // required to exit the while lopp after dataset is exhausted.\n          break;\n        }\n\n        if (model.stopTraining_) {\n          break;\n        }\n      }\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      epoch++;\n      if (model.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n  } finally {\n    model.isTraining = false;\n  }\n}\n\n// Check if provided object is a Dataset object by checking it's .iterator\n// element.\nfunction isDatasetObject<T extends TensorContainer>(\n    dataset:\n        [\n          tfc.Tensor|tfc.Tensor[]|TensorMap, tfc.Tensor|tfc.Tensor[]|TensorMap\n        ]|[tfc.Tensor | tfc.Tensor[] | TensorMap,\n           tfc.Tensor | tfc.Tensor[] | TensorMap,\n           tfc.Tensor | tfc.Tensor[] | TensorMap]|Dataset<T>): boolean {\n  return (typeof (dataset as Dataset<T>).iterator === 'function');\n}\n\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject<T extends TensorContainer>(\n    iterator: Dataset<T>|LazyIterator<T>): boolean {\n  return (typeof (iterator as LazyIterator<T>).next === 'function');\n}\n\nexport async function evaluateDataset<T extends TensorContainer>(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>|LazyIterator<T>,\n    args: ModelEvaluateDatasetArgs): Promise<tfc.Scalar|tfc.Scalar[]> {\n  const hasBatches = args.batches != null;\n  const f = model.testFunction;\n  const outs: tfc.Scalar[] = [];\n  if (args.verbose > 0) {\n    throw new NotImplementedError('Verbose mode is not implemented yet.');\n  }\n\n  tfc.util.assert(\n      !hasBatches || (args.batches > 0 && Number.isInteger(args.batches)),\n      'Test loop expects `batches` to be a positive integer, but ' +\n          `received ${JSON.stringify(args.batches)}`);\n  const dataIterator = isLazyIteratorObject(dataset) ?\n      dataset as LazyIterator<T>:\n      await (dataset as Dataset<T>).iterator();\n  // Keeps track of number of examples used in this evaluation.\n  let numExamples = 0;\n  let batch = 0;\n  while (hasBatches ? batch < args.batches : true) {\n    const iteratorOut = await dataIterator.next();\n    if (iteratorOut.value) {\n      // TODO(cais): Once real dataset is available, use\n      //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n      const xsAndYs = standardizeDataIteratorOutput(model, iteratorOut.value);\n      const batchOuts = tfc.tidy(() => f(xsAndYs));\n      tfc.dispose(xsAndYs);\n\n      if (batch === 0) {\n        for (let i = 0; i < batchOuts.length; ++i) {\n          outs.push(getScalar(0));\n        }\n      }\n      const batchSize = xsAndYs[0].shape[0];\n      for (let i = 0; i < batchOuts.length; ++i) {\n        const batchOut = batchOuts[i];\n        const oldScalar = outs[i];\n        outs[i] = tfc.tidy(\n            () => tfc.add(outs[i], tfc.mul(getScalar(batchSize), batchOut)) as\n                tfc.Scalar);\n        if (batch > 0) {\n          tfc.dispose(oldScalar);\n        }\n      }\n      tfc.dispose(batchOuts);\n      numExamples += batchSize;\n\n      ++batch;\n    }\n    if (iteratorOut.done) {\n      if (hasBatches) {\n        console.warn(\n            'Your dataset iterator ran out of data during evaluateDataset(). ' +\n            'Interrupting evalution. Make sure that your ' +\n            'dataset can generate at least `batches` ' +\n            `batches (in this case, ${args.batches} batches). ` +\n            'You may need to use the repeat() function when building ' +\n            'your dataset.');\n      }\n      break;\n    }\n  }\n  for (let i = 0; i < outs.length; ++i) {\n    const oldScalar = outs[i];\n    outs[i] =\n        tfc.tidy(() => tfc.div(outs[i], getScalar(numExamples)) as tfc.Scalar);\n    tfc.dispose(oldScalar);\n  }\n\n  return singletonOrArray(outs);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Scalar, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport {expandDims, gather, sliceAlongFirstAxis} from '../backend/tfjs_backend';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {range} from '../utils/math_utils';\n\n/**\n * Interface configuration model training based on data as `tf.Tensor`s.\n */\nexport interface ModelFitArgs {\n  /**\n   * Number of samples per gradient update. If unspecified, it\n   * will default to 32.\n   */\n  batchSize?: number;\n\n  /** The number of times to iterate over the training data arrays. */\n  epochs?: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can consist of one or more of the following fields: `onTrainBegin`,\n   * `onTrainEnd`, `onEpochBegin`, `onEpochEnd`, `onBatchBegin`, `onBatchEnd`.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Float between 0 and 1: fraction of the training data\n   * to be used as validation data. The model will set apart this fraction of\n   * the training data, will not train on it, and will evaluate the loss and\n   * any model metrics on this data at the end of each epoch.\n   * The validation data is selected from the last samples in the `x` and `y`\n   * data provided, before shuffling.\n   */\n  validationSplit?: number;\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\n   * valSampleWeights]. The model will not be trained on this data.\n   * `validationData` will override `validationSplit`.\n   */\n  validationData?: [\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]];\n\n  /**\n   * Whether to shuffle the training data before each epoch. Has\n   * no effect when `stepsPerEpoch` is not `null`.\n   */\n  shuffle?: boolean;\n\n  /**\n   * Optional dictionary mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   */\n  classWeight?: {[classIndex: string]: number};\n\n  /**\n   * Optional array of the same length as x, containing\n   * weights to apply to the model's loss for each sample. In the case of\n   * temporal data, you can pass a 2D array with shape (samples,\n   * sequenceLength), to apply a different weight to every timestep of every\n   * sample. In this case you should make sure to specify\n   * sampleWeightMode=\"temporal\" in compile().\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run).\n   */\n  initialEpoch?: number;\n\n  /**\n   * Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. When training\n   * with Input Tensors such as TensorFlow data tensors, the default `null` is\n   * equal to the number of unique samples in your dataset divided by the\n   * batch size, or 1 if that cannot be determined.\n   */\n  stepsPerEpoch?: number;\n\n  /**\n   * Only relevant if `stepsPerEpoch` is specified. Total number of steps\n   * (batches of samples) to validate before stopping.\n   */\n  validationSteps?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * - The value can be one of the following strings:\n   *   - 'auto': automatically determine how frequently the yielding happens\n   *     by measuring the duration of each batch of training (default).\n   *   - 'batch': yield every batch.\n   *   - 'epoch': yield every epoch.\n   *   - 'never': never yield. (But yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n}\n\nexport function checkBatchSize(batchSize: number) {\n  tfc.util.assert(\n      batchSize > 0 && Number.isInteger(batchSize),\n      `batchSize is required to be a positive integer, but got ${batchSize}`);\n}\n\n\n/**\n * Slice an Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(\n    arrays: Tensor|Tensor[], start: number, stop: number): Tensor|Tensor[] {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {  // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n\n/**\n * Slice an Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(\n    arrays: Tensor|Tensor[], indices: Tensor1D): Tensor|Tensor[] {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(\n          array => (sliceArraysByIndices(array, indices) as Tensor));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(\n          arrays, indices.dtype === 'int32' ? indices : indices.toInt());\n    }\n  });\n}\n\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(\n    size: number, batchSize: number): Array<[number, number]> {\n  const output: Array<[number, number]> = [];\n  let batchStart = 0;\n  let batchEnd: number = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\n\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown.\n * @param epochs Number of times to iterate over the data.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run).\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, f: (data: Tensor[]) => Scalar[], ins: Tensor[],\n    outLabels?: string[], batchSize?: number, epochs?: number, verbose?: number,\n    callbacks?: BaseCallback[], valF?: (data: Tensor[]) => Scalar[],\n    valIns?: Tensor[], shuffle?: boolean|string, callbackMetrics?: string[],\n    initialEpoch?: number, stepsPerEpoch?: number, validationSteps?: number,\n    yieldEvery?: YieldEveryOptions): Promise<History> {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n  if (epochs == null) {\n    epochs = 1;\n  }\n  if (shuffle == null) {\n    shuffle = true;\n  }\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  }\n\n  // TODO(cais): Change const to let below when implementing validation.\n  let doValidation = false;\n  if (valF != null && valIns != null) {\n    doValidation = true;\n    // TODO(cais): verbose message.\n  }\n  if (validationSteps != null) {\n    doValidation = true;\n    if (stepsPerEpoch == null) {\n      throw new ValueError(\n          'Can only use `validationSteps` when doing step-wise training, ' +\n          'i.e., `stepsPerEpoch` must be set.');\n    }\n  }\n\n  const numTrainSamples =\n      model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n  let indexArray: number[];\n  if (numTrainSamples != null) {\n    indexArray = range(0, numTrainSamples);\n  }\n\n  if (verbose == null) {\n    verbose = 1;\n  }\n\n  const {callbackList, history} = configureCallbacks(\n      callbacks, yieldEvery, verbose, epochs, initialEpoch, numTrainSamples,\n      stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model);\n  model.history = history;\n  await callbackList.onTrainBegin();\n  model.stopTraining_ = false;\n  // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n  // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs: UnresolvedLogs = {};\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError(\n          'stepsPerEpoch mode is not implemented yet.');\n    } else {\n      if (shuffle === 'batch') {\n        throw new NotImplementedError('batch shuffling is not implemneted yet');\n      } else if (shuffle) {\n        util.shuffle(indexArray);\n      }\n      // Convert the potentially shuffled indices to Tensor1D, to avoid the\n      // cost of repeated creation of Array1Ds later on.\n      const epochIndexArray1D = tensor1d(indexArray);\n\n      const batches = makeBatches(numTrainSamples, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs: UnresolvedLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n        tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(\n                               epochIndexArray1D, batchStart,\n                               batchEnd - batchStart) as Tensor1D;\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = batchEnd - batchStart;\n\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Tensor[];\n          const outs = f(insBatch);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n            // TODO(cais): Use scope() to avoid ownership.\n          }\n\n          if (batchIndex === batches.length - 1) {  // Last batch.\n            if (doValidation) {\n              const valOuts = model.testLoop(valF, valIns, batchSize);\n              // Porting Notes: In tfjs-layers, valOuts is always an Array.\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                tfc.keep(out);\n                // TODO(cais): Use scope() to avoid ownership.\n                epochLogs['val_' + label] = out;\n              }\n            }\n          }\n        });\n\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n\n        if (model.stopTraining_) {\n          break;\n        }\n        // TODO(cais): return outs as list of Tensor.\n      }\n\n      epochIndexArray1D.dispose();\n    }\n    // TODO(cais): Run validation at the end of the epoch.\n    await callbackList.onEpochEnd(epoch, epochLogs);\n    if (model.stopTraining_) {\n      break;\n    }\n  }\n  await callbackList.onTrainEnd();\n\n  await model.history.syncData();\n  return model.history;\n}\n\nexport async function fitTensors(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    args: ModelFitArgs = {}): Promise<History> {\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n  let inputs: Tensor[];\n  let targets: Tensor[];\n  let inputValX: Tensor|Tensor[];\n  let inputValY: Tensor|Tensor[];\n  let valX: Tensor|Tensor[];\n  let valY: Tensor|Tensor[];\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // Validate user data.\n    // TODO(cais): Add sampleWeight and  classWeight.\n    const standardizedOuts =\n        model.standardizeUserData(\n            x, y, false, batchSize) as [Tensor[], Tensor[]];\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    // TODO(cais): Make use of sampleWeights in standardizedOuts[2] when\n    //   available.\n\n    // Prepare validation data.\n    let doValidation = false;\n    let valIns: Tensor[];\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n      if (args.validationData.length === 2) {\n        // config.validationData consists of valX and valY.\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError(\n            'validationData including sample weights is not supported yet.');\n      } else {\n        throw new ValueError(\n            `When passing validation data, it must contain 2 (valX, valY) ` +\n            `or 3 (valX, valY, valSampleWeight) items; ` +\n            `${args.validationData} is invalid.`);\n      }\n\n      const valStandardized = model.standardizeUserData(\n                                  inputValX, inputValY, true,\n                                  batchSize) as [Tensor[], Tensor[], Tensor[]];\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      // TODO(cais): Use validation sample weights in valStandardized[2]\n      // once\n      //   it becomes available.\n      valIns = valX.concat(valY);\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (\n        args.validationSplit != null && args.validationSplit > 0 &&\n        args.validationSplit < 1) {\n      doValidation = true;\n      // Porting Note: In tfjs-layers, inputs[0] is always an Tensor.\n      const splitAt =\n          Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize) as Tensor[];\n      inputs = sliceArrays(inputs, 0, splitAt) as Tensor[];\n      valY = sliceArrays(targets, splitAt, originalBatchSize) as Tensor[];\n      targets = sliceArrays(targets, 0, splitAt) as Tensor[];\n      // TODO(cais): Once sampleWeights becomes available, slice it to get\n      //   valSampleWeights.\n      valIns = valX.concat(valY);\n\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSteps != null) {\n      doValidation = true;\n      // TODO(cais): Add useLearningPhase.\n    }\n\n    const ins = inputs.concat(targets);\n\n    model.checkTrainableWeightsConsistency();\n\n    // TODO(cais): Handle use_learning_phase and learning_phase?\n\n    // Porting Note: Here we see a key deviation of tfjs-layers from\n    // Keras.\n    //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n    //  we do not construct symbolic computation graphs to embody the\n    //  training process. Instead, we define a function that performs the\n    //  training action. In PyKeras, the data (inputs and targets) are fed\n    //  through graph placeholders. In tfjs-layers, the data are fed as\n    //  function arguments. Since the function are defined below in the\n    //  scope, we don't have equivalents of PyKeras's\n    //  `_make_train_funciton`.\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let valFunction: (data: Tensor[]) => Scalar[];\n    let callbackMetrics: string[];\n    if (doValidation) {\n      model.makeTestFunction();\n      valFunction = model.testFunction;\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks);\n    const out = await fitLoop(\n        model, trainFunction, ins, outLabels, batchSize, args.epochs,\n        args.verbose, callbacks, valFunction, valIns, args.shuffle,\n        callbackMetrics, args.initialEpoch, null, null, args.yieldEvery);\n    return out;\n  } finally {\n    model.isTraining = false;\n    // Memory clean up.\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(valX as Tensor[], inputValX);\n    disposeNewTensors(valY as Tensor[], inputValY);\n  }\n  // TODO(cais): Add value to outLabels.\n}\n\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors: Tensor|Tensor[]): Tensor[] {\n  const outs: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n\n  // Make Tensors at least 2D.\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error(\n          'Expected tensor to be at least 1D, but received a 0D tensor ' +\n          '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n  return outs;\n}\n\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as Model.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(\n    tensors: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    refTensors: Tensor|Tensor[]|{[inputName: string]: Tensor}): void {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds: number[] = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n\n  const tensorsToDispose: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: engine/training.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {io, ModelPredictConfig as ModelPredictArgs, Optimizer, Scalar, serialization, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\nimport {TensorContainer} from '@tensorflow/tfjs-core/dist/tensor_types';\n\nimport {getScalar,} from '../backend/state';\nimport * as K from '../backend/tfjs_backend';\nimport {History, ModelLoggingVerbosity} from '../base_callbacks';\nimport {nameScope} from '../common';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport {LossOrMetricFn, NamedTensorMap, Shape} from '../types';\nimport {count, pyListRepeat, singletonOrArray, unique} from '../utils/generic_utils';\nimport {printSummary} from '../utils/layer_utils';\nimport {range} from '../utils/math_utils';\nimport {LayerVariable} from '../variables';\n\nimport {Container, ContainerArgs} from './container';\nimport {Dataset} from './dataset_stub';\nimport {execute, FeedDict} from './executor';\nimport {SymbolicTensor} from './topology';\nimport {evaluateDataset, fitDataset, ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './training_dataset';\nimport {checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, ModelFitArgs, sliceArrays, sliceArraysByIndices} from './training_tensors';\n\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x: Tensor|Tensor[]|{[inputName: string]: Tensor}|\n                             {[inputName: string]: Tensor[]}): boolean {\n  return x instanceof Tensor;\n}\n\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x: Tensor|Tensor[]|\n                            {[inputName: string]: Tensor}): boolean {\n  return Array.isArray(x);\n}\n\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x: Tensor|Tensor[]|\n                           {[inputName: string]: Tensor}): boolean {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(\n    data: Tensor|Tensor[]|{[inputName: string]: Tensor}, names: string[],\n    shapes?: Shape[], checkBatchAxis = true, exceptionPrefix = ''): Tensor[] {\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && (data as Tensor[]).length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(\n            `Error when checking model ${exceptionPrefix} expected no data, ` +\n            `but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(name => null);\n  }\n\n  let arrays: Tensor[];\n  if (isDataDict(data)) {\n    data = data as {[inputName: string]: Tensor};\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(\n            `No data provided for \"${name}\". Need data for each key in: ` +\n            `${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data as Tensor[];\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `model expected. Expected to see ${names.length} Tensor(s), but ` +\n          `instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data as Tensor;\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n          `but only received one Tensor. Found: Tensor with shape ${\n              data.shape}`);\n    }\n    arrays = [data];\n  }\n\n  arrays = ensureTensorsRank2OrHigher(arrays);\n\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s). but got array with ` +\n            `shape ${array.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(\n              `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n              `to have shape [${shapes[i]}], but got array with shape ` +\n              `[${array.shape}].`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\n\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(\n    inputs: Tensor[], targets: Tensor[], weights?: Tensor[]) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(\n        `All input Tensors (x) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(\n        `All target Tensors (y) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(\n        `Input Tensors should have the same number of samples as target ` +\n        `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n        `sample(s).`);\n  }\n}\n\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(\n    targets: Tensor[], lossFns: LossOrMetricFn[], outputShapes: Shape[]) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [\n    losses.meanSquaredError, losses.binaryCrossentropy,\n    losses.categoricalCrossentropy\n  ];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(\n            `You are passing a target array of shape ${y.shape} while using ` +\n            `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n            `expects targets to be binary matrices (1s and 0s) of shape ` +\n            `[samples, classes].`);\n        // TODO(cais): Example code in error message.\n      }\n    }\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(\n              `A target Tensor with shape ${y.shape} was passed for an ` +\n              `output of shape ${shape}, while using a loss function that ` +\n              `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(\n    data: Tensor|Tensor[], names: string[], shapes?: Shape[],\n    checkBatchAxis = true, exceptionPrefix = '') {\n  let arrays: Tensor[];\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `the model expected. Expected to see ${names.length} Tensor(s),` +\n          ` but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n          `but only received one Tensor. Found: array with shape ` +\n          `${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s), but got array with ` +\n            `shape ${JSON.stringify(array.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(\n                `Error when checking ${exceptionPrefix}: expected ` +\n                `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Maps metric functions to model outputs.\n * @param metrics An `Array` or dict (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: if `null` or `undefined` value is provided.\n */\nfunction collectMetrics(\n    metrics: string[]|{[outputName: string]: string | string[]},\n    outputNames: string[]): string[][] {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n  if (Array.isArray(metrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(name => metrics);\n  } else if (metrics != null) {\n    // In this case, metrics is a dict.\n    const nestedMetrics: string[][] = [];\n    for (const name of outputNames) {\n      let outputMetrics: string|string[] =\n          metrics.hasOwnProperty(name) ? metrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics as string[]);\n    }\n    return nestedMetrics;\n  } else {\n    throw new TypeError(\n        'Type of metrics argument not understood. Expected an Array or ' +\n        'Object, found: ' + metrics);\n  }\n}\n\nexport interface ModelEvaluateArgs {\n  /**\n   * Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * Tensor of weights to weight the contribution of different samples to the\n   * loss and metrics.\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * integer: total number of steps (batches of samples)\n   * before declaring the evaluation round finished. Ignored with the default\n   * value of `undefined`.\n   */\n  steps?: number;\n}\n\n/**\n * Configuration for calls to `Model.compile()`.\n */\nexport interface ModelCompileArgs {\n  /**\n   * An instance of `tf.train.Optimizer` or a string name for an Optimizer.\n   */\n  optimizer: string|Optimizer;\n\n  /**\n   * Object function(s) or name(s) of object function(s).\n   * If the model has multiple outputs, you can use a different loss\n   * on each output by passing a dictionary or an Array of losses.\n   * The loss value that will be minimized by the model will then be the sum\n   * of all individual losses.\n   */\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n\n  /**\n   * List of metrics to be evaluated by the model during training and testing.\n   * Typically you will use `metrics=['accuracy']`.\n   * To specify different metrics for different outputs of a multi-output\n   * model, you could also pass a dictionary.\n   */\n  metrics?: string[]|{[outputName: string]: string};\n\n  // TODO(cais): Add lossWeights, sampleWeightMode, weightedMetrics, and\n  //   targetTensors.\n}\n\n/**\n * A `tf.Model` is a directed, acyclic graph of `tf.Layer`s plus methods for\n * training, evaluation, prediction and saving.\n *\n * `tf.Model` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.Model`, use `tf.model`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Model extends Container implements tfc.InferenceModel {\n  static className = 'Model';\n  optimizer: Optimizer;\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n  lossFunctions: LossOrMetricFn[];\n\n  // TODO(cais): These private variables should probably not have the string\n  //   'feed' in their names, because we are not dealing with a symbolic\n  //   backend.\n  private feedOutputShapes: Shape[];\n  private feedLossFns: LossOrMetricFn[];\n  private collectedTrainableWeights: LayerVariable[];\n  private testFunction: (data: Tensor[]) => Scalar[];\n  history: History;\n\n  // A public property that can be set by Callbacks to order early stopping\n  // during `fit()` calls.\n  protected stopTraining_: boolean;\n  protected isTraining: boolean;\n\n  metrics: string[]|{[outputName: string]: string};\n  metricsNames: string[];\n  // Porting Note: `metrics_tensors` in PyKeras is a symbolic tensor. But given\n  //   the imperative nature of tfjs-core, `metricsTensors` is a\n  //   TypeScript function here.\n  //   Also note that due to the imperative nature of tfjs-core, `metricsTensor`\n  //   here needs an output index to keep track of which output of the Model\n  //   a metric belongs to. This is unlike `metrics_tensors` in PyKeras,\n  //   which is a `list` of symbolic tensors, each of which has implicit\n  //   \"knowledge\" of the outputs it depends on.\n  metricsTensors: Array<[LossOrMetricFn, number]>;\n\n  constructor(args: ContainerArgs) {\n    super(args);\n    this.isTraining = false;\n  }\n\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      throw new ValueError(\n          `This model has never been called, thus its weights have not been ` +\n          `created yet. So no summary can be displayed. Build the model ` +\n          `first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n\n  /**\n   * Configures and prepares the model for training and evaluation.  Compiling\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n   * or `evaluate` on an un-compiled model will throw an error.\n   *\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n   * metrics to be used for fitting and evaluating this model.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [0]}\n   */\n  compile(args: ModelCompileArgs): void {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n\n    if (typeof args.optimizer === 'string') {\n      this.optimizer = optimizers.getOptimizer(args.optimizer);\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(\n            `User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer = args.optimizer;\n    }\n\n    // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n\n    // Prepare loss functions.\n    let lossFunctions: LossOrMetricFn[] = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n        typeof args.loss !== 'function') {\n      args.loss = args.loss as {[outputName: string]: string};\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(\n              `Unknown entry in loss dictionary: \"${name}\". ` +\n              `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(\n              `Output \"${name}\" is missing from loss dictionary. We assume ` +\n              `this was done on purpose, and we will not be expecting data ` +\n              `to be passed to ${name} during training`);\n        }\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(\n            `When passing an Array as loss, it should have one entry per ` +\n            `model output. The model has ${this.outputs.length} output(s), ` +\n            `but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss as Array<string|LossOrMetricFn>;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.map(layer => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n\n    this.lossFunctions = lossFunctions;\n\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n\n    // TODO(cais): Add logic for weighted losses.\n    // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n    const skipTargetIndices: number[] = [];\n\n    // Prepare metrics.\n    this.metrics = args.metrics;\n    // TODO(cais): Add weightedMetrics.\n    this.metricsNames = ['loss'];\n    this.metricsTensors = [];\n\n    // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      }\n\n      // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n    });\n\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    // TODO(cais): Add nestedWeightedMetrics.\n\n    /**\n     * Helper function used in loop below.\n     */\n    const appendMetric =\n        (outputIndex: number, metricName: string,\n         metricTensor: LossOrMetricFn) => {\n          if (this.outputNames.length > 1) {\n            metricName = this.outputNames[outputIndex] + '_' + metricName;\n          }\n          this.metricsNames.push(metricName);\n          this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        // TODO(cais): Add weights and outputWeightedMetrics.\n\n        // TODO(cais): Add optional arg `weights` to the following function.\n        const handleMetrics = (metrics: string[]) => {\n          const metricNamePrefix = '';\n          let metricName: string;\n          let accFn: LossOrMetricFn;\n          let weightedMetricFn: LossOrMetricFn;\n          //  TODO(cais): Use 'weights_' for weighted metrics.\n\n          for (const metric of metrics) {\n            if (['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                -1) {\n              const outputShape = this.internalOutputShapes[i];\n\n              if (outputShape[outputShape.length - 1] === 1 ||\n                  this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (\n                  this.lossFunctions[i] ===\n                  losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n              let suffix: string;\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              }\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric);\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = metricFn;\n              metricName = metricNamePrefix + metric;\n            }\n\n            // TODO(cais): Add weighting and masking to metricResult.\n            let metricResult: LossOrMetricFn;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n\n        handleMetrics(outputMetrics);\n        // TODO(cais): Call handleMetrics with weights.\n      }\n    });\n\n    // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n\n  /**\n   * Check trainable weights count consistency.\n   *\n   * This will raise a warning if `this.trainableWeights` and\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n   * numbers of parameters).\n   * Inconsistency will typically arise when one modifies `model.trainable`\n   * without calling `model.compile()` again.\n   */\n  protected checkTrainableWeightsConsistency(): void {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !==\n        this.collectedTrainableWeights.length) {\n      console.warn(\n          'Discrepancy between trainableweights and collected trainable ' +\n          'weights. Did you set `model.trainable` without calling ' +\n          '`model.compile()` afterwards?');\n    }\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n    const standardizedOuts = this.standardizeUserData(x, y, true, batchSize);\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts =\n          this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  async evaluateDataset<T extends TensorContainer>(\n      dataset: Dataset<T>,\n      args: ModelEvaluateDatasetArgs): Promise<Scalar|Scalar[]> {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n\n  /**\n   * Get number of samples provided for training, evaluation or prediction.\n   *\n   * @param ins Input `tf.Tensor`.\n   * @param batchSize Integer batch size, optional.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring loop finished. Optional.\n   * @param stepsName The public API's parameter name for `steps`.\n   * @returns Number of samples provided.\n   */\n  private checkNumSamples(\n      ins: Tensor|Tensor[], batchSize?: number, steps?: number,\n      stepsName = 'steps'): number {\n    let numSamples: number;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(\n            `If ${stepsName} is set, batchSize must be null or undefined.` +\n            `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(\n          `Either the input data should have a defined shape, or ` +\n          `${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n\n  /**\n   * Execute internal tensors of the model with input data feed.\n   * @param inputs Input data feed. Must match the inputs of the model.\n   * @param outputs Names of the output tensors to be fetched. Must match\n   *   names of the SymbolicTensors that belong to the graph.\n   * @returns Fetched values for `outputs`.\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs: string|string[]):\n      Tensor|Tensor[] {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError(\n          '`outputs` is an empty Array, which is not allowed.');\n    }\n\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames = (outputsIsArray ? outputs as string[] :\n                                          [outputs as string]) as string[];\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n\n    // Format the input into a FeedDict.\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs as Tensor];\n    }\n    if (Array.isArray(inputs)) {\n      if ((inputs as Tensor[]).length !== this.inputs.length) {\n        throw new ValueError(\n            `The number of inputs provided (${(inputs as Tensor[]).length}) ` +\n            `does not match the number of inputs of this model ` +\n            `(${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], (inputs as Tensor[])[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = (inputs as NamedTensorMap)[input.name];\n        if (tensorValue == null) {\n          throw new ValueError(\n              `No value is provided for the model's input ${input.name}`);\n        }\n        feedDict.add(input, tensorValue);\n      }\n    }\n\n    // Run execution.\n    const executeOutputs = execute(outputSymbolicTensors, feedDict) as Tensor[];\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n\n  /**\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n   */\n  private retrieveSymbolicTensors(symbolicTensorNames: string[]):\n      SymbolicTensor[] {\n    const outputSymbolicTensors: SymbolicTensor[] =\n        pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs: SymbolicTensor[] = Array.isArray(layer.output) ?\n          layer.output as SymbolicTensor[] :\n          [layer.output as SymbolicTensor];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n\n    if (outputsRemaining > 0) {\n      const remainingNames: string[] = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(\n          `Cannot find SymbolicTensors for output name(s): ` +\n          `${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n\n  /**\n   * Helper method to loop over some data in batches.\n   *\n   * Porting Note: Not using the functional approach in the Python equivalent\n   *   due to the imperative backend.\n   * Porting Note: Does not support step mode currently.\n   *\n   * @param ins: input data\n   * @param batchSize: integer batch size.\n   * @param verbose: verbosity model\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n   *   `tf.Tensor` (if multipe outputs).\n   */\n  private predictLoop(ins: Tensor|Tensor[], batchSize = 32, verbose = false):\n      Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError(\n            'Verbose predictLoop() is not implemented yet.');\n      }\n\n      // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n\n      const batches = makeBatches(numSamples, batchSize);\n      const outs: Tensor[] = [];\n      // TODO(cais): Can the scope() be pushed down inside the for loop?\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n\n          // Construct the feeds for execute();\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({key: this.inputs[i], value: insBatch[i]});\n            }\n          } else {\n            feeds.push({key: this.inputs[0], value: insBatch});\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict) as Tensor[];\n        });\n        if (batchIndex === 0) {\n          // Pre-allocate.\n          for (const batchOut of batchOuts) {\n            outs.push(batchOut);\n          }\n        } else {\n          for (let i = 0; i < batchOuts.length; ++i) {\n            outs[i] = K.concatAlongFirstAxis(outs[i], batchOuts[i]);\n          }\n        }\n      }\n      return singletonOrArray(outs);\n    });\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n   * ```\n   *\n   * @param x The input data, as an Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param args A `ModelPredictArgs` object containing optional fields.\n   *\n   * @return Prediction results as a `tf.Tensor`(s).\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [1]}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(\n        xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predictOnBatch(tf.ones([8, 10])).print();\n   * ```\n   * @param x: Input samples, as an Tensor\n   * @return Tensor(s) of predictions\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predictOnBatch(x: Tensor): Tensor|Tensor[] {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n    return this.predictLoop(x, x.shape[0]);\n  }\n\n  protected standardizeUserData(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor}, checkBatchAxis = true,\n      batchSize?: number): [Tensor[], Tensor[], Tensor[]] {\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer == null) {\n      throw new RuntimeError(\n          'You must compile a model before training/testing. Use ' +\n          'Model.compile(modelCompileArgs).');\n    }\n    const outputShapes: Shape[] = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(\n            outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(\n            x, this.feedInputNames, this.feedInputShapes, false, 'input') as\n        Tensor[];\n    y = standardizeInputData(\n            y, this.feedOutputNames, outputShapes, false, 'target') as Tensor[];\n    // TODO(cais): Standardize sampleWeights & classWeights.\n    checkArrayLengths(x, y, null);\n    // TODO(cais): Check sampleWeights as well.\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(\n            `In a stateful network, you should only pass inputs with a ` +\n            `number of samples that is divisible by the batch size ` +\n            `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    // TODO(cais): Deal with the case of model.stateful == true.\n    return [x, y, null];\n  }\n\n  /**\n   * Loop over some test data in batches.\n   * @param f A Function returning a list of tensors.\n   * @param ins Array of tensors to be fed to `f`.\n   * @param batchSize Integer batch size or `null` / `undefined`.\n   * @param verbose verbosity mode.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring test finished. Ignored with the default value of `null` /\n   * `undefined`.\n   * @returns Array of Scalars.\n   */\n  private testLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], batchSize?: number,\n      verbose = 0, steps?: number): Scalar[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs: Scalar[] = [];\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      }\n      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n      if (steps != null) {\n        throw new NotImplementedError(\n            'steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds =\n              K.sliceAlongFirstAxis(\n                  indexArray, batchStart, batchEnd - batchStart) as Tensor1D;\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Scalar[];\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(getScalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] =\n                tfc.add(\n                    outs[i],\n                    tfc.mul(getScalar(batchEnd - batchStart), batchOut)) as\n                Scalar;\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], getScalar(numSamples)) as Scalar;\n        }\n      }\n      return outs;\n    });\n  }\n\n  protected getDedupedMetricsNames(): string[] {\n    const outLabels = this.metricsNames;\n    // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n\n  /**\n   * Creates a function that performs the following actions:\n   *\n   * 1. computes the losses\n   * 2. sums them to get the total loss\n   * 3. call the optimizer computes the gradients of the Model's\n   *    trainable weights w.r.t. the total loss and update the variables\n   * 4. calculates the metrics\n   * 5. returns the values of the losses and metrics.\n   */\n  protected makeTrainFunction(): (data: Tensor[]) => Scalar[] {\n    return (data: Tensor[]) => {\n      const losses: Tensor[] = [];\n      const lossValues: Scalar[] = [];\n\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(\n          this.inputs.length, this.inputs.length + this.outputs.length);\n\n      const metricsValues: Scalar[] = [];\n\n      // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs =\n            execute(this.outputs, feedDict, {'training': true}) as Tensor[];\n        // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n\n        let totalLoss: Tensor;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          const loss = lossFunction(targets[i], outputs[i]);\n          losses.push(loss);\n          // TODO(cais): push Scalar instead.\n          const meanLoss = tfc.mean(loss) as Scalar;\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        }\n\n        // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting\n          // function.\n          const meanMetric =\n              tfc.mean(metric(targets[outputIndex], outputs[outputIndex])) as\n              Scalar;\n          tfc.keep(meanMetric);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          metricsValues.push(meanMetric);\n        }\n\n        totalLoss = tfc.mean(totalLoss);\n\n        // Add regularizer penalties.\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n\n        return totalLoss as Scalar;\n      };\n\n      const variables = this.collectedTrainableWeights.map(\n          param => param.read() as tfc.Variable);\n      const returnCost = true;\n      const totalLossValue =\n          this.optimizer.minimize(totalLossFunction, returnCost, variables);\n\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n\n  /**\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\n   * batch of inputs, returns the prespecified loss and metrics of the model\n   * under the batch of input data.\n   */\n  private makeTestFunction() {\n    this.testFunction = (data: Tensor[]) => {\n      return tfc.tidy(() => {\n        const valOutputs: Scalar[] = [];\n        let totalLoss: Scalar;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(\n            this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict) as Tensor[];\n        // Compute total loss.\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n          const loss = tfc.mean(lossFunction(targets[i], outputs[i])) as Scalar;\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss) as Scalar;\n          }\n          valOutputs.push(totalLoss);\n        }\n        // Compute the metrics.\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting function.\n          const meanMetric =\n              tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric as Scalar);\n        }\n        return valOutputs;\n      });\n    };\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a\n   * dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * for (let i = 1; i < 5 ; ++i) {\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *       batchSize: 4,\n   *       epochs: 3\n   *   });\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n   * }\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named,\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args A `ModelFitArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input\n   * data and what the model expects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    return fitTensors(this, x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for training. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs.\n   *   Of the two items in the array, the first is the input feature(s) and\n   *   the second is the output target(s).\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  async fitDataset<T extends TensorContainer>(\n      dataset: Dataset<T>, args: ModelFitDatasetArgs<T>): Promise<History> {\n    return fitDataset(this, dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and matric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues: number[] = [];\n    for (const loss of losses) {\n      lossValues.push((await loss.data())[0]);\n    }\n    tfc.dispose(losses);\n    return singletonOrArray(lossValues);\n  }\n\n  /**\n   * Extract weight values of the model.\n   *\n   * @param config: An instance of `io.SaveConfig`, which specifies\n   * model-saving options such as whether only trainable weights are to be\n   * saved.\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n   *   non-uniqueified weight names) to their values.\n   */\n  protected getNamedWeights(config?: io.SaveConfig): NamedTensorMap {\n    const namedWeights: NamedTensorMap = {};\n\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n      namedWeights[weights[i].originalName] = weightValues[i];\n    }\n    return namedWeights;\n  }\n\n  /**\n   * Setter used for force stopping of Model.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const input = tf.input({shape: [10]});\n   * const output = tf.layers.dense({units: 1}).apply(input);\n   * const model = tf.model({inputs: [input], outputs: [output]});\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10\n   * values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    this.stopTraining_ = stop;\n  }\n\n  /**\n   * Save the configuration and/or weights of the Model.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 2. Saving `model`'s topology and weights to browser\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('indexeddb://my-model-1');\n   *\n   * const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 3. Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n   * browser.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('downloads://my-model-1');\n   * ```\n   *\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\n   * See the documentation of `tf.io.browserHTTPRequests` for more details\n   * including specifying request parameters and implementation of the\n   * server.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('http://my-server/model/upload');\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [1]}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError(\n          'Model.save() cannot proceed because the IOHandler provided does ' +\n          'not have the `save` attribute defined.');\n    }\n\n    const weightDataAndSpecs =\n        await io.encodeWeights(this.getNamedWeights(config));\n\n    const returnString = false;\n    const unusedArg: {} = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n\n    return handlerOrURL.save({\n      modelTopology: modelConfig,\n      weightData: weightDataAndSpecs.data,\n      weightSpecs: weightDataAndSpecs.specs\n    });\n  }\n}\nserialization.registerClass(Model);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source keras/models.py */\n\nimport {io, Scalar, serialization, Tensor, util} from '@tensorflow/tfjs-core';\nimport {TensorContainer} from '@tensorflow/tfjs-core/dist/tensor_types';\n\nimport {getUid} from './backend/state';\nimport {History} from './base_callbacks';\nimport {Dataset} from './engine/dataset_stub';\nimport {Input} from './engine/input_layer';\nimport {getSourceInputs, Layer, Node, SymbolicTensor} from './engine/topology';\nimport {Model, ModelCompileArgs, ModelEvaluateArgs} from './engine/training';\nimport {ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './engine/training_dataset';\nimport {ModelFitArgs} from './engine/training_tensors';\nimport {NotImplementedError, RuntimeError, ValueError} from './errors';\nimport {deserialize} from './layers/serialization';\nimport {Kwargs, NamedTensorMap, Shape} from './types';\nimport {PyJsonDict} from './types';\nimport * as generic_utils from './utils/generic_utils';\nimport {convertPythonicToTs} from './utils/serialization_utils';\nimport {getExactlyOneShape} from './utils/types_utils';\n\n\n/**\n * Parses a JSON model configuration file and returns a model instance.\n *\n * ```js\n * // This example shows how to serialize a model using `toJSON()` and\n * // deserialize it as another model using `tf.models.modelFROMJSON()`.\n * // Note: this example serializes and deserializes only the topology\n * // of the model; the weights of the loaded model will be different\n * // from those of the the original model, due to random weight\n * // initialization.\n * // To load the topology and weights of a model, use `tf.loadModel()`.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\n * // Serialize `model1` as a JSON object.\n * const model1JSON = model1.toJSON(null, false);\n * model1.summary();\n *\n * const model2 = await tf.models.modelFromJSON(model1JSON);\n * model2.summary();\n * ```\n *\n *  @param modelAndWeightsConfig JSON object or string encoding a model and\n *       weights configuration. It can also be only the topology JSON of the\n *       model, in which case the weights will not be loaded.\n *  @param custom_objects Optional dictionary mapping names\n *       (strings) to custom classes or functions to be\n *       considered during deserialization.\n * @returns A TensorFlow.js Layers `tf.Model` instance (uncompiled).\n */\n/**\n * @doc {heading: 'Models',subheading: 'Loading'}\n */\nexport async function modelFromJSON(\n    modelAndWeightsConfig: ModelAndWeightsConfig|PyJsonDict,\n    customObjects?: serialization.ConfigDict): Promise<Model> {\n  if (!('modelTopology' in modelAndWeightsConfig)) {\n    modelAndWeightsConfig = {\n      modelTopology: modelAndWeightsConfig as PyJsonDict\n    };\n  }\n  modelAndWeightsConfig = modelAndWeightsConfig as ModelAndWeightsConfig;\n\n  let modelTopology = modelAndWeightsConfig.modelTopology as PyJsonDict;\n  if (modelTopology['model_config'] != null) {\n    // If the model-topology JSON contains a 'model_config' field, then it is\n    // a full model JSON (e.g., from `keras.Model.save()`), which contains\n    // not only the model's architecture in its 'model_config' field, but\n    // additional information such as the model's optimizer. We use only the\n    // 'model_config' field currently.\n    modelTopology = modelTopology['model_config'] as PyJsonDict;\n  }\n  const tsConfig =\n      convertPythonicToTs(modelTopology) as serialization.ConfigDict;\n  const model = deserialize(tsConfig, customObjects) as Model;\n\n  if (modelAndWeightsConfig.weightsManifest != null) {\n    // Load the weight values keyed by the original tensor names in the model\n    // file that was loaded.  These should match the keys of the weight\n    // manifest.\n    const weightValues =\n        await io.loadWeights(\n            modelAndWeightsConfig.weightsManifest,\n            modelAndWeightsConfig.pathPrefix,\n            model.weights.map(weight => weight.originalName)) as NamedTensorMap;\n\n    // Map the weights to the unique tensor names generated during model loading\n    const uniqueWeightValues: NamedTensorMap = {};\n    for (const weight of model.weights) {\n      uniqueWeightValues[weight.originalName] =\n          weightValues[weight.originalName];\n    }\n\n    const skipMismatches: boolean = null;\n    const isNamedTensorMap = true;\n    model.loadWeights(uniqueWeightValues, skipMismatches, isNamedTensorMap);\n  }\n  return model;\n}\n\n/**\n * Options for loading a saved mode in TensorFlow.js format.\n */\nexport interface ModelAndWeightsConfig {\n  /**\n   * A JSON object or JSON string containing the model config.\n   *\n   * This can be either of the following two formats:\n   *   - A model archiecture-only config,  i.e., a format consistent with the\n   *     return value of`keras.Model.to_json()`.\n   *   - A full model config, containing not only model architecture, but also\n   *     training options and state, i.e., a format consistent with the return\n   *     value of `keras.models.save_model()`.\n   */\n  modelTopology: PyJsonDict;\n\n  /**\n   * A weights manifest in TensorFlow.js format.\n   */\n  weightsManifest?: io.WeightsManifestConfig;\n\n  /**\n   * Path to prepend to the paths in `weightManifest` before fetching.\n   *\n   * The path may optionally end in a slash ('/').\n   */\n  pathPrefix?: string;\n}\n\n// TODO(nielsene): Remove after: https://github.com/tensorflow/tfjs/issues/400\nexport interface ModelPredictArgs {\n  /**\n   * Optional. Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Optional. Verbosity mode. Defaults to false.\n   */\n  verbose?: boolean;\n}\n\n/**\n * Load a model, including its topology and optionally weights.  See the\n * Tutorial named \"How to import a Keras Model\" for usage examples.\n *\n * Example 1: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 2. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * Example 4. Load a model from an HTTP server.\n *\n * ```js\n * const model = await\n *     tf.loadModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. This path will be\n *      interpreted as a relative HTTP path, to which `fetch` will be used to\n *      request the model topology and weight manifest JSON.\n *      The content of the JSON file is assumed to be a JSON object with the\n *      following fields and values:\n *      - 'modelTopology': A JSON object that can be either of:\n *        1. a model architecture JSON consistent with the format of the return\n *            value of `keras.Model.to_json()`\n *        2. a full model JSON in the format of `keras.models.save_model()`.\n *      - 'weightsManifest': A TensorFlow.js weights manifest.\n *      See the Python converter function `save_model()` for more details.\n *      It is also assumed that model weights can be accessed from relative\n *      paths described by the `paths` fields in weights manifest.\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param strict Require that the provided weights exactly match those required\n *   by the layers.  Default true.  Passing false means that both extra weights\n *   and missing weights will be silently ignored.\n *\n * @returns A `Promise` of `tf.Model`, with the topology and weights loaded.\n */\nexport async function loadModelInternal(\n    pathOrIOHandler: string|io.IOHandler, strict = true): Promise<Model> {\n  if (typeof pathOrIOHandler === 'string') {\n    const handlers = io.getLoadHandlers(pathOrIOHandler);\n    if (handlers.length === 0) {\n      // For backward compatibility: if no load handler can be found,\n      // assume it is a relative http path.\n      handlers.push(io.browserHTTPRequest(pathOrIOHandler));\n    } else if (handlers.length > 1) {\n      throw new ValueError(\n          `Found more than one (${handlers.length}) load handlers for ` +\n          `URL '${pathOrIOHandler}'`);\n    }\n    pathOrIOHandler = handlers[0];\n  }\n  return loadModelFromIOHandler(\n      pathOrIOHandler as io.IOHandler, undefined, strict);\n}\n\n/**\n * Load a model and optionally its weights, using an IOHandler object.\n *\n * @param handler The instance of `IOHandler` to be used during the model\n *   loading.\n * @param customObjects Any optional custom objects to be used during model\n *   loading.\n * @param strict Whether the weight loading will be done in strict mode.\n *   Default: `true`.\n */\nexport async function loadModelFromIOHandler(\n    handler: io.IOHandler, customObjects?: serialization.ConfigDict,\n    strict = true): Promise<Model> {\n  if (handler.load == null) {\n    throw new ValueError(\n        'Cannot proceed with model loading because the IOHandler provided ' +\n        'does not have the `load` method implemented.');\n  }\n  const artifacts = await handler.load();\n  let modelTopology = artifacts.modelTopology as PyJsonDict;\n  if (modelTopology['model_config'] != null) {\n    modelTopology = modelTopology['model_config'] as PyJsonDict;\n  }\n\n  // If weights are provided and the weight-loading mode is strict, use\n  // fast weight initialization. This skips costly initializers such as\n  // 'orthogonal' and saves unnecessary computation in cases where\n  // the initialized weight values will immediately be overwritten by\n  // loaded weight values.\n  const fastWeightInit =\n      artifacts.weightData != null && artifacts.weightSpecs != null && strict;\n  const model =\n      deserialize(\n          convertPythonicToTs(modelTopology) as serialization.ConfigDict,\n          customObjects, fastWeightInit) as Model;\n\n  // If weightData is present, load the weights into the model.\n  if (artifacts.weightData != null) {\n    // Loading weights requires weightSpecs.\n    if (artifacts.weightSpecs == null) {\n      throw new ValueError(\n          'Model artifacts contains weight data, but not weight specs. ' +\n          'Therefore loading of weights cannot proceed.');\n    }\n\n    const skipMismatch = false;\n    const isNamedTensorMap = true;\n    model.loadWeights(\n        io.decodeWeights(artifacts.weightData, artifacts.weightSpecs),\n        skipMismatch, isNamedTensorMap, strict);\n  }\n  return model;\n}\n\n/**\n * Configuration for a Sequential model.\n */\nexport interface SequentialArgs {\n  /** Stack of layers for the model. */\n  layers?: Layer[];\n\n  /** The name of this model. */\n  name?: string;\n}\n\n/**\n * A model with a stack of layers, feeding linearly from one to the next.\n *\n * `tf.sequential` is a factory function that creates an instance of\n * `tf.Sequential`.\n *\n * ```js\n *  // Define a model for linear regression.\n *  const model = tf.sequential();\n *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n *\n *  // Prepare the model for training: Specify the loss and the optimizer.\n *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n *\n *  // Generate some synthetic data for training.\n *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n *\n *  // Train the model using the data then do inference on a data point the\n *  // model hasn't seen:\n *  await model.fit(xs, ys);\n *  model.predict(tf.tensor2d([5], [1, 1])).print();\n * ```\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Sequential extends Model {\n  static className = 'Sequential';\n  private model: Model;\n  private _updatable: boolean;\n  constructor(args?: SequentialArgs) {\n    super({inputs: [], outputs: []});\n    args = args || {};\n\n    this.trainable = true;\n    this._updatable = true;\n    this.built = false;\n\n    // Set model name.\n    this.name = (args.name != null) ? args.name : getUid('sequential_');\n\n    // Add to the model any layers passed to the constructor.\n    if (args.layers != null) {\n      for (const layer of args.layers) {\n        this.add(layer);\n      }\n    }\n  }\n\n  // Helper function to Sequential.add  Throws if the new output shape will be\n  // invalid.\n  private checkShape(layer: Layer) {\n    const shape = layer.inboundNodes[0].outputTensors[0].shape;\n    if (shape.some(x => x < 0)) {\n      throw new ValueError(\n          'Negative dimension size caused by adding layer ' +\n          `${layer.name} with input shape [` +\n          `${layer.inboundNodes[0].inputTensors[0].shape}]`);\n    }\n  }\n\n  /**\n   * Adds a layer instance on top of the layer stack.\n   *\n   * ```js\n   *  const model = tf.sequential();\n   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n   *  // Note that the untrained model is random at this point.\n   *  model.predict(tf.randomNormal([10, 1])).print();\n   * ```\n   * @param layer Layer instance.\n   *\n   * @exception ValueError In case the `layer` argument does not know its\n   * input shape.\n   * @exception ValueError In case the `layer` argument has multiple output\n   *   tensors, or is already connected somewhere else (forbidden in\n   *   `Sequential` models).\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  add(layer: Layer): void {\n    const isLayerModelInstance =\n        layer instanceof Sequential || layer instanceof Model;\n    let modelLayer: Model;\n    if (isLayerModelInstance) {\n      modelLayer = layer as Model;\n      if (modelLayer.outputs.length !== 1) {\n        throw new ValueError(\n            'All layers in a Sequential model ' +\n            'should have a single output tensor. ' +\n            'For multi-output layers, ' +\n            'use the functional API.');\n      }\n      if (modelLayer.inputs.length !== 1) {\n        throw new ValueError(\n            'All layers in a Sequential model ' +\n            'should have a single input tensor. ' +\n            'For multi-input layers, ' +\n            'use the functional API.');\n      }\n    }\n\n    if (this.outputs.length === 0) {\n      // first layer in model: check that it is an input layer\n      if (layer.inboundNodes.length === 0) {\n        // create an input layer\n        if (layer.batchInputShape == null) {\n          throw new ValueError(\n              'The first layer in a Sequential model must ' +\n              'get an `inputShape` or `batchInputShape` argument.');\n        }\n        // Instantiate the input layer.\n        const x = Input({\n          batchShape: layer.batchInputShape,\n          dtype: layer.dtype,\n          name: layer.name + '_input'\n        });\n        // This will build the current layer and create the node connecting\n        // the current layer to the input layer we just created.\n        layer.apply(x);\n      }\n\n      if (isLayerModelInstance) {\n        this.outputs = modelLayer.outputs;\n        this.inputs = modelLayer.inputs;\n      } else {\n        if (layer.inboundNodes.length !== 1) {\n          throw new ValueError(\n              'A layer added to a Sequential model must not already be ' +\n              `connected somewhere else. Model received layer ${layer.name} ` +\n              `which has ${layer.inboundNodes.length} pre-existing inbound ` +\n              'connections.');\n        }\n\n        if (layer.inboundNodes[0].outputTensors.length !== 1) {\n          throw new ValueError(\n              'All layers in a Sequential model ' +\n              'should have a single output tensor. ' +\n              'For multi-output layers, ' +\n              'use the functional API.');\n        }\n        this.checkShape(layer);\n        this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n        this.inputs = getSourceInputs(this.outputs[0]);\n      }\n\n      this.inboundNodes = [];\n      // We create an input node, which we will keep updated\n      // as we add more layers.\n      // (This call has side effects.)\n      // tslint:disable-next-line:no-unused-expression\n      new Node({\n        outboundLayer: this,\n        inboundLayers: [],\n        nodeIndices: [],\n        tensorIndices: [],\n        inputTensors: this.inputs,\n        outputTensors: this.outputs,\n        // no model-level masking for now\n        inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n        outputMasks: [null],\n        inputShapes: this.inputs.map(x => x.shape),\n        outputShapes: this.outputs[0].shape\n      });\n    } else {\n      const outputTensor = layer.apply(this.outputs[0]);\n      if (Array.isArray(outputTensor)) {\n        throw new TypeError(\n            'All layers in a Sequential model ' +\n            'should have a single output tensor. ' +\n            'For multi-output layers, ' +\n            'use the functional API.');\n      }\n      this.checkShape(layer);\n      this.outputs = [outputTensor as SymbolicTensor];\n      // update self.inbound_nodes\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n\n    this.layers.push(layer);\n    this.built = false;\n  }\n\n  /**\n   * Removes the last layer in the model.\n   *\n   * @exception TypeError if there are no layers in the model.\n   */\n  pop(): void {\n    if (this.layers.length === 0) {\n      throw new TypeError('There are no layers in the model.');\n    }\n\n    this.layers.pop();\n    if (this.layers.length === 0) {\n      this.outputs = [];\n      this.inboundNodes = [];\n      this.outboundNodes = [];\n    } else {\n      const lastLayerIndex = this.layers.length - 1;\n      this.layers[lastLayerIndex].outboundNodes = [];\n      this.outputs = [this.layers[lastLayerIndex].output as SymbolicTensor];\n      // update self.inbound_nodes\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.call(inputs, kwargs);\n  }\n\n  build(inputShape?: Shape|Shape[]) {\n    // Call `getExactlyOneShape` without using its return value,\n    // to verify that exactly one input shape is provided.\n    getExactlyOneShape(inputShape);\n\n    if (this.inputs.length === 0 || this.outputs.length === 0) {\n      throw new TypeError(\n          'Sequential model cannot be built: model is empty.' +\n          ' Add some layers first.');\n    }\n    // actually create the model\n    this.model = new Model({\n      inputs: this.inputs,\n      outputs: this.outputs[0],\n      name: this.name + '_model'\n    });\n    this.model.trainable = this.trainable;\n    this.model.updatable = this.updatable;\n\n    // mirror model attributes\n    this.supportsMasking = this.model.supportsMasking;\n    // TODO(michaelterry): Add caches\n    this.inputLayers = this.model.inputLayers;\n    this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n    this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n    this.outputLayers = this.model.outputLayers;\n    this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n    this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n    this.nodesByDepth = this.model.nodesByDepth;\n    this.containerNodes = this.model.containerNodes;\n    this.outputNames = this.model.outputNames;\n    this.inputNames = this.model.inputNames;\n    // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.\n    // TODO(michaelterry): Add callbackModel if needed.\n    this.built = true;\n  }\n\n  countParams(): number {\n    if (!this.built) {\n      this.build();\n    }\n    return super.countParams();\n  }\n\n  /**\n   * Print a text summary of the Sequential model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - The total number of trainable and non-trainable parameters of the\n   * model.\n   *\n   * ```js\n   * const model = tf.sequential();\n   * model.add(\n   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\n   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n   *\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      this.build();\n    }\n    super.summary(lineLength, positions, printFn);\n  }\n\n  /**\n   * Sets the weights of the model.\n   *\n   * @param weights Should be a list of Tensors with shapes and types matching\n   *   the output of `model.getWeights()`.\n   */\n  setWeights(weights: Tensor[]): void {\n    if (this.model == null) {\n      this.build();\n    }\n    this.model.setWeights(weights);\n  }\n\n  get updatable(): boolean {\n    return this._updatable;\n  }\n\n  set updatable(value: boolean) {\n    if (this.built) {\n      this.model.updatable = value;\n    }\n    this._updatable = value;\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *   batchSize: 4,\n   * });\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateConfig`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before being used.');\n    }\n    return this.model.evaluate(x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  async evaluateDataset<T extends TensorContainer>(\n      dataset: Dataset<T>,\n      args: ModelEvaluateDatasetArgs): Promise<Scalar|Scalar[]> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before being used.');\n    }\n    return this.model.evaluateDataset(dataset, args);\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([2, 10])).print();\n   * ```\n   *\n   * @param x The input data, as an Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param conifg A `ModelPredictConfig` object containing optional fields.\n   *\n   * @return `tf.Tensor`(s) of predictions.\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [1]}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predict(x, args);\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * @param x: Input samples, as an Tensor, or list of Tensors (if the model\n   *   has multiple inputs).\n   * @return Tensor(s) of predictions\n   */\n  predictOnBatch(x: Tensor): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predictOnBatch(x);\n  }\n\n  /**\n   * See `Model.compile`.\n   *\n   * @param args\n   */\n  compile(args: ModelCompileArgs): void {\n    this.build();\n    this.model.compile(args);\n    this.optimizer = this.model.optimizer;\n    this.loss = this.model.loss;\n    this.metrics = this.model.metrics;\n    // TODO(cais): Add this.lossWeights, this.sampleWeightMode,\n    //   this.weightedMetrics, this.targets.\n    this.metricsTensors = this.model.metricsTensors;\n    this.metricsNames = this.model.metricsNames;\n    // TODO(cais): Add sampleWeights.\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *   batchSize: 4,\n   *   epochs: 3\n   * });\n   * console.log(history.history.loss[0]);\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you can\n   * also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named, you\n   *  can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args  A `ModelFitConfig`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and what the model expects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before ' +\n          'being used.');\n    }\n    return this.model.fit(x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A `ModelFitDatasetConfig`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', configParamIndices: [2]}\n   */\n  async fitDataset<T extends TensorContainer>(\n      dataset: Dataset<T>, args: ModelFitDatasetArgs<T>): Promise<History> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before ' +\n          'being used.');\n    }\n    return this.model.fitDataset(dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and matric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    return this.model.trainOnBatch(x, y);\n  }\n\n  /* See parent class for JsDoc */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict,\n      fastWeightInit = false): T {\n    let configArray: serialization.ConfigDictArray;\n    let extraModelConfig: serialization.ConfigDict = {};\n    if (config instanceof Array) {\n      if (!(config[0].className != null) ||\n          config[0]['className'] === 'Merge') {\n        throw new ValueError('Legacy serialization format not supported yet.');\n      }\n      configArray = config;\n    } else {\n      util.assert(\n          config['layers'] != null,\n          `When the config data for a Sequential model is not an Array, ` +\n              `it must be an Object that contains the 'layers' field.`);\n      configArray = config['layers'] as serialization.ConfigDictArray;\n      delete config['layers'];\n      extraModelConfig = config;\n    }\n\n    const model = new cls(extraModelConfig);\n    if (!(model instanceof Sequential)) {\n      throw new NotImplementedError(\n          `Sequential.fromConfig called on non-Sequential input: ${model}`);\n    }\n    for (const conf of configArray) {\n      const customObjects: serialization.ConfigDict = undefined;\n      const layer = deserialize(\n                        conf as serialization.ConfigDict, customObjects,\n                        fastWeightInit) as Layer;\n      if (fastWeightInit) {\n        layer.setFastWeightInitDuringBuild(true);\n      }\n      model.add(layer);\n    }\n    return model;\n  }\n\n  /**\n   * Setter used for force stopping of Model.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10 values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    // TODO(cais): When refactoring to remove the composition pattern happens,\n    // remove this method overriding.\n    this.model.stopTraining = stop;\n  }\n\n  // TODO(cais): Override get trainableWeights() here\n\n  // tslint:disable-next-line:no-any\n  getConfig(): any {\n    // NOTE(cais): We override the return type of getConfig() to `any` here,\n    //   because the `Sequential` class is a special case among `Container`\n    //   subtypes in that its getConfig() method returns an Array (not a\n    //   dict).\n    const config: serialization.ConfigDict[] = [];\n    for (const layer of this.layers) {\n      config.push({\n        className: layer.getClassName(),\n        config: layer.getConfig(),\n      });\n    }\n    return config;\n  }\n}\nserialization.registerClass(Sequential);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Exported functions.\n */\n\nimport {io} from '@tensorflow/tfjs-core';\n\nimport {BaseCallbackConstructor, CallbackConstructorRegistry} from './base_callbacks';\nimport {ContainerArgs} from './engine/container';\nimport {Input, InputConfig,} from './engine/input_layer';\nimport {SymbolicTensor} from './engine/topology';\nimport {Model} from './engine/training';\nimport {loadModelInternal, Sequential, SequentialArgs} from './models';\n\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Model and related factory methods.\n\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that `tf.model`\n * is more generic, supporting an arbitrary graph (without cycles) of layers.\n * `tf.sequential` is less generic and supports only a linear stack of layers.\n *\n * When creating a `tf.Model`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadModel`.\n */\n\n/**\n * @doc {heading: 'Models', subheading: 'Creation', configParamIndices: [0]}\n */\nexport function model(args: ContainerArgs): Model {\n  return new Model(args);\n}\n\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without cycles)\n * of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\n/**\n * @doc {heading: 'Models', subheading: 'Creation', configParamIndices: [0]}\n */\nexport function sequential(config?: SequentialArgs): Sequential {\n  return new Sequential(config);\n}\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   useDocsFrom: 'loadModelInternal'\n * }\n */\nexport function loadModel(\n    pathOrIOHandler: string|io.IOHandler, strict = true): Promise<Model> {\n  return loadModelInternal(pathOrIOHandler, strict);\n}\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Inputs',\n *   useDocsFrom: 'Input',\n *   configParamIndices: [0]\n * }\n */\nexport function input(config: InputConfig): SymbolicTensor {\n  return Input(config);\n}\n\nexport function registerCallbackConstructor(\n    verbosityLevel: number,\n    callbackConstructor: BaseCallbackConstructor): void {\n  CallbackConstructorRegistry.registerCallbackConstructor(\n      verbosityLevel, callbackConstructor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {getScalar} from './backend/state';\nimport {deserializeKerasObject} from './utils/generic_utils';\n\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport abstract class Activation extends serialization.Serializable {\n  abstract apply(tensor: Tensor, axis?: number): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\n/** @docinline */\nexport type ActivationIdentifier = 'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string;\n\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n  static readonly className = 'elu';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x: Input.\n   * @param alpha: Scaling factor the negative section.\n   * @return Output of the ELU activation.\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return K.elu(x, alpha);\n  }\n}\nserialization.registerClass(Elu);\n\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n  static readonly className = 'selu';\n  apply(x: Tensor): Tensor {\n    return tfc.selu(x);\n  }\n}\nserialization.registerClass(Selu);\n\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n  static readonly className = 'relu';\n  apply(x: Tensor): Tensor {\n    return tfc.relu(x);\n  }\n}\nserialization.registerClass(Relu);\n\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n  static readonly className = 'relu6';\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.minimum(getScalar(6.0), tfc.relu(x)));\n  }\n}\nserialization.registerClass(Relu6);\n\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n  static readonly className = 'linear';\n  apply(x: Tensor): Tensor {\n    return x;\n  }\n}\nserialization.registerClass(Linear);\n\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n  static readonly className = 'sigmoid';\n  apply(x: Tensor): Tensor {\n    return tfc.sigmoid(x);\n  }\n}\nserialization.registerClass(Sigmoid);\n\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n  static readonly className = 'hardSigmoid';\n  apply(x: Tensor): Tensor {\n    return K.hardSigmoid(x);\n  }\n}\nserialization.registerClass(HardSigmoid);\n\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n  static readonly className = 'softplus';\n  apply(x: Tensor): Tensor {\n    return tfc.softplus(x);\n  }\n}\nserialization.registerClass(Softplus);\n\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n  static readonly className = 'softsign';\n  apply(x: Tensor): Tensor {\n    return K.softsign(x);\n  }\n}\nserialization.registerClass(Softsign);\n\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n  static readonly className = 'tanh';\n  apply(x: Tensor): Tensor {\n    return tfc.tanh(x);\n  }\n}\nserialization.registerClass(Tanh);\n\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n  static readonly className = 'softmax';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.softmax(x, axis);\n  }\n}\nserialization.registerClass(Softmax);\n\nexport function serializeActivation(activation: Activation): string {\n  return activation.getClassName();\n}\n\nexport function deserializeActivation(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Activation {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'activation');\n}\n\nexport function getActivation(identifier: ActivationIdentifier|\n                              serialization.ConfigDict|Activation): Activation {\n  if (identifier == null) {\n    const config = {className: 'linear', config: {}};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    const config = {className: identifier, config: {}};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {abs, add, Scalar, serialization, sum, Tensor, tidy, zeros} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from './backend/state';\nimport * as K from './backend/tfjs_backend';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Regularizer base class.\n */\nexport abstract class Regularizer extends serialization.Serializable {\n  abstract apply(x: Tensor): Scalar;\n}\n\nexport interface L1L2Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1?: number;\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2?: number;\n}\n\nexport interface L1Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1: number;\n}\n\nexport interface L2Args {\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2: number;\n}\n\n/**\n * Regularizer for L1 and L2 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l1 * abs(x)) + sum(l2 * x^2)\n */\n/** @doc {heading: 'Regularizers', namespace: 'regularizers'} */\nexport class L1L2 extends Regularizer {\n  static className = 'L1L2';\n\n  private readonly l1: Scalar;\n  private readonly l2: Scalar;\n  private readonly hasL1: boolean;\n  private readonly hasL2: boolean;\n  constructor(args?: L1L2Args) {\n    super();\n\n    const l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    const l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = l1 !== 0;\n    this.hasL2 = l2 !== 0;\n\n    this.l1 = getScalar(l1);\n    this.l2 = getScalar(l2);\n  }\n\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n  apply(x: Tensor): Scalar {\n    return tidy(() => {\n      let regularization: Tensor = zeros([1]);\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization =\n            add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n      return regularization.asScalar();\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {'l1': this.l1.dataSync()[0], 'l2': this.l2.dataSync()[0]};\n  }\n\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls({l1: config.l1 as number, l2: config.l2 as number});\n  }\n}\nserialization.registerClass(L1L2);\n\n/**\n * Regularizer for L1 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l1 * abs(x))\n * @param args l1 config.\n */\nexport function l1(args?: L1Args) {\n  return new L1L2({l1: args != null ? args.l1 : null, l2: 0});\n}\n\n/**\n * Regularizer for L2 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l2 * x^2)\n * @param args l2 config.\n */\nexport function l2(args: L2Args) {\n  return new L1L2({l2: args != null ? args.l2 : null, l1: 0});\n}\n\n/** @docinline */\nexport type RegularizerIdentifier = 'l1l2'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in RegularizerIdentifier]: string} = {\n      'l1l2': 'L1L2'\n    };\n\nexport function serializeRegularizer(constraint: Regularizer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeRegularizer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Regularizer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'regularizer');\n}\n\nexport function getRegularizer(identifier: RegularizerIdentifier|\n                               serialization.ConfigDict|\n                               Regularizer): Regularizer {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n *  Advanced activation layers.\n */\n\nimport {clipByValue, elu, leakyRelu, prelu, relu, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {Softmax as softmaxActivation} from '../activations';\nimport {getScalar} from '../backend/state';\nimport {cast} from '../backend/tfjs_backend';\nimport {Constraint, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, serializeRegularizer} from '../regularizers';\nimport {Kwargs, Shape} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport interface ReLULayerArgs extends LayerArgs {\n  /**\n   * Float, the maximum output value.\n   */\n  maxValue?: number;\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\nexport class ReLU extends Layer {\n  static className = 'ReLU';\n  maxValue: number;\n\n  constructor(args?: ReLULayerArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n    return output;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {maxValue: this.maxValue};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ReLU);\n\nexport interface LeakyReLULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.\n   */\n  alpha?: number;\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\nexport class LeakyReLU extends Layer {\n  static className = 'LeakyReLU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 0.3;\n\n  constructor(args?: LeakyReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LeakyReLU);\n\nexport interface PReLULayerArgs extends LayerArgs {\n  /**\n   * Initializer for the learnable alpha.\n   */\n  alphaInitializer?: Initializer|InitializerIdentifier;\n\n  /**\n   * Regularizer for the learnable alpha.\n   */\n  alphaRegularizer?: Regularizer;\n\n  /**\n   * Constraint for the learnable alpha.\n   */\n  alphaConstraint?: Constraint;\n\n  /**\n   * The axes along which to share learnable parameters for the activation\n   * function. For example, if the incoming feature maps are from a 2D\n   * convolution with output shape `[numExamples, height, width, channels]`,\n   * and you wish to share parameters across space (height and width) so that\n   * each filter channels has only one set of parameters, set\n   * `shared_axes: [1, 2]`.\n   */\n  sharedAxes?: number|number[];\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\nexport class PReLU extends Layer {\n  static className = 'PReLU';\n  private readonly alphaInitializer: Initializer;\n  private readonly alphaRegularizer: Regularizer;\n  private readonly alphaConstraint: Constraint;\n  private readonly sharedAxes: number[];\n  private alpha: LayerVariable;\n\n  readonly DEFAULT_ALPHA_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args?: PReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.supportsMasking = true;\n    this.alphaInitializer =\n        getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(\n          `Expected sharedAxes to be a number or an array of numbers, ` +\n          `but got ${args.sharedAxes}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape: Shape = inputShape.slice(1);\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n    this.alpha = this.addWeight(\n        'alpha', paramShape, 'float32', this.alphaInitializer,\n        this.alphaRegularizer, true, this.alphaConstraint);\n    // Set input spec.\n    const axes: {[axis: number]: number} = {};\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes,\n    })];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(PReLU);\n\nexport interface ELULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.\n   */\n  alpha?: number;\n}\n\n/**\n * Exponetial Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n */\nexport class ELU extends Layer {\n  static className = 'ELU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 1.0;\n\n  constructor(args?: ELULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(\n          `Non-default alpha value (${args.alpha}) is not supported by the ` +\n          `ELU layer yet.`);\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ELU);\n\nexport interface ThresholdedReLULayerArgs extends LayerArgs {\n  /**\n   * Float >= 0. Threshold location of activation.\n   */\n  theta?: number;\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n */\nexport class ThresholdedReLU extends Layer {\n  static className = 'ThresholdedReLU';\n  readonly theta: number;\n  private readonly thetaTensor: Tensor;\n\n  readonly DEFAULT_THETA = 1.0;\n\n  constructor(args?: ThresholdedReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n    this.thetaTensor = getScalar(this.theta);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return x.mul(cast(x.greater(this.thetaTensor), 'float32'));\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {theta: this.theta};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ThresholdedReLU);\n\nexport interface SoftmaxLayerArgs extends LayerArgs {\n  /**\n   * Integer, axis along which the softmax normalization is applied.\n   * Defaults to `-1` (i.e., the last axis).\n   */\n  axis?: number;\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\nexport class Softmax extends Layer {\n  static className = 'Softmax';\n  readonly axis: number;\n  readonly softmax: (t: Tensor, a?: number) => Tensor;\n  readonly DEFAULT_AXIS = 1.0;\n\n  constructor(args?: SoftmaxLayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.softmax = new softmaxActivation().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {axis: this.axis};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Softmax);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {PaddingMode} from '../common';\nimport {ValueError} from '../errors';\n\nimport {pyListRepeat} from './generic_utils';\nimport {isInteger, max} from './math_utils';\n\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(\n    value: number|number[], n: number, name: string): number[] {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\n          `The ${name} argument must be a tuple of ${n} integers. Received: ` +\n          `${value.length} elements.`);\n    }\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\n            `The ${name} argument must be a tuple of ${\n                n} integers. Received: ` +\n            `${JSON.stringify(value)} including a non-integer number ` +\n            `${singleValue}`);\n      }\n    }\n    return value;\n  }\n}\n\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(\n    inputLength: number, filterSize: number, padding: PaddingMode,\n    stride: number, dilation = 1): number {\n  if (inputLength == null) {\n    return inputLength;\n  }\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength: number;\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {  // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n  return Math.floor((outputLength + stride - 1) / stride);\n}\n\nexport function deconvLength(\n    dimSize: number, strideSize: number, kernelSize: number,\n    padding: PaddingMode): number {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n  return dimSize;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode, DataFormat, PaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, Shape} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBias expects input to be of rank 3 or 4, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBias expects kernel to be of rank 3 or 4, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv2d(\n        y as Tensor3D | Tensor4D, kernel as Tensor4D,\n        strides as [number, number], padding === 'same' ? 'same' : 'valid',\n        'NHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: string;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D).\n */\nexport interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    if (this.rank !== 1 && this.rank !== 2) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1 or 2 (${this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) &&\n         (this.dilationRate as number[]).length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    }\n    if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2))\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n\n      if (this.rank === 1) {\n        outputs = conv1dWithBias(\n            inputs, this.kernel.read(), biasValue, this.strides[0],\n            this.padding, this.dataFormat, this.dilationRate[0]);\n      } else if (this.rank === 2) {\n        // TODO(cais): Move up to constructor.\n        outputs = conv2dWithBias(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number]);\n      } else if (this.rank === 3) {\n        throw new NotImplementedError('3D convolution is not implemented yet.');\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n */\nexport class Conv2D extends Conv {\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2))\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n  }\n}\nserialization.registerClass(Conv2D);\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n */\nexport class Conv2DTranspose extends Conv2D {\n  static className = 'Conv2DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]) as Tensor4D;\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\n\nexport class SeparableConv extends Conv {\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n */\nexport class SeparableConv2D extends SeparableConv {\n  static className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n */\nexport class Conv1D extends Conv {\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1))\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 list of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n */\nexport class Cropping2D extends Layer {\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number')\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    else if (typeof args.cropping[0] === 'number')\n      this.cropping = [\n        [args.cropping[0] as number, args.cropping[0] as number],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    else\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst')\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    else\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n */\nexport class UpSampling2D extends Layer {\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = input.resizeNearestNeighbor([height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return input.resizeNearestNeighbor([height, width]);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {size: this.size, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, DataFormat} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, Shape} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {BaseConv, BaseConvLayerArgs, ConvLayerArgs, preprocessConv2DInput} from './convolutional';\n\n\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(\n    x: Tensor, depthwiseKernel: Tensor, strides: [number, number] = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n          `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\n          `depthwiseKernel is required to be 4-D, but is instead ` +\n          `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(\n        y as Tensor4D, depthwiseKernel as Tensor4D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\nexport interface DepthwiseConv2DLayerArgs extends BaseConvLayerArgs {\n  /**\n   * An integer or Array of 2 integers, specifying the width and height of the\n   * 2D convolution window. Can be a single integer to specify the same value\n   * for all spatial dimensions.\n   */\n  kernelSize: number|[number, number];\n\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal to\n   * `filtersIn * depthMultiplier`.\n   * Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   * Default: GlorotNormal.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regulzarizer function for the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n */\nexport class DepthwiseConv2D extends BaseConv {\n  static className = 'DepthwiseConv2D';\n  private readonly depthMultiplier: number;\n  private readonly depthwiseInitializer: Initializer;\n  private readonly depthwiseConstraint: Constraint;\n  private readonly depthwiseRegularizer: Regularizer;\n\n  private depthwiseKernel: LayerVariable = null;\n\n  constructor(args: DepthwiseConv2DLayerArgs) {\n    super(2, args as ConvLayerArgs);\n    this.depthMultiplier =\n        args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(\n          `Inputs to DepthwiseConv2D should have rank 4. ` +\n          `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          'The channel dimension of the inputs to DepthwiseConv2D should ' +\n          `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape: Shape = [\n      this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n    ];\n\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, null,\n        this.depthwiseInitializer, this.depthwiseRegularizer, true,\n        this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [inputDim * this.depthMultiplier], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(\n          inputs, this.depthwiseKernel.read(), this.strides as [number, number],\n          this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ?\n        inputShape[1] * this.depthMultiplier :\n        inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(\n        rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(\n        cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\nserialization.registerClass(DepthwiseConv2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\n\nimport {Scalar, serialization, Tensor, tidy, transpose, util} from '@tensorflow/tfjs-core';\n\nimport {Activation as ActivationFn, ActivationIdentifier, getActivation, serializeActivation} from '../activations';\nimport {getScalar} from '../backend/state';\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, Shape} from '../types';\nimport {arrayProd, range} from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n\nexport interface DropoutLayerArgs extends LayerArgs {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /**\n   * Integer array representing the shape of the binary dropout mask that will\n   * be multiplied with the input.\n   *\n   * For instance, if your inputs have shape `(batchSize, timesteps, features)`\n   * and you want the dropout mask to be the same for all timesteps, you can use\n   * `noise_shape=(batch_size, 1, features)`.\n   */\n  noiseShape?: number[];\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n */\nexport class Dropout extends Layer {\n  static className = 'Dropout';\n  private readonly rate: number;\n  private readonly rateScalar: Scalar;\n  private readonly noiseShape: number[];\n  private readonly seed: number;\n\n  constructor(args: DropoutLayerArgs) {\n    super(args);\n    this.rate = Math.max(Math.min(args.rate, 1), 0);\n    this.rateScalar = getScalar(this.rate);\n    // So that the scalar doesn't get tidied up between executions.\n    this.noiseShape = args.noiseShape;\n    this.seed = args.seed;\n    if (this.seed != null) {\n      throw new NotImplementedError(\n          'Non-default seed is not implemented in Dropout layer yet: ' +\n          this.seed);\n    }\n    this.supportsMasking = true;\n  }\n\n  private getNoiseShape(input: Tensor): Shape {\n    if (this.noiseShape == null) {\n      return this.noiseShape;\n    }\n    const inputShape = input.shape;\n    const noiseShape: Shape = [];\n    for (let i = 0; i < this.noiseShape.length; ++i) {\n      noiseShape.push(\n          this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n    }\n    return noiseShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (this.noiseShape != null &&\n          !util.arraysEqual(input.shape, this.noiseShape)) {\n        throw new NotImplementedError(\n            'Non-default noise shape is not implemented in Dropout ' +\n            'layer yet: ' + JSON.stringify(this.noiseShape));\n      }\n      if (0 < this.rate && this.rate < 1) {\n        const training =\n            kwargs['training'] == null ? false : kwargs['training'];\n        const noiseShape = this.getNoiseShape(input);\n        const output =\n            K.inTrainPhase(\n                () => K.dropout(input, this.rateScalar, noiseShape, this.seed),\n                () => input, training) as Tensor;\n        return output;\n      }\n      return inputs;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      rate: this.rate,\n      noiseShape: this.noiseShape,\n      seed: this.seed,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dropout);\n\nexport interface DenseLayerArgs extends LayerArgs {\n  /** Positive integer, dimensionality of the output space. */\n  units: number;\n  /**\n   * Activation function to use.\n   *\n   * If unspecified, no activation is applied.\n   */\n  activation?: ActivationIdentifier;\n  /** Whether to apply a bias. */\n  useBias?: boolean;\n  /**\n   * Initializer for the dense kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * If specified, defines inputShape as `[inputDim]`.\n   */\n  inputDim?: number;\n\n  /**\n   * Constraint for the kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the dense kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n */\nexport class Dense extends Layer {\n  static className = 'Dense';\n  private units: number;\n  // Default activation: Linear (none).\n  private activation: ActivationFn = null;\n  private useBias = true;\n  private kernelInitializer: Initializer;\n  private biasInitializer: Initializer;\n  private kernel: LayerVariable = null;\n  private bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n  private readonly kernelConstraint?: Constraint;\n  private readonly biasConstraint?: Constraint;\n  private readonly kernelRegularizer?: Regularizer;\n  private readonly biasRegularizer?: Regularizer;\n\n  constructor(args: DenseLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null &&\n        args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      this.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    this.units = args.units;\n    this.activation = getActivation(args.activation);\n    if (args.useBias != null) {\n      this.useBias = args.useBias;\n    }\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.supportsMasking = true;\n\n    this.inputSpec = [{minNDim: 2}];\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputLastDim = inputShape[inputShape.length - 1];\n    if (this.kernel == null) {\n      this.kernel = this.addWeight(\n          'kernel', [inputLastDim, this.units], null, this.kernelInitializer,\n          this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight(\n            'bias', [this.units], null, this.biasInitializer,\n            this.biasRegularizer, true, this.biasConstraint);\n      }\n    }\n\n    this.inputSpec = [{minNDim: 2, axes: {[-1]: inputLastDim}}];\n    this.built = true;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    outputShape[outputShape.length - 1] = this.units;\n    return outputShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Dense layer accepts only a single input.\n      const input = getExactlyOneTensor(inputs);\n      let output = K.dot(input, this.kernel.read());\n      if (this.bias != null) {\n        output = K.biasAdd(output, this.bias.read());\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dense);\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n */\nexport class Flatten extends Layer {\n  static className = 'Flatten';\n  constructor(args?: LayerArgs) {\n    super(args || {});\n    this.inputSpec = [{minNDim: 3}];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    for (const dim of inputShape.slice(1)) {\n      if (dim == null) {\n        throw new ValueError(\n            `The shape of the input to \"Flatten\" is not fully defined ` +\n            `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n            `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n            `layer in your model.`);\n      }\n    }\n    return [inputShape[0], arrayProd(inputShape, 1)];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return K.batchFlatten(getExactlyOneTensor(inputs));\n    });\n  }\n}\nserialization.registerClass(Flatten);\n\nexport interface ActivationLayerArgs extends LayerArgs {\n  /**\n   * Name of the activation function to use.\n   */\n  activation: ActivationIdentifier;\n}\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n *\n */\nexport class Activation extends Layer {\n  static className = 'Activation';\n  activation: ActivationFn;\n\n  constructor(args: ActivationLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.activation = getActivation(args.activation);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      return this.activation.apply(input);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {activation: serializeActivation(this.activation)};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Activation);\n\nexport interface ReshapeLayerArgs extends LayerArgs {\n  /** The target shape. Does not include the batch axis. */\n  targetShape: Shape;\n}\n\nexport interface RepeatVectorLayerArgs extends LayerArgs {\n  /**\n   * The integer number of times to repeat the input.\n   */\n  n: number;\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n */\nexport class RepeatVector extends Layer {\n  static className = 'RepeatVector';\n  readonly n: number;\n\n  constructor(args: RepeatVectorLayerArgs) {\n    super(args);\n    this.n = args.n;\n    this.inputSpec = [{ndim: 2}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], this.n, inputShape[1]];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      return K.repeat(inputs, this.n);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      n: this.n,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(RepeatVector);\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary: although all dimensions in the input shape must be fixed.\n *     Use the ReshapeLayerConfig field `input_shape` when using this layer\n *     as the first layer in a model.\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n */\nexport class Reshape extends Layer {\n  static className = 'Reshape';\n  private targetShape: Shape;\n\n  constructor(args: ReshapeLayerArgs) {\n    super(args);\n    this.targetShape = args.targetShape;\n\n    // Make sure that all unknown dimensions are represented as `null`.\n    for (let i = 0; i < this.targetShape.length; ++i) {\n      if (this.isUnknown(this.targetShape[i])) {\n        this.targetShape[i] = null;\n      }\n    }\n  }\n\n  private isUnknown(dim: number): boolean {\n    return dim < 0 || dim == null;\n  }\n\n  /**\n   * Finds and replaces a missing dimension in output shape.\n   *\n   * This is a near direct port of the internal Numpy function\n   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n   *\n   * @param inputShape: Original shape of array begin reshape.\n   * @param outputShape: Target shape of the array, with at most a single\n   * `null` or negative number, which indicates an underdetermined dimension\n   * that should be derived from `inputShape` and the known dimensions of\n   *   `outputShape`.\n   * @returns: The output shape with `null` replaced with its computed value.\n   * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n   */\n  private fixUnknownDimension(inputShape: Shape, outputShape: Shape): Shape {\n    const errorMsg = 'Total size of new array must be unchanged.';\n    const finalShape = outputShape.slice();\n    let known = 1;\n    let unknown = null;\n    for (let i = 0; i < finalShape.length; ++i) {\n      const dim = finalShape[i];\n      if (this.isUnknown(dim)) {\n        if (unknown === null) {\n          unknown = i;\n        } else {\n          throw new ValueError('Can only specifiy one unknown dimension.');\n        }\n      } else {\n        known *= dim;\n      }\n    }\n\n    const originalSize = arrayProd(inputShape);\n    if (unknown !== null) {\n      if (known === 0 || originalSize % known !== 0) {\n        throw new ValueError(errorMsg);\n      }\n      finalShape[unknown] = originalSize / known;\n    } else if (originalSize !== known) {\n      throw new ValueError(errorMsg);\n    }\n\n    return finalShape;\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    let anyUnknownDims = false;\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (this.isUnknown(inputShape[i])) {\n        anyUnknownDims = true;\n        break;\n      }\n    }\n\n    if (anyUnknownDims) {\n      return inputShape.slice(0, 1).concat(this.targetShape);\n    } else {\n      return inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const outputShape = inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      return input.reshape(outputShape);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      targetShape: this.targetShape,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Reshape);\n\nexport interface PermuteLayerArgs extends LayerArgs {\n  /**\n   * Array of integers. Permutation pattern. Does not include the\n   * sample (batch) dimension. Index starts at 1.\n   * For instance, `[2, 1]` permutes the first and second dimensions\n   * of the input.\n   */\n  dims: number[];\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.Sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as othe first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n */\nexport class Permute extends Layer {\n  static className = 'Permute';\n  readonly dims: number[];\n  private readonly dimsIncludingBatch: number[];\n\n  constructor(args: PermuteLayerArgs) {\n    super(args);\n    if (args.dims == null) {\n      throw new Error(\n          'Required configuration field `dims` is missing during Permute ' +\n          'constructor call.');\n    }\n    if (!Array.isArray(args.dims)) {\n      throw new Error(\n          'Permute constructor requires `dims` to be an Array, but received ' +\n          `${args.dims} instead.`);\n    }\n\n    // Check the validity of the permutation indices.\n    const expectedSortedIndices = range(1, args.dims.length + 1);\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error(\n          'Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n          ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    this.dims = args.dims;\n    this.dimsIncludingBatch = [0].concat(this.dims);\n    this.inputSpec = [new InputSpec({ndim: this.dims.length + 1})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    this.dims.forEach((dim: number, i: number) => {\n      outputShape[i + 1] = (inputShape as Shape)[dim];\n    });\n    return outputShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      dims: this.dims,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Permute);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport {notEqual, serialization, Tensor, tidy, zerosLike} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, Shape} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n\nexport interface EmbeddingLayerArgs extends LayerArgs {\n  /**\n   * Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.\n   */\n  inputDim: number;\n  /**\n   * Integer >= 0. Dimension of the dense embedding.\n   */\n  outputDim: number;\n  /**\n   * Initializer for the `embeddings` matrix.\n   */\n  embeddingsInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Regularizer function applied to the `embeddings` matrix.\n   */\n  embeddingsRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Constraint function applied to the `embeddings` matrix.\n   */\n  embeddingsConstraint?: ConstraintIdentifier|Constraint;\n  /**\n   * Whether the input value 0 is a special \"padding\" value that should be\n   * masked out. This is useful when using recurrent layers which may take\n   * variable length input.\n   *\n   * If this is `True` then all subsequent layers in the model need to support\n   * masking or an exception will be raised. If maskZero is set to `True`, as a\n   * consequence, index 0 cannot be used in the vocabulary (inputDim should\n   * equal size of vocabulary + 1).\n   */\n  maskZero?: boolean;\n  /**\n   * Length of input sequences, when it is constant.\n   *\n   * This argument is required if you are going to connect `flatten` then\n   * `dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed).\n   */\n  inputLength?: number|number[];\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n */\nexport class Embedding extends Layer {\n  static className = 'Embedding';\n  private inputDim: number;\n  private outputDim: number;\n  private embeddingsInitializer: Initializer;\n  private maskZero: boolean;\n  private inputLength: number|number[];\n\n  private embeddings: LayerVariable = null;\n\n  readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier =\n      'randomUniform';\n  private readonly embeddingsRegularizer?: Regularizer;\n  private readonly embeddingsConstraint?: Constraint;\n\n  constructor(args: EmbeddingLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape =\n            [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    this.outputDim = args.outputDim;\n    this.embeddingsInitializer = getInitializer(\n        args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    this.embeddings = this.addWeight(\n        'embeddings', [this.inputDim, this.outputDim], this.dtype,\n        this.embeddingsInitializer, this.embeddingsRegularizer, true,\n        this.embeddingsConstraint);\n    this.built = true;\n  }\n\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {}\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs as Tensor));\n      }\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens: number[] = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(\n          `\"inputLength\" is ${this.inputLength}, but received ` +\n          `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n          throw new ValueError(\n              `\"inputLength\" is ${this.inputLength}, but received ` +\n              `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output = K.gather(this.embeddings.read(), input.as1D());\n      return output.reshape(\n          getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Embedding);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from '../backend/state';\nimport * as K from '../backend/tfjs_backend';\nimport {Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {l2Normalize} from '../losses';\nimport {Kwargs, Shape} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport abstract class Merge extends Layer {\n  protected reshapeRequired: boolean;\n\n  constructor(args?: LayerArgs) {\n    super(args || {});\n    this.supportsMasking = true;\n  }\n\n  /**\n   * Logic for merging multiple tensors, to be overridden by subclasses.\n   * @param inputs\n   */\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    throw new NotImplementedError();\n  }\n\n  /**\n   * Computes the shape of the result of an elementwise operation.\n   *\n   * @param shape1: Shape of the first tensor.\n   * @param shape2: Shape of the second tensor.\n   * @returns Expected output shape when an elementwise operation is carried\n   *   out on 2 tensors with shapes `shape1` and `shape2`.\n   * @throws ValueError: If `shape1` and `shape2` are not compatible for\n   *   element-wise operations.\n   */\n  private computeElementwiseOpOutputShape(shape1: Shape, shape2: Shape): Shape {\n    if (shape1 == null || shape2 == null) {\n      return null;\n    } else if (shape1.length < shape2.length) {\n      return this.computeElementwiseOpOutputShape(shape2, shape1);\n    } else if (shape2.length === 0) {\n      return shape1;\n    }\n    const outputShape: Shape = shape1.slice(0, shape1.length - shape2.length);\n    for (let k = 0; k < shape2.length; ++k) {\n      const i = shape1[shape1.length - shape2.length + k];\n      const j = shape2[k];\n      if (i == null || j == null || i < 0 || j < 0) {\n        outputShape.push(null);\n      } else if (i === 1) {\n        outputShape.push(j);\n      } else if (j === 1) {\n        outputShape.push(i);\n      } else {\n        if (i !== j) {\n          throw new ValueError(\n              'Operands could not be broadcast together with shapes ' +\n              JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n        }\n        outputShape.push(i);\n      }\n    }\n    return outputShape;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.\n    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n      // Make sure that inputShape is an Array of shape.\n      inputShape = [getExactlyOneShape(inputShape)];\n    }\n    inputShape = inputShape as Shape[];\n    if (inputShape.length < 2) {\n      throw new ValueError(\n          'A merge layer should be called on an Array of at least 2 inputs.' +\n          ` Got ${inputShape.length} input(s).`);\n    }\n\n    // Make sure that there is at most one unique batch size among the input\n    // shapes.\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length > 1) {\n      throw new ValueError(\n          `Can not merge tensors with different batch sizes. ` +\n          `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n    }\n\n    let outputShape: Shape =\n        inputShape[0] == null ? null : inputShape[0].slice(1);\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n    // If the inputs have different ranks, we have to reshape them to make them\n    // broadcastable.\n    const allRanks = inputShape.map(shape => shape.length);\n    if (inputShape.indexOf(null) === -1 &&\n        generic_utils.unique(allRanks).length === 1) {\n      this.reshapeRequired = false;\n    } else {\n      this.reshapeRequired = true;\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (this.reshapeRequired) {\n        const reshapedInputs: Tensor[] = [];\n        const inputDims = inputs.map(input => input.rank);\n        if (inputDims.indexOf(null) === -1) {\n          // If ranks of all inputs are available, we simply expand each of them\n          // at axis=1 until all of them have the same rank.\n          const maxNDim = mathUtils.max(inputDims);\n          for (let x of inputs) {\n            const xNDim = x.rank;\n            for (let k = 0; k < maxNDim - xNDim; ++k) {\n              x = K.expandDims(x, 1);\n            }\n            reshapedInputs.push(x);\n          }\n          return this.mergeFunction(reshapedInputs);\n        } else {\n          // Transpose all inputs so that batch size is the last dimension.\n          // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n          let transposed = false;\n          for (const x of inputs) {\n            const xNDim = x.rank;\n            if (xNDim == null) {\n              const xShape = x.shape;\n              const batchSize = xShape[0];\n              const newShape = xShape.slice(1).concat([batchSize]);\n              let xTransposed = x.reshape(\n                  [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n              xTransposed = tfc.transpose(xTransposed, [1, 0]);\n              xTransposed = xTransposed.reshape(newShape);\n              reshapedInputs.push(xTransposed);\n              transposed = true;\n            } else if (xNDim > 1) {\n              const dims = mathUtils.range(1, xNDim).concat([0]);\n              reshapedInputs.push(tfc.transpose(x, dims));\n              transposed = true;\n            } else {\n              // We don't transpose inputs if they are 1D vectors or scalars.\n              reshapedInputs.push(x);\n            }\n          }\n          let y = this.mergeFunction(reshapedInputs);\n          const yNDim = y.rank;\n          if (transposed) {\n            // If inputs have been transposed, we have to transpose the output\n            // too.\n            if (yNDim == null) {\n              const yShape = y.shape;\n              const yNDim = yShape.length;\n              const batchSize = yShape[yNDim - 1];\n              const newShape =\n                  [batchSize].concat(yShape.slice(0, yShape.length - 1));\n              y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0])\n                      .reshape(newShape);\n            } else if (yNDim > 1) {\n              const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n              y = tfc.transpose(y, dims);\n            }\n          }\n          return y;\n        }\n      } else {\n        return this.mergeFunction(inputs);\n      }\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape[];\n    let outputShape: Shape;\n    if (inputShape[0] == null) {\n      outputShape = null;\n    } else {\n      outputShape = inputShape[0].slice(1);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length === 1) {\n      outputShape = batchSizes.concat(outputShape);\n    } else {\n      outputShape = [null].concat(outputShape);\n    }\n    return outputShape;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return tfc.tidy(() => {\n      if (mask == null) {\n        return null;\n      }\n      if (!Array.isArray(mask)) {\n        throw new ValueError('`mask` should be an Array');\n      }\n      if (!Array.isArray(inputs)) {\n        throw new ValueError('`inputs` should be an Array');\n      }\n      if (mask.length !== inputs.length) {\n        throw new ValueError(\n            `The Array 'inputs' and 'mask' are expected to have the same ` +\n            `length, but have different lengths ` +\n            `(${inputs.length} vs ${mask.length})`);\n      }\n      if (mask.every(m => m == null)) {\n        return null;\n      }\n      mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n      let output = mask[0];\n      for (let i = 1; i < mask.length - 1; ++i) {\n        output = tfc.logicalAnd(output, mask[i]);\n      }\n      return output;\n    });\n  }\n}\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\nexport class Add extends Merge {\n  static className = 'Add';\n  constructor(args?: LayerArgs) {\n    super(args as LayerArgs);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Add);\n\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Add({});\n    return layer.apply(config as SymbolicTensor[] | Tensor[]) as\n        SymbolicTensor |\n        Tensor;\n  } else {\n    return new Add(config);\n  }\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n */\nexport class Multiply extends Merge {\n  static className = 'Multiply';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.mul(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Multiply);\n\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Multiply({});\n    return layer.apply(config as SymbolicTensor[] | Tensor[]) as\n        SymbolicTensor |\n        Tensor;\n  } else {\n    return new Multiply(config);\n  }\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\nexport class Average extends Merge {\n  static className = 'Average';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return tfc.mul(getScalar(1 / inputs.length), output);\n    });\n  }\n}\nserialization.registerClass(Average);\n\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Average({});\n    return layer.apply(config as SymbolicTensor[] | Tensor[]) as\n        SymbolicTensor |\n        Tensor;\n  } else {\n    return new Average(config);\n  }\n}\n\n/**\n * Layer that computes the element-wise maximum an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\nexport class Maximum extends Merge {\n  static className = 'Maximum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.maximum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Maximum);\n\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Maximum({});\n    return layer.apply(config as SymbolicTensor[] | Tensor[]) as\n        SymbolicTensor |\n        Tensor;\n  } else {\n    return new Maximum(config);\n  }\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\nexport class Minimum extends Merge {\n  static className = 'Minimum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.minimum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Minimum);\n\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Minimum({});\n    return layer.apply(config as SymbolicTensor[] | Tensor[]) as\n        SymbolicTensor |\n        Tensor;\n  } else {\n    return new Minimum(config);\n  }\n}\n\nexport interface ConcatenateLayerArgs extends LayerArgs {\n  /**\n   * Axis along which to concatenate.\n   */\n  axis?: number;\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n */\nexport class Concatenate extends Merge {\n  static className = 'Concatenate';\n  readonly DEFAULT_AXIS = -1;\n  private readonly axis: number;\n\n  constructor(args?: ConcatenateLayerArgs) {\n    super(args);\n    if (args == null) {\n      args = {};\n    }\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.]\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n        inputShape.length === 1) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of at least 2 ' +\n          'inputs');\n    }\n    inputShape = inputShape as Shape[];\n\n    let allNoneShape = true;\n    for (const shape of inputShape) {\n      if (shape != null) {\n        allNoneShape = false;\n        break;\n      }\n    }\n    if (allNoneShape) {\n      return;\n    }\n\n    const shapeSet: Shape[] = [];\n    for (let i = 0; i < inputShape.length; ++i) {\n      const shapeWithoutConcatAxis = inputShape[i].slice();\n      shapeWithoutConcatAxis.splice(this.axis, 1);\n      let exists = false;\n      for (const shape of shapeSet) {\n        if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists) {\n        shapeSet.push(shapeWithoutConcatAxis);\n      }\n    }\n    if (shapeSet.length > 1) {\n      throw new ValueError(\n          'A `Concatenate` layer requires inputs with matching shapes ' +\n          'except for the concat axis. Got input shapes: ' +\n          JSON.stringify(inputShape));\n    }\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      return K.concatenate(inputs, this.axis);\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of inputs.');\n    }\n    const inputShapes = inputShape as Shape[];\n    const outputShape = inputShapes[0].slice();\n    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n    // Porting Note: the line above is because TypeScript doesn't support\n    //   negative indices.\n    for (const shape of inputShapes.slice(1)) {\n      if (outputShape[axis] == null || shape[axis] == null) {\n        outputShape[axis] = null;\n        break;\n      }\n      outputShape[axis] += shape[axis];\n    }\n    return outputShape;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    if (mask == null) {\n      return null;\n    }\n    if (!Array.isArray(mask)) {\n      throw new ValueError('`mask` should be an array for Concatenate');\n    }\n    if (!Array.isArray(inputs)) {\n      throw new ValueError('`inputs` should be an array for Concatenate');\n    }\n    if (mask.length !== inputs.length) {\n      throw new ValueError(\n          `Mismatch in the length of mask (${mask.length}) ` +\n          `and the legnth of inputs (${inputs.length})`);\n    }\n    return tfc.tidy(() => {\n      let allNullMasks = true;\n      mask.forEach(m => {\n        if (m != null) {\n          allNullMasks = false;\n          return;\n        }\n      });\n      if (allNullMasks) {\n        return null;\n      }\n      const outputMasks: Tensor[] = [];\n      for (let i = 0; i < inputs.length; ++i) {\n        if (mask[i] == null) {\n          // Input is unmasked. Append all 1's to masks.\n          outputMasks.push(tfc.onesLike(inputs[i]).asType('bool'));\n        } else if (mask[i].rank < inputs[i].rank) {\n          // Mask is smaller than the input, expand it.\n          outputMasks.push(tfc.expandDims(mask[i], -1));\n        } else {\n          outputMasks.push(mask[i]);\n        }\n      }\n      const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n      return tfc.all(concatenatedMasks, -1, false);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axis': this.axis,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Concatenate);\n\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config?: SymbolicTensor[]|Tensor[]|\n                            ConcatenateLayerArgs): Layer|SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Concatenate({});\n    return layer.apply(config as SymbolicTensor[] | Tensor[]) as\n        SymbolicTensor |\n        Tensor;\n  } else {\n    return new Concatenate(config);\n  }\n}\n\nexport interface DotLayerArgs extends LayerArgs {\n  /**\n   * Axis or axes along which the dot product will be taken.\n   *\n   * Integer or an Array of integers.\n   */\n  axes: number|[number, number];\n\n  /**\n   * Whether to L2-normalize samples along the dot product axis\n   * before taking the dot product.\n   *\n   * If set to `true`, the output of the dot product isthe cosine\n   * proximity between the two samples.\n   */\n  normalize?: boolean;\n}\n\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis: number, dim: number): number {\n  while (axis < 0) {\n    axis += dim;\n  }\n  return axis;\n}\n\nfunction batchDot(x: Tensor, y: Tensor, axes: number|[number, number]): Tensor {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError(\n        'batchDot is not implemented for tensors of 4D or higher rank yet');\n  }\n  tfc.util.assert(\n      x.shape.length >= 2,\n      `batchDot requires the rank of x to be >= 2, ` +\n          `but got ${x.shape.length}`);\n  tfc.util.assert(\n      x.shape.length >= 2,\n      `batchDot requires the rank of y to be >= 2, ` +\n          `but got ${y.shape.length}`);\n\n  if (typeof axes === 'number') {\n    axes = [axes, axes];\n  }\n\n  if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n    throw new NotImplementedError(\n        'batchDot is not implemented for complex64-type Tensors yet.');\n  }\n\n  const xNDim = x.shape.length;\n  const yNDim = y.shape.length;\n  if (axes == null) {\n    // Behave like batchMatmul by default.\n    axes = [xNDim - 1, yNDim - 2];\n  }\n  const axesArray = axes as [number, number];\n\n  return tfc.tidy(() => {\n    let diff: number;\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      y = y.reshape(y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      x = x.reshape(x.shape.concat(diffShape));\n    } else {\n      diff = 0;\n    }\n\n    let out: Tensor;\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = x.mulStrict(y).sum(axesArray[0]);\n      } else {\n        out = x.transpose([1, 0]).mulStrict(y).sum(axesArray[1]);\n      }\n    } else {\n      const adjX = axesArray[0] === x.shape.length - 1 ? null : true;\n      const adjY = axesArray[1] === y.shape.length - 1 ? true : null;\n      out = x.matMul(y, adjX, adjY);\n    }\n\n    if (diff > 0) {\n      let idx: number;\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n      const squeezeAxes: number[] = [];\n      for (let i = idx; i < idx + diff; ++i) {\n        squeezeAxes.push(i);\n      }\n      out = out.squeeze(squeezeAxes);\n    }\n    if (out.shape.length === 1) {\n      out = out.expandDims(1);\n    }\n    return out;\n  });\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n */\nexport class Dot extends Merge {\n  static className = 'Dot';\n\n  private axes: number|[number, number];\n  private normalize: boolean;\n\n  constructor(args: DotLayerArgs) {\n    super(args);\n    this.axes = args.axes;\n    this.normalize = args.normalize == null ? false : args.normalize;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = inputShape[0] as Shape;\n    const shape2 = inputShape[1] as Shape;\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    if (shape1[axes[0]] !== shape2[axes[1]]) {\n      throw new ValueError(\n          `Dimension incompatibility: ` +\n          `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n    }\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    if (inputs.length !== 2) {\n      throw new ValueError(\n          'A `Dot` layer must be called on exactly 2 inputs, ' +\n          `but received ${inputs.length} input(s).`);\n    }\n\n    let x1 = inputs[0];\n    let x2 = inputs[1];\n    let axes: [number, number];\n    if (!Array.isArray(this.axes)) {\n      axes = [\n        interpretAxis(this.axes, x1.shape.length),\n        interpretAxis(this.axes, x2.shape.length)\n      ];\n    } else {\n      axes = this.axes.map(\n                 (axis, i) => interpretAxis(\n                     axis, inputs[i].shape.length)) as [number, number];\n    }\n    if (this.normalize) {\n      x1 = l2Normalize(x1, axes[0]);\n      x2 = l2Normalize(x2, axes[1]);\n    }\n    return batchDot(x1, x2, axes);\n  }\n\n  private interpretAxes(shape1: Shape, shape2: Shape): number[] {\n    let axes: number[];\n    if (!Array.isArray(this.axes)) {\n      // `this.axes` is a single integer.\n      axes = [\n        interpretAxis(this.axes, shape1.length),\n        interpretAxis(this.axes, shape2.length)\n      ];\n    } else {\n      // `this.axes` is an Array of integers.\n      axes = this.axes;\n    }\n    return axes;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = (inputShape[0] as Shape).slice();\n    const shape2 = (inputShape[1] as Shape).slice();\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    shape1.splice(axes[0], 1);\n    shape2.splice(axes[1], 1);\n    shape2.splice(0, 1);\n    const outputShape = shape1.concat(shape2);\n    if (outputShape.length === 1) {\n      outputShape.push(1);\n    }\n    return outputShape;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return null;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axes': this.axes,\n      'normalize': this.normalize\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dot);\n\n// TODO(cais): Add functional interfaces for the merge layers.\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Normalization layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from '../backend/state';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, Shape} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(\n    x: Tensor, mean: Tensor, variance: Tensor, beta?: Tensor, gamma?: Tensor,\n    epsilon = 1e-3): Tensor {\n  let out: Tensor;\n  if (x.rank === 2) {\n    out = tfc.batchNormalization2d(\n        x as Tensor2D, mean as Tensor2D | Tensor1D,\n        variance as Tensor2D | Tensor1D, epsilon, gamma as Tensor2D | Tensor1D,\n        beta as Tensor2D | Tensor1D);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNormalization3d(\n        x as Tensor3D, mean as Tensor3D | Tensor1D,\n        variance as Tensor3D | Tensor1D, epsilon, gamma as Tensor3D | Tensor1D,\n        beta as Tensor3D | Tensor1D);\n  } else if (x.rank === 4) {\n    out = tfc.batchNormalization4d(\n        x as Tensor4D, mean as Tensor4D | Tensor1D,\n        variance as Tensor4D | Tensor1D, epsilon, gamma as Tensor4D | Tensor1D,\n        beta as Tensor4D | Tensor1D);\n  } else {\n    throw new NotImplementedError(\n        `batchNormalization is not implemented for array of rank ${x.rank} ` +\n        `yet`);\n  }\n  return out;\n}\n\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const normed =\n               batchNormalization(x, mean, variance, beta, gamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const targetShape: number[] = [];\n           for (const axis of math_utils.range(0, x.rank)) {\n             if (reductionAxes.indexOf(axis) !== -1) {\n               targetShape.push(1);\n             } else {\n               targetShape.push(x.shape[axis]);\n             }\n           }\n           const broadcastMean = mean.reshape(targetShape);\n           const broadcastVariance = variance.reshape(targetShape);\n           const broadcastGamma =\n               gamma == null ? null : gamma.reshape(targetShape);\n           const broadcastBeta =\n               beta == null ? null : beta.reshape(targetShape);\n           const normed = batchNormalization(\n               x, broadcastMean, broadcastVariance, broadcastBeta,\n               broadcastGamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  if (util.arraysEqual(\n          reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  }\n}\n\nexport interface BatchNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The integer axis that should be normalized (typically the features axis).\n   * Defaults to -1.\n   *\n   * For instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\n   * set `axis=1` in `batchNormalization`.\n   */\n  axis?: number;\n\n  /**\n   * Momentum of the moving average. Defaults to 0.99.\n   */\n  momentum?: number;\n\n  /**\n   * Small float added to the variance to avoid dividing by zero. Defaults to\n   * 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Defaults to `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear (also e.g. `nn.relu`),\n   * this can be disabled since the scaling will be done by the next layer.\n   * Defaults to `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   *  Defaults to 'zeros'.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   *  Defaults to `ones`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving mean.\n   * Defaults to `zeros`\n   */\n  movingMeanInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving variance.\n   *  Defaults to 'Ones'.\n   */\n  movingVarianceInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the beta weight.\n   */\n  betaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for gamma weight.\n   */\n  gammaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer for the beta weight.\n   */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer for the gamma weight.\n   */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n */\nexport class BatchNormalization extends Layer {\n  static className = 'BatchNormalization';\n  private readonly axis: number;\n  private readonly momentum: number;\n  private readonly epsilon: number;\n  private readonly center: boolean;\n  private readonly scale: boolean;\n  private readonly betaInitializer: Initializer;\n  private readonly gammaInitializer: Initializer;\n  private readonly movingMeanInitializer: Initializer;\n  private readonly movingVarianceInitializer: Initializer;\n  private readonly betaConstraint: Constraint;\n  private readonly gammaConstraint: Constraint;\n  private readonly betaRegularizer: Regularizer;\n  private readonly gammaRegularizer: Regularizer;\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n  private movingMean: LayerVariable;\n  private movingVariance: LayerVariable;\n\n  constructor(args?: BatchNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer =\n        getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer =\n        getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(\n          `Axis ${axis} of input tensor should have a defined dimension but ` +\n          `the layer received an input with shape ` +\n          `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec =\n        [new InputSpec({ndim: inputShape.length, axes: {[axis]: dim}})];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', shape, null, this.gammaInitializer, this.gammaRegularizer,\n          true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', shape, null, this.betaInitializer, this.betaRegularizer, true,\n          this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\n        'moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\n        'moving_variance', shape, null, this.movingVarianceInitializer, null,\n        false);\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(\n          sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference: () => Tensor = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean =\n              this.movingMean.read().reshape(broadcastShape);\n          const broadcastMovingVariance =\n              this.movingVariance.read().reshape(broadcastShape);\n          const broadcastBeta =\n              this.center ? this.beta.read().reshape(broadcastShape) : null;\n          const broadcastGamma =\n              this.scale ? this.gamma.read().reshape(broadcastShape) : null;\n          return batchNormalization(\n              input, broadcastMovingMean, broadcastMovingVariance,\n              broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(\n              input, this.movingMean.read(), this.movingVariance.read(),\n              this.beta == null ? null : this.beta.read(),\n              this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(\n          input, this.gamma.read(), this.beta.read(), reductionAxes,\n          this.epsilon);\n\n      const doMovingAverage =\n          (variable: LayerVariable, value: Tensor, momentum: number): void => {\n            tfc.tidy(() => {\n              const decay = getScalar(1.0).sub(getScalar(momentum));\n              const origValue = variable.read();\n              const updateDelta = origValue.sub(value).mul(decay);\n              variable.write(origValue.sub(updateDelta));\n            });\n          };\n\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n\n      return normedTraining;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer:\n          serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(BatchNormalization);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport {DataFormat} from '../common';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {Kwargs, Shape} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\n\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x: Tensor, padding?: [number, number]): Tensor {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 3-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n    if (padding.length !== 2) {\n      throw new ValueError(\n          `temporalPadding expects input padding pattern to be a length-2 ` +\n          `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern: Array<[number, number]> = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(\n    x: Tensor, padding?: [[number, number], [number, number]],\n    dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 4-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n    if (padding.length !== 2 || padding[0].length !== 2 ||\n        padding[1].length !== 2) {\n      throw new ValueError(\n          'spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n          'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(\n          `Unknown data format: ${dataFormat}. ` +\n          `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern: Array<[number, number]>;\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\n\nexport interface ZeroPadding2DLayerArgs extends LayerArgs {\n  /**\n   * Integer, or `Array` of 2 integers, or `Array` of 2 `Array`s, each of\n   * which is an `Array` of 2 integers.\n   * - If integer, the same symmetric padding is applied to width and height.\n   * - If Array` of 2 integers, interpreted as two different symmetric values\n   *   for height and width:\n   *   `[symmetricHeightPad, symmetricWidthPad]`.\n   * - If `Array` of 2 `Array`s, interpreted as:\n   *   `[[topPad, bottomPad], [leftPad, rightPad]]`.\n   */\n  padding?: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * One of `'channelsLast'` (default) and `'channelsFirst'`.\n   *\n   * The ordering of the dimensions in the inputs.\n   * `channelsLast` corresponds to inputs with shape\n   * `[batch, height, width, channels]` while `channelsFirst`\n   * corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n */\nexport class ZeroPadding2D extends Layer {\n  static className = 'ZeroPadding2D';\n  readonly dataFormat: DataFormat;\n  readonly padding: [[number, number], [number, number]];\n\n  constructor(args?: ZeroPadding2DLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.dataFormat =\n        args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n    // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding =\n          [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding as [number, number] |\n          [[number, number], [number, number]];\n      if (args.padding.length !== 2) {\n        throw new ValueError(\n            `ZeroPadding2D expects padding to be a length-2 array, but ` +\n            `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding: [number, number];\n      let widthPadding: [number, number];\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0] as number, args.padding[0] as number];\n        widthPadding = [args.padding[1] as number, args.padding[1] as number];\n      } else {\n        args.padding = args.padding as [[number, number], [number, number]];\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects height padding to be a length-2 array, ` +\n              `but received a length-${args.padding[0].length} array.`);\n        }\n        heightPadding = args.padding[0] as [number, number];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects width padding to be a length-2 array, ` +\n              `but received a length-${args.padding[1].length} array.`);\n        }\n        widthPadding = args.padding[1] as [number, number];\n      }\n      this.padding = [heightPadding, widthPadding];\n    }\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n\n    let rows: number;\n    let cols: number;\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(\n        () => spatial2dPadding(\n            getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ZeroPadding2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor3D, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode, checkPoolMode, DataFormat, PaddingMode, PoolMode} from '../common';\nimport {InputSpec} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {Kwargs, Shape} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\nimport {preprocessConv2DInput} from './convolutional';\n\n\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(\n    x: Tensor, poolSize: [number, number], strides?: [number, number],\n    padding?: PaddingMode, dataFormat?: DataFormat,\n    poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n    // dataFormat as an input argument.\n    x = preprocessConv2DInput(x, dataFormat);  // x is NHWC after preprocessing.\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      // TODO(cais): Rank check?\n      y = tfc.maxPool(x as Tensor4D, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      // TODO(cais): Check the dtype and rank of x and give clear error message\n      //   if those are incorrect.\n      y = tfc.avgPool(\n          // TODO(cais): Rank check?\n          x as Tensor3D | Tensor4D, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);  // NHWC -> NCHW.\n    }\n    return y;\n  });\n}\n\n\nexport interface Pooling1DLayerArgs extends LayerArgs {\n  /**\n   * Size of the window to pool over, should be an integer.\n   */\n  poolSize?: number;\n  /**\n   * Period at which to sample the pooled values.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number;\n  /** How to fill in data that's not an integer multiple of poolSize. */\n  padding?: PaddingMode;\n}\n\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport abstract class Pooling1D extends Layer {\n  protected readonly poolSize: [number];\n  protected readonly strides: [number];\n  protected readonly padding: PaddingMode;\n\n  /**\n   *\n   * @param args Parameters for the Pooling layer.\n   *\n   * config.poolSize defaults to 2.\n   */\n  constructor(args: Pooling1DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n    super(args);\n    if (typeof args.poolSize === 'number') {\n      this.poolSize = [args.poolSize];\n    } else if (\n        Array.isArray(args.poolSize) &&\n        (args.poolSize as number[]).length === 1 &&\n        typeof (args.poolSize as number[])[0] === 'number') {\n      this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(\n          `poolSize for 1D convolutional layer must be a number or an ` +\n          `Array of a single number, but received ` +\n          `${JSON.stringify(args.poolSize)}`);\n    }\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else {\n      if (typeof args.strides === 'number') {\n        this.strides = [args.strides];\n      } else if (\n          Array.isArray(args.strides) &&\n          (args.strides as number[]).length === 1 &&\n          typeof (args.strides as number[])[0] === 'number') {\n        this.strides = args.strides;\n      } else {\n        throw new ValueError(\n            `strides for 1D convolutional layer must be a number or an ` +\n            `Array of a single number, but received ` +\n            `${JSON.stringify(args.strides)}`);\n      }\n    }\n\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const length = convOutputLength(\n        inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n    return [inputShape[0], length, inputShape[2]];\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Add dummy last dimension.\n      inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n      const output = this.poolingFunction(\n          getExactlyOneTensor(inputs), [this.poolSize[0], 1],\n          [this.strides[0], 1], this.padding, 'channelsLast');\n      // Remove dummy last dimension.\n      return tfc.squeeze(output, [2]);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n */\nexport class MaxPooling1D extends Pooling1D {\n  static className = 'MaxPooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling1D);\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n */\nexport class AveragePooling1D extends Pooling1D {\n  static className = 'AveragePooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling1D);\n\nexport interface Pooling2DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [vertical, horizontal].\n   * Expects an integer or an array of 2 integers.\n   *\n   * For example, `[2, 2]` will halve the input in both spatial dimension.\n   * If only one integer is specified, the same window length\n   * will be used for both dimensions.\n   */\n  poolSize?: number|[number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 2 integers. Integer, tuple of 2 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport abstract class Pooling2D extends Layer {\n  protected readonly poolSize: [number, number];\n  protected readonly strides: [number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling2DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(\n            `If the strides property of a 2D pooling layer is an Array, ` +\n            `it is expected to have a length of 2, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides];\n    }\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    rows =\n        convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n    cols =\n        convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooleRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooleRows, pooledCols]`\n */\nexport class MaxPooling2D extends Pooling2D {\n  static className = 'MaxPooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling2D);\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooleRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooleRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n */\nexport class AveragePooling2D extends Pooling2D {\n  static className = 'AveragePooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling2D);\n\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport abstract class GlobalPooling1D extends Layer {\n  constructor(args: LayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], inputShape[2]];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n  static className = 'GlobalAveragePooling1D';\n  constructor(args: LayerArgs) {\n    super(args);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.mean(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling1D);\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n  static className = 'GlobalMaxPooling1D';\n  constructor(args: LayerArgs) {\n    super(args);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.max(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling1D);\n\nexport interface GlobalPooling2DLayerArgs extends LayerArgs {\n  /**\n   * One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n   *\n   * The ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\n   * to inputs with shape `[batch, height, width, channels[` while\n   * `CHANNEL_FIRST` corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport abstract class GlobalPooling2D extends Layer {\n  protected dataFormat: DataFormat;\n  constructor(args: GlobalPooling2DLayerArgs) {\n    super(args);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape;\n    if (this.dataFormat === 'channelsLast') {\n      return [inputShape[0], inputShape[3]];\n    } else {\n      return [inputShape[0], inputShape[1]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n  static className = 'GlobalAveragePooling2D';\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.mean(input, [1, 2]);\n      } else {\n        return tfc.mean(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling2D);\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n  static className = 'GlobalMaxPooling2D';\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.max(input, [1, 2]);\n      } else {\n        return tfc.max(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Activation, ActivationIdentifier, getActivation, serializeActivation} from '../activations';\nimport {getScalar} from '../backend/state';\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, SymbolicTensor} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, Ones, serializeInitializer} from '../initializers';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, RnnStepFunction, Shape} from '../types';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes} from '../utils/types_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\nimport {deserialize} from './serialization';\n\n\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(\n    inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    initialState: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    constants: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    numConstants?: number): {\n  inputs: Tensor|SymbolicTensor,\n  initialState: Tensor[]|SymbolicTensor[],\n  constants: Tensor[]|SymbolicTensor[]\n} {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\n          'When inputs is an array, neither initialState or constants ' +\n          'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x: Tensor|Tensor[]|SymbolicTensor|\n                        SymbolicTensor[]): Tensor[]|SymbolicTensor[] {\n    if (x == null || Array.isArray(x)) {\n      return x as Tensor[] | SymbolicTensor[];\n    } else {\n      return [x] as Tensor[] | SymbolicTensor[];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n\n  return {inputs, initialState, constants};\n}\n\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(\n    stepFunction: RnnStepFunction, inputs: Tensor, initialStates: Tensor[],\n    goBackwards = false, mask?: Tensor, constants?: Tensor[], unroll = false,\n    needPerStepOutputs = false): [Tensor, Tensor, Tensor[]] {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError(\n          'The rnn() functoin of the deeplearn.js backend does not support ' +\n          'constants yet.');\n    }\n\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn(\n          'Backend rnn(): the unroll = true option is not applicable to the ' +\n          'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = mask.asType('bool').asType('float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n    const perStepOutputs: Tensor[] = [];\n    let lastOutput: Tensor;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks: Tensor[];\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.onesLike(stepMask).sub(stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = stepOutputs[0].mul(stepMask).addStrict(\n              states[0].mul(negStepMask));\n          const newStates = states.map((state, i) => {\n            return stepOutputs[1][i].mul(stepMask).addStrict(\n                state.mul(negStepMask));\n          });\n          return {output, newStates};\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs: Tensor;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states] as [Tensor, Tensor, Tensor[]];\n  });\n}\n\nexport interface BaseRNNLayerConfig extends LayerArgs {\n  /**\n   * A RNN cell instance. A RNN cell is a class that has:\n   *   - a `call()` method, which takes `[Tensor, Tensor]` as the\n   *     first input argument. The first item is the input at time t, and\n   *     second item is the cell state at time t.\n   *     The `call()` method returns `[outputAtT, statesAtTPlus1]`.\n   *     The `call()` method of the cell can also take the argument `constants`,\n   *     see section \"Note on passing external constants\" below.\n   *     Porting Node: PyKeras overrides the `call()` signature of RNN cells,\n   *       which are Layer subtypes, to accept two arguments. tfjs-layers does\n   *       not do such overriding. Instead we preseve the `call()` signature,\n   *       which due to its `Tensor|Tensor[]` argument and return value, is\n   *       flexible enough to handle the inputs and states.\n   *   - a `stateSize` attribute. This can be a single integer (single state)\n   *     in which case it is the size of the recurrent state (which should be\n   *     the same as the size of the cell output). This can also be an Array of\n   *     integers (one size per state). In this case, the first entry\n   *     (`stateSize[0]`) should be the same as the size of the cell output.\n   * It is also possible for `cell` to be a list of RNN cell instances, in which\n   * case the cells get stacked on after the other in the RNN, implementing an\n   * efficient stacked RNN.\n   */\n  cell?: RNNCell|RNNCell[];\n\n  /**\n   * Whether to return the last output in the output sequence, or the full\n   * sequence.\n   */\n  returnSequences?: boolean;\n\n  /**\n   * Whether to return the last state in addition to the output.\n   */\n  returnState?: boolean;\n\n  /**\n   * If `true`, process the input sequence backwards and return the reversed\n   * sequence (default: `false`).\n   */\n  goBackwards?: boolean;\n\n  /**\n   * If `true`, the last state for each sample at index i in a batch will be\n   * used as initial state of the sample of index i in the following batch\n   * (default: `false`).\n   *\n   * You can set RNN layers to be \"stateful\", which means that the states\n   * computed for the samples in one batch will be reused as initial states\n   * for the samples in the next batch. This assumes a one-to-one mapping\n   * between samples in different successive batches.\n   *\n   * To enable \"statefulness\":\n   *   - specify `stateful: true` in the layer constructor.\n   *   - specify a fixed batch size for your model, by passing\n   *     - if sequential model:\n   *       `batchInputShape: [...]` to the first layer in your model.\n   *     - else for functional model with 1 or more Input layers:\n   *       `batchShape: [...]` to all the first layers in your model.\n   *     This is the expected shape of your inputs\n   *     *including the batch size*.\n   *     It should be a tuple of integers, e.g., `[32, 10, 100]`.\n   *   - specify `shuffle: false` when calling `Model.fit()`.\n   *\n   * To reset the state of your model, call `resetStates()` on either the\n   * specific layer or on the entire model.\n   */\n  stateful?: boolean;\n  // TODO(cais): Explore whether we can warn users when they fail to set\n  //   `shuffle: false` when training a model consisting of stateful RNNs\n  //   and any stateful Layers in general.\n\n  /**\n   * If `true`, the network will be unrolled, else a symbolic loop will be\n   * used. Unrolling can speed-up a RNN, although it tends to be more memory-\n   * intensive. Unrolling is only suitable for short sequences (default:\n   * `false`).\n   * Porting Note: tfjs-layers has an imperative backend. RNNs are executed with\n   *   normal TypeScript control flow. Hence this property is inapplicable and\n   *   ignored in tfjs-layers.\n   */\n  unroll?: boolean;\n\n  /**\n   * Dimensionality of the input (integer).\n   *   This option (or alternatively, the option `inputShape`) is required when\n   *   this layer is used as the first layer in a model.\n   */\n  inputDim?: number;\n\n  /**\n   * Length of the input sequences, to be specified when it is constant.\n   * This argument is required if you are going to connect `Flatten` then\n   * `Dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed). Note that if the recurrent layer is not the first layer in\n   * your model, you would need to specify the input length at the level of the\n   * first layer (e.g., via the `inputShape` option).\n   */\n  inputLength?: number;\n}\n\n/**\n * RNNLayerConfig is identical to BaseRNNLayerConfig, except it makes the\n * `cell` property required. This interface is  to be used with constructors\n * of concrete RNN layer sbutypes.\n */\nexport interface RNNLayerArgs extends BaseRNNLayerConfig {\n  cell: RNNCell|RNNCell[];\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to conditon the cell transformation on additional static inputs\n *   (not changing over time), a.k.a an attention mechanism.\n */\nexport class RNN extends Layer {\n  static className = 'RNN';\n  public readonly cell: RNNCell;\n  public readonly returnSequences: boolean;\n  public readonly returnState: boolean;\n  public readonly goBackwards: boolean;\n  public readonly unroll: boolean;\n\n  public stateSpec: InputSpec[];\n  private states_: Tensor[];\n\n  // NOTE(cais): For stateful RNNs, the old states cannot be disposed right\n  // away when new states are set, because the old states may need to be used\n  // later for backpropagation through time (BPTT) and other purposes. So we\n  // keep them here for final disposal when the state is reset completely\n  // (i.e., through no-arg call to `resetStates()`).\n  private keptStates: Tensor[][];\n\n  private numConstants: number;\n\n  constructor(args: RNNLayerArgs) {\n    super(args);\n    let cell: RNNCell;\n    if (args.cell == null) {\n      throw new ValueError(\n          'cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({cells: args.cell});\n    } else {\n      cell = args.cell;\n    }\n    if ((cell as RNNCell).stateSize == null) {\n      throw new ValueError(\n          'The RNN cell should have an attribute `stateSize` (tuple of ' +\n          'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences =\n        args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ndim: 3})];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  }\n\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states: Tensor[]): void {\n    this.states_ = states;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape: Shape|Shape[];\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape: Shape[] = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output: Tensor[] = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s: Tensor[]) {\n    this.states_ = s;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape: Shape[] = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    const batchSize: number = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape[inputShape.length - 1];\n    this.inputSpec[0] = new InputSpec({shape: [batchSize, null, inputDim]});\n\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n\n    // Set or validate stateSpec.\n    let stateSize: number[];\n    if (Array.isArray((this.cell as RNNCell).stateSize)) {\n      stateSize = this.cell.stateSize as number[];\n    } else {\n      stateSize = [this.cell.stateSize as number];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(\n              this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]),\n              stateSize)) {\n        throw new ValueError(\n            `An initialState was passed that is not compatible with ` +\n            `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n            `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec =\n          stateSize.map(dim => new InputSpec({shape: [null, dim]}));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  resetStates(states?: Tensor|Tensor[], training = false): void {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ?\n              this.cell.stateSize[index] :\n              this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_.forEach(state => tfc.keep(state));\n    });\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    let additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({shape: state.shape}));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput =\n          [inputs].concat(additionalInputs) as Tensor[] | SymbolicTensor[];\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'] as Tensor;\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(\n            `RNN Layer has ${numStates} state(s) but was passed ` +\n            `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\n            'Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs: Kwargs = {training};\n\n      // TODO(cais): Add support for constants.\n      const step = (inputs: Tensor, states: Tensor[]) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs =\n            this.cell.call([inputs].concat(states), cellCallKwargs) as Tensor[];\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)] as [Tensor, Tensor[]];\n      };\n\n      // TODO(cais): Add support for constants.\n\n      const rnnOutputs =\n          rnn(step, inputs, initialState, this.goBackwards, mask, null,\n              this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput;\n\n      // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs: Tensor): Tensor[] {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState);  // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(\n            dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ?\n            [K.tile(initialState, [1, this.cell.stateSize])] :\n            [initialState];\n      }\n    });\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll,\n    };\n    if (this.numConstants != null) {\n      config.numConstants = this.numConstants;\n    }\n    const cellConfig = this.cell.getConfig();\n    config.cell = {\n      className: this.cell.getClassName(),\n      config: cellConfig,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(RNN);\n\n/**\n * An RNNCell layer.\n */\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/** @doc {heading: 'Layers', subheading: 'Classes'} */\nexport abstract class RNNCell extends Layer {\n  /**\n   * Size(s) of the states.\n   * For RNN cells with only a single state, this is a single integer.\n   */\n  public stateSize: number|number[];\n  public dropoutMask: Tensor|Tensor[];\n  public recurrentDropoutMask: Tensor|Tensor[];\n}\n\nexport interface SimpleRNNCellLayerArgs extends LayerArgs {\n  /**\n   * units: Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   * Default: hyperbolic tangent ('tanh').\n   * If you pass `null`,  'linear' activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the `kernel` weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the `recurrent_kernel` weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the `kernel` weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the `recurrentKernel` weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraintfunction applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n */\nexport class SimpleRNNCell extends RNNCell {\n  static className = 'SimpleRNNCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n\n  readonly stateSize: number;\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args: SimpleRNNCellLayerArgs) {\n    super(args);\n    this.units = args.units;\n    this.activation = getActivation(\n        args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight(\n        'kernel', [inputShape[inputShape.length - 1], this.units], null,\n        this.kernelInitializer, this.kernelRegularizer, true,\n        this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask(\n                               () => tfc.onesLike(inputs as Tensor),\n                               this.dropout, training) as Tensor;\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask =\n            generateDropoutMask(\n                () => tfc.onesLike(prevOutput), this.recurrentDropout,\n                training) as Tensor;\n      }\n      let h: Tensor;\n      const dpMask: Tensor = this.dropoutMask as Tensor;\n      const recDpMask: Tensor = this.recurrentDropoutMask as Tensor;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(SimpleRNNCell);\n\nexport interface SimpleRNNLayerArgs extends BaseRNNLayerConfig {\n  /**\n   * Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   *\n   * Defaults to  hyperbolic tangent (`tanh`)\n   *\n   * If you pass `null`, no activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the recurrentKernel weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the kernel weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the recurrentKernel weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n */\nexport class SimpleRNN extends RNN {\n  static className = 'SimpleRNN';\n  constructor(args: SimpleRNNLayerArgs) {\n    args.cell = new SimpleRNNCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  // TODO(cais): Research possibility of refactoring out the tedious all\n  //   the getters that delegate to `this.cell` below.\n  get units(): number {\n    return (this.cell as SimpleRNNCell).units;\n  }\n\n  get activation(): Activation {\n    return (this.cell as SimpleRNNCell).activation;\n  }\n\n  get useBias(): boolean {\n    return (this.cell as SimpleRNNCell).useBias;\n  }\n\n  get kernelInitializer(): Initializer {\n    return (this.cell as SimpleRNNCell).kernelInitializer;\n  }\n\n  get recurrentInitializer(): Initializer {\n    return (this.cell as SimpleRNNCell).recurrentInitializer;\n  }\n\n  get biasInitializer(): Initializer {\n    return (this.cell as SimpleRNNCell).biasInitializer;\n  }\n\n  get kernelRegularizer(): Regularizer {\n    return (this.cell as SimpleRNNCell).kernelRegularizer;\n  }\n\n  get recurrentRegularizer(): Regularizer {\n    return (this.cell as SimpleRNNCell).recurrentRegularizer;\n  }\n\n  get biasRegularizer(): Regularizer {\n    return (this.cell as SimpleRNNCell).biasRegularizer;\n  }\n\n  get kernelConstraint(): Constraint {\n    return (this.cell as SimpleRNNCell).kernelConstraint;\n  }\n\n  get recurrentConstraint(): Constraint {\n    return (this.cell as SimpleRNNCell).recurrentConstraint;\n  }\n\n  get biasConstraint(): Constraint {\n    return (this.cell as SimpleRNNCell).biasConstraint;\n  }\n\n  get dropout(): number {\n    return (this.cell as SimpleRNNCell).dropout;\n  }\n\n  get recurrentDropout(): number {\n    return (this.cell as SimpleRNNCell).recurrentDropout;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n    const baseConfig = super.getConfig();\n    delete baseConfig['cell'];\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(SimpleRNN);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport interface GRUCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: string;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n */\nexport class GRUCell extends RNNCell {\n  static className = 'GRUCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n\n  readonly stateSize: number;\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: GRUCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 3], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 3], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units * 3], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1];  // Previous memory state.\n      inputs = inputs[0];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask(\n                               () => tfc.onesLike(inputs as Tensor),\n                               this.dropout, training, 3) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask =\n            generateDropoutMask(\n                () => tfc.onesLike(hTMinus1), this.recurrentDropout, training,\n                3) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor];\n      const recDpMask = this.recurrentDropoutMask as [Tensor, Tensor, Tensor];\n      let z: Tensor;\n      let r: Tensor;\n      let hh: Tensor;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(\n          recurrentKernelValue, [2 * this.units, this.units],\n          recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] =\n          tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n\n      const h = tfc.add(\n          tfc.mul(z, hTMinus1), tfc.mul(tfc.add(getScalar(1), tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(GRUCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport interface GRULayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: string;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   * smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n */\nexport class GRU extends RNN {\n  static className = 'GRU';\n  constructor(args: GRULayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  get units(): number {\n    return (this.cell as GRUCell).units;\n  }\n\n  get activation(): Activation {\n    return (this.cell as GRUCell).activation;\n  }\n\n  get recurrentActivation(): Activation {\n    return (this.cell as GRUCell).recurrentActivation;\n  }\n\n  get useBias(): boolean {\n    return (this.cell as GRUCell).useBias;\n  }\n\n  get kernelInitializer(): Initializer {\n    return (this.cell as GRUCell).kernelInitializer;\n  }\n\n  get recurrentInitializer(): Initializer {\n    return (this.cell as GRUCell).recurrentInitializer;\n  }\n\n  get biasInitializer(): Initializer {\n    return (this.cell as GRUCell).biasInitializer;\n  }\n\n  get kernelRegularizer(): Regularizer {\n    return (this.cell as GRUCell).kernelRegularizer;\n  }\n\n  get recurrentRegularizer(): Regularizer {\n    return (this.cell as GRUCell).recurrentRegularizer;\n  }\n\n  get biasRegularizer(): Regularizer {\n    return (this.cell as GRUCell).biasRegularizer;\n  }\n\n  get kernelConstraint(): Constraint {\n    return (this.cell as GRUCell).kernelConstraint;\n  }\n\n  get recurrentConstraint(): Constraint {\n    return (this.cell as GRUCell).recurrentConstraint;\n  }\n\n  get biasConstraint(): Constraint {\n    return (this.cell as GRUCell).biasConstraint;\n  }\n\n  get dropout(): number {\n    return (this.cell as GRUCell).dropout;\n  }\n\n  get recurrentDropout(): number {\n    return (this.cell as GRUCell).recurrentDropout;\n  }\n\n  get implementation(): number {\n    return (this.cell as GRUCell).implementation;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    delete baseConfig['cell'];\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(GRU);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport interface LSTMCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n */\nexport class LSTMCell extends RNNCell {\n  static className = 'LSTMCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n  readonly unitForgetBias: boolean;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n\n  readonly stateSize: number[];\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n\n  readonly DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: LSTMCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 4], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 4], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    let biasInitializer: Initializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (class CustomInit extends Initializer {\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): Tensor {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = (new Ones()).apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(\n                K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\n          'bias', [this.units * 4], null, biasInitializer, this.biasRegularizer,\n          true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];    // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask(\n                               () => tfc.onesLike(inputs as Tensor),\n                               this.dropout, training, 4) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask =\n            generateDropoutMask(\n                () => tfc.onesLike(hTMinus1), this.recurrentDropout, training,\n                4) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor, Tensor];\n      const recDpMask =\n          this.recurrentDropoutMask as [Tensor, Tensor, Tensor, Tensor];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i: Tensor;\n      let f: Tensor;\n      let c: Tensor;\n      let o: Tensor;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LSTMCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport interface LSTMLayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: string;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *   Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions, whereas mode 2 will\n   *   batch them into fewer, larger operations. These modes will\n   *   have different performance profiles on different hardware and\n   *   for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this config field.\n   */\n  implementation?: number;\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n */\nexport class LSTM extends RNN {\n  static className = 'LSTM';\n  constructor(args: LSTMLayerArgs) {\n    if (args.implementation as number === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  get units(): number {\n    return (this.cell as LSTMCell).units;\n  }\n\n  get activation(): Activation {\n    return (this.cell as LSTMCell).activation;\n  }\n\n  get recurrentActivation(): Activation {\n    return (this.cell as LSTMCell).recurrentActivation;\n  }\n\n  get useBias(): boolean {\n    return (this.cell as LSTMCell).useBias;\n  }\n\n  get kernelInitializer(): Initializer {\n    return (this.cell as LSTMCell).kernelInitializer;\n  }\n\n  get recurrentInitializer(): Initializer {\n    return (this.cell as LSTMCell).recurrentInitializer;\n  }\n\n  get biasInitializer(): Initializer {\n    return (this.cell as LSTMCell).biasInitializer;\n  }\n\n  get unitForgetBias(): boolean {\n    return (this.cell as LSTMCell).unitForgetBias;\n  }\n\n  get kernelRegularizer(): Regularizer {\n    return (this.cell as LSTMCell).kernelRegularizer;\n  }\n\n  get recurrentRegularizer(): Regularizer {\n    return (this.cell as LSTMCell).recurrentRegularizer;\n  }\n\n  get biasRegularizer(): Regularizer {\n    return (this.cell as LSTMCell).biasRegularizer;\n  }\n\n  get kernelConstraint(): Constraint {\n    return (this.cell as LSTMCell).kernelConstraint;\n  }\n\n  get recurrentConstraint(): Constraint {\n    return (this.cell as LSTMCell).recurrentConstraint;\n  }\n\n  get biasConstraint(): Constraint {\n    return (this.cell as LSTMCell).biasConstraint;\n  }\n\n  get dropout(): number {\n    return (this.cell as LSTMCell).dropout;\n  }\n\n  get recurrentDropout(): number {\n    return (this.cell as LSTMCell).recurrentDropout;\n  }\n\n  get implementation(): number {\n    return (this.cell as LSTMCell).implementation;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    delete baseConfig['cell'];\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(LSTM);\n\nexport interface StackedRNNCellsArgs extends LayerArgs {\n  /**\n   * A `Array` of `RNNCell` instances.\n   */\n  cells: RNNCell[];\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n */\nexport class StackedRNNCells extends RNNCell {\n  static className = 'StackedRNNCells';\n  protected cells: RNNCell[];\n\n  constructor(args: StackedRNNCellsArgs) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize(): number[] {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize: number[] = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      let states = inputs.slice(1);\n\n      // Recover per-cell states.\n      const nestedStates: Tensor[][] = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n\n      // Call the cells in order and store the returned states.\n      const newNestedStates: Tensor[][] = [];\n      let callInputs: Tensor[];\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs) as Tensor[];\n        newNestedStates.push(callInputs.slice(1));\n      }\n\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n    let outputDim: number;\n    for (const cell of this.cells) {\n      // TODO(cais): Take care of input constants.\n      cell.build(inputShape);\n      if (Array.isArray(cell.stateSize)) {\n        outputDim = cell.stateSize[0];\n      } else {\n        outputDim = cell.stateSize;\n      }\n      inputShape = [inputShape[0], outputDim];\n    }\n    this.built = true;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const cellConfigs: serialization.ConfigDict[] = [];\n    for (const cell of this.cells) {\n      cellConfigs.push({\n        'className': this.getClassName(),\n        'config': cell.getConfig(),\n      });\n    }\n    const config: serialization.ConfigDict = {'cells': cellConfigs};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cells: RNNCell[] = [];\n    for (const cellConfig of (config['cells'] as serialization.ConfigDict[])) {\n      cells.push(deserialize(cellConfig, customObjects) as RNNCell);\n    }\n    return new cls({cells});\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  getWeights(): Tensor[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  setWeights(weights: Tensor[]): void {\n    const tuples: Array<[LayerVariable, Tensor]> = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n\n  // TODO(cais): Maybe implemnt `losses` and `getLossesFor`.\n}\nserialization.registerClass(StackedRNNCells);\n\nfunction generateDropoutMask(\n    ones: () => Tensor, rate: number, training: boolean = null,\n    count = 1): Tensor|Tensor[] {\n  function droppedInputs(): Tensor {\n    return K.dropout(ones(), getScalar(rate));\n  }\n  if (count > 1) {\n    const mask: Tensor[] = [];\n    for (let i = 0; i < count; i++) {\n      mask.push(K.inTrainPhase(droppedInputs, ones, training));\n    }\n    mask.forEach(m => tfc.keep(m));\n    return mask;\n  } else {\n    return tfc.keep(K.inTrainPhase(droppedInputs, ones, training));\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Layers that augment the functionality of a base layer.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {getScalar} from '../backend/state';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {InputSpec, Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {Kwargs, Shape} from '../types';\nimport {RegularizerFn, RnnStepFunction} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {rnn, RNN, standardizeArgs} from './recurrent';\nimport {deserialize} from './serialization';\n\n\nexport interface WrapperLayerArgs extends LayerArgs {\n  /**\n   * The layer to be wrapped.\n   */\n  layer: Layer;\n}\n\n/**\n * Abstract wrapper base class.\n *\n * Wrappers take another layer and augment it in various ways.\n * Do not use this class as a layer, it is only an abstract base class.\n * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.\n */\nexport abstract class Wrapper extends Layer {\n  readonly layer: Layer;\n\n  constructor(args: WrapperLayerArgs) {\n    // Porting Note: In PyKeras, `self.layer` is set prior to the calling\n    //   `super()`. But we can't do that here due to TypeScript's restriction.\n    //   See: https://github.com/Microsoft/TypeScript/issues/8277\n    //   As a result, we have to add checks in `get trainable()` and\n    //   `set trainable()` below in order to prevent using `this.layer` when\n    //   its value is `undefined`. The super constructor does use the getter\n    //   and the setter of `this.layer`.\n    super(args);\n    this.layer = args.layer;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    this.built = true;\n  }\n\n  // TODO(cais): Implement activityRegularizer getter.\n\n  get trainable(): boolean {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    if (this.layer != null) {\n      return this.layer.trainable;\n    } else {\n      return false;\n    }\n  }\n\n  set trainable(value: boolean) {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    if (this.layer != null) {\n      this.layer.trainable = value;\n    }\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    return this.layer.trainableWeights;\n  }\n  // TODO(cais): Implement setter for trainableWeights.\n\n  get nonTrainableWeights(): LayerVariable[] {\n    return this.layer.nonTrainableWeights;\n  }\n  // TODO(cais): Implement setter for nonTrainableWeights.\n\n  get updates(): Tensor[] {\n    // tslint:disable-next-line:no-any\n    return (this.layer as any)._updates;\n  }\n\n  // TODO(cais): Implement getUpdatesFor().\n\n  get losses(): RegularizerFn[] {\n    return this.layer.losses;\n  }\n\n  // TODO(cais): Implement getLossesFor().\n\n  getWeights(): Tensor[] {\n    return this.layer.getWeights();\n  }\n\n  setWeights(weights: Tensor[]): void {\n    this.layer.setWeights(weights);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'layer': {\n        'className': this.layer.getClassName(),\n        'config': this.layer.getConfig(),\n      }\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.layer != null) {\n      this.layer.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const layerConfig = config['layer'] as serialization.ConfigDict;\n    const layer = deserialize(layerConfig, customObjects) as Layer;\n    delete config['layer'];\n    const newConfig = {layer};\n    Object.assign(newConfig, config);\n    return new cls(newConfig);\n  }\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\nexport class TimeDistributed extends Wrapper {\n  static className = 'TimeDistributed';\n  constructor(args: WrapperLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 3) {\n      throw new ValueError(\n          `TimeDistributed layer expects an input shape >= 3D, but received ` +\n          `input shape ${JSON.stringify(inputShape)}`);\n    }\n    this.inputSpec = [{shape: inputShape}];\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (!this.layer.built) {\n      this.layer.build(childInputShape);\n      this.layer.built = true;\n    }\n    super.build(inputShape);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    const childOutputShape =\n        this.layer.computeOutputShape(childInputShape) as Shape;\n    const timesteps = inputShape[1];\n    return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.\n      inputs = getExactlyOneTensor(inputs);\n      // Porting Note: In tfjs-layers, `inputs` are always concrete tensor\n      // values. Hence the inputs can't have an undetermined first (batch)\n      // dimension, which is why we always use the K.rnn approach here.\n      const step: RnnStepFunction = (inputs: Tensor, states: Tensor[]) => {\n        // TODO(cais): Add useLearningPhase.\n        // NOTE(cais): `layer.call` may return a length-1 array of Tensor in\n        //   some cases (e.g., `layer` is a `Sequential` instance), which is\n        //   why `getExactlyOneTensor` is used below.\n        const output = getExactlyOneTensor(this.layer.call(inputs, kwargs));\n        return [output, []];\n      };\n      const rnnOutputs =\n          rnn(step, inputs, [], false /* goBackwards */, null /* mask */,\n              null /* constants */, false /* unroll */,\n              true /* needPerStepOutputs */);\n      const y = rnnOutputs[1];\n      // TODO(cais): Add activity regularization.\n      // TODO(cais): Add useLearningPhase.\n      return y;\n    });\n  }\n\n  // TODO(cais): Implement detailed computeMask() logic.\n}\nserialization.registerClass(TimeDistributed);\n\nexport type BidirectionalMergeMode = 'sum'|'mul'|'concat'|'ave';\nexport const VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];\nexport function checkBidirectionalMergeMode(value?: string): void {\n  generic_utils.checkStringTypeUnionValue(\n      VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);\n}\n\nexport interface BidirectionalLayerArgs extends WrapperLayerArgs {\n  /**\n   * The instance of an `RNN` layer to be wrapped.\n   */\n  layer: RNN;\n\n  /**\n   * Mode by which outputs of the forward and backward RNNs are\n   * combinied. If `null` or `undefined`, the output will not be\n   * combined, they will be returned as an `Array`.\n   */\n  mergeMode?: BidirectionalMergeMode;\n}\n\nexport class Bidirectional extends Wrapper {\n  static className = 'Bidirectional';\n  private forwardLayer: RNN;\n  private backwardLayer: RNN;\n  private mergeMode: BidirectionalMergeMode;\n  private returnSequences: boolean;\n  private returnState: boolean;\n  private numConstants?: number;\n  private _trainable: boolean;\n\n  constructor(args: BidirectionalLayerArgs) {\n    super(args);\n\n    // Note: When creating `this.forwardLayer`, the original Layer object\n    //   (`config.layer`) ought to be cloned. This is why we call\n    //   `getConfig()` followed by `deserialize()`. Without this cloning,\n    //   the layer names saved during serialization will incorrectly contain\n    //   the 'forward_' prefix. In Python Keras, this is done using\n    //   `copy.copy` (shallow copy), which does not have a simple equivalent\n    //   in JavaScript. JavaScript's `Object.assign()` does not copy\n    //   methods.\n    const layerConfig = args.layer.getConfig();\n    this.forwardLayer =\n        deserialize(\n            {className: args.layer.getClassName(), config: layerConfig}) as RNN;\n    layerConfig['goBackwards'] =\n        layerConfig['goBackwards'] === true ? false : true;\n    this.backwardLayer =\n        deserialize(\n            {className: args.layer.getClassName(), config: layerConfig}) as RNN;\n    this.forwardLayer.name = 'forward_' + this.forwardLayer.name;\n    this.backwardLayer.name = 'backward_' + this.backwardLayer.name;\n    checkBidirectionalMergeMode(args.mergeMode);\n    this.mergeMode = args.mergeMode;\n    if (args.weights) {\n      throw new NotImplementedError(\n          'weights support is not implemented for Bidirectional layer yet.');\n    }\n    this._stateful = args.layer.stateful;\n    this.returnSequences = args.layer.returnSequences;\n    this.returnState = args.layer.returnState;\n    this.supportsMasking = true;\n    this._trainable = true;\n    this.inputSpec = args.layer.inputSpec;\n    this.numConstants = null;\n  }\n\n  get trainable(): boolean {\n    return this._trainable;\n  }\n\n  set trainable(value: boolean) {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    this._trainable = value;\n    if (this.forwardLayer != null) {\n      this.forwardLayer.trainable = value;\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.trainable = value;\n    }\n  }\n\n  getWeights(): Tensor[] {\n    return this.forwardLayer.getWeights().concat(\n        this.backwardLayer.getWeights());\n  }\n\n  setWeights(weights: Tensor[]): void {\n    const numWeights = weights.length;\n    const numeightsOver2 = Math.floor(numWeights / 2);\n    this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n    this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    let layerShapes: Shape|Shape[] =\n        this.forwardLayer.computeOutputShape(inputShape);\n    if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n      layerShapes = [layerShapes as Shape];\n    }\n    layerShapes = layerShapes as Shape[];\n\n    let outputShape: Shape;\n    let outputShapes: Shape[];\n    let stateShape: Shape[];\n    if (this.returnState) {\n      stateShape = layerShapes.slice(1);\n      outputShape = layerShapes[0];\n    } else {\n      outputShape = layerShapes[0];\n    }\n    outputShape = outputShape as Shape;\n    if (this.mergeMode === 'concat') {\n      outputShape[outputShape.length - 1] *= 2;\n      outputShapes = [outputShape];\n    } else if (this.mergeMode == null) {\n      outputShapes = [outputShape, outputShape.slice()];\n    } else {\n      outputShapes = [outputShape];\n    }\n\n    if (this.returnState) {\n      if (this.mergeMode == null) {\n        return outputShapes.concat(stateShape).concat(stateShape.slice());\n      }\n      return [outputShape].concat(stateShape).concat(stateShape.slice());\n    }\n    return generic_utils.singletonOrArray(outputShapes);\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs as Tensor | SymbolicTensor;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    if (Array.isArray(inputs)) {\n      initialState = (inputs as Tensor[] | SymbolicTensor[]).slice(1);\n      inputs = (inputs as Tensor[] | SymbolicTensor[])[0];\n    }\n\n    if ((initialState == null || initialState.length === 0) &&\n        constants == null) {\n      return super.apply(inputs, kwargs);\n    }\n    const additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    const additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      const numStates = initialState.length;\n      if (numStates % 2 > 0) {\n        throw new ValueError(\n            'When passing `initialState` to a Bidrectional RNN, ' +\n            'the state should be an Array containing the states of ' +\n            'the underlying RNNs.');\n      }\n      kwargs['initialState'] = initialState;\n      additionalInputs.push(...initialState);\n      const stateSpecs = (initialState as Array<Tensor|SymbolicTensor>)\n                             .map(state => new InputSpec({shape: state.shape}));\n      this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);\n      this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);\n      additionalSpecs.push(...stateSpecs);\n    }\n    if (constants != null) {\n      throw new NotImplementedError(\n          'Support for constants in Bidirectional layers is not ' +\n          'implemented yet.');\n    }\n\n    const isSymbolicTensor = additionalInputs[0] instanceof SymbolicTensor;\n    for (const tensor of additionalInputs) {\n      if (tensor instanceof SymbolicTensor !== isSymbolicTensor) {\n        throw new ValueError(\n            'The initial state of a Bidirectional layer cannot be ' +\n            'specified as a mix of symbolic and non-symbolic tensors');\n      }\n    }\n\n    if (isSymbolicTensor) {\n      // Compute the full input and specs, including the states.\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call temporarily and replace inputSpec.\n      // Note: with initial states symbolic calls and non-symbolic calls to\n      // this method differ in how the initial states are passed. For\n      // symbolic calls, the initial states are passed in the first arg, as\n      // an Array of SymbolicTensors; for non-symbolic calls, they are\n      // passed in the second arg as a part of the kwargs. Hence the need to\n      // temporarily modify inputSpec here.\n      // TODO(cais): Make refactoring so that this hacky code below is no\n      // longer needed.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output =\n          super.apply(fullInput as Tensor[] | SymbolicTensor[], kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (kwargs['mask'] != null) {\n        throw new NotImplementedError(\n            'The support for masking is not implemented for ' +\n            'Bidirectional layers yet.');\n      }\n      const initialState = kwargs['initialState'];\n\n      let y: Tensor|Tensor[];\n      let yRev: Tensor|Tensor[];\n      if (initialState == null) {\n        y = this.forwardLayer.call(inputs, kwargs);\n        yRev = this.backwardLayer.call(inputs, kwargs);\n      } else {\n        const forwardState = initialState.slice(0, initialState.length / 2);\n        const backwardState = initialState.slice(initialState.length / 2);\n        y = this.forwardLayer.call(\n            inputs, Object.assign(kwargs, {initialState: forwardState}));\n        yRev = this.backwardLayer.call(\n            inputs, Object.assign(kwargs, {initialState: backwardState}));\n      }\n\n      let states: Tensor[];\n      if (this.returnState) {\n        if (Array.isArray(y)) {\n          states = (y as Tensor[]).slice(1).concat((yRev as Tensor[]).slice(1));\n        } else {\n        }\n        y = (y as Tensor[])[0];\n        yRev = (yRev as Tensor[])[0];\n      }\n\n      if (this.returnSequences) {\n        yRev = tfc.reverse(yRev as Tensor, 1);\n      }\n\n      let output: Tensor|Tensor[];\n      if (this.mergeMode === 'concat') {\n        output = K.concatenate([y as Tensor, yRev as Tensor]);\n      } else if (this.mergeMode === 'sum') {\n        output = tfc.add(y as Tensor, yRev as Tensor);\n      } else if (this.mergeMode === 'ave') {\n        output = tfc.mul(getScalar(0.5), tfc.add(y as Tensor, yRev as Tensor));\n      } else if (this.mergeMode === 'mul') {\n        output = tfc.mul(y as Tensor, yRev as Tensor);\n      } else if (this.mergeMode == null) {\n        output = [y as Tensor, yRev as Tensor];\n      }\n\n      // TODO(cais): Properly set learning phase.\n      if (this.returnState) {\n        if (this.mergeMode == null) {\n          return (output as Tensor[]).concat(states);\n        }\n        return [output as Tensor].concat(states);\n      }\n      return output;\n    });\n  }\n\n  resetStates(states?: Tensor|Tensor[]): void {\n    this.forwardLayer.resetStates();\n    this.backwardLayer.resetStates();\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    nameScope(this.forwardLayer.name, () => {\n      this.forwardLayer.build(inputShape);\n    });\n    nameScope(this.backwardLayer.name, () => {\n      this.backwardLayer.build(inputShape);\n    });\n    this.built = true;\n  }\n\n  // TODO(cais): Implement computeMask().\n\n  get trainableWeights(): LayerVariable[] {\n    return this.forwardLayer.trainableWeights.concat(\n        this.backwardLayer.trainableWeights);\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    return this.forwardLayer.nonTrainableWeights.concat(\n        this.backwardLayer.nonTrainableWeights);\n  }\n\n  // TODO(cais): Implement constraints().\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.forwardLayer != null) {\n      this.forwardLayer.setFastWeightInitDuringBuild(value);\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'mergeMode': this.mergeMode,\n    };\n    // TODO(cais): Add logic for `numConstants` once the property is added.\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    const rnnLayer =\n        deserialize(config['layer'] as serialization.ConfigDict) as RNN;\n    delete config['layer'];\n    // TODO(cais): Add logic for `numConstants` once the property is added.\n    if (config['numConstants'] != null) {\n      throw new NotImplementedError(\n          `Deserialization of a Bidirectional layer with numConstants ` +\n          `present is not supported yet.`);\n    }\n    // tslint:disable-next-line:no-any\n    const newConfig: {[key: string]: any} = config;\n    newConfig['layer'] = rnnLayer;\n    return new cls(newConfig);\n  }\n}\nserialization.registerClass(Bidirectional);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {BatchNormalization, BatchNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, Pooling1DLayerArgs, Pooling2DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, Wrapper, WrapperLayerArgs} from './layers/wrappers';\n\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Inputs',\n *   namespace: 'layers',\n *   useDocsFrom: 'InputLayer',\n *   configParamIndices: [0]\n * }\n */\nexport function inputLayer(args: InputLayerArgs): Layer {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers',\n *   useDocsFrom: 'ELU',\n *   configParamIndices: [0]\n * }\n */\nexport function elu(args?: ELULayerArgs): Layer {\n  return new ELU(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers',\n *   useDocsFrom: 'ReLU',\n *   configParamIndices: [0]\n * }\n */\nexport function reLU(args?: ReLULayerArgs): Layer {\n  return new ReLU(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers',\n *   useDocsFrom: 'LeakyReLU',\n *   configParamIndices: [0]\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs): Layer {\n  return new LeakyReLU(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers',\n *   useDocsFrom: 'PReLU',\n *   configParamIndices: [0]\n * }\n */\nexport function prelu(args?: PReLULayerArgs): Layer {\n  return new PReLU(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers',\n *   useDocsFrom: 'Softmax',\n *   configParamIndices: [0]\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs): Layer {\n  return new Softmax(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers',\n *   useDocsFrom: 'ThresholdedReLU',\n *   configParamIndices: [0]\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs): Layer {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'Conv1D',\n *   configParamIndices: [0]\n * }\n */\nexport function conv1d(args: ConvLayerArgs): Layer {\n  return new Conv1D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'Conv2D',\n *   configParamIndices: [0]\n * }\n */\nexport function conv2d(args: ConvLayerArgs): Layer {\n  return new Conv2D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'Conv2DTranspose',\n *   configParamIndices: [0]\n * }\n */\nexport function conv2dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'SeparableConv2D',\n *   configParamIndices: [0]\n * }\n */\nexport function separableConv2d(args: SeparableConvLayerArgs): Layer {\n  return new SeparableConv2D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'Cropping2D',\n *   configParamIndices: [0]\n * }\n */\nexport function cropping2D(args: Cropping2DLayerArgs): Layer {\n  return new Cropping2D(args);\n}\n\n/**\n * @doc{\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'UpSampling2D',\n *   configParamIndices: [0]\n * }\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs): Layer {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Convolutional',\n *   namespace: 'layers',\n *   useDocsFrom: 'DepthwiseConv2D',\n *   configParamIndices: [0]\n * }\n */\n\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs): Layer {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'Activation',\n *   configParamIndices: [0]\n * }\n */\nexport function activation(args: ActivationLayerArgs): Layer {\n  return new Activation(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'Dense',\n *   configParamIndices: [0]\n * }\n */\nexport function dense(args: DenseLayerArgs): Layer {\n  return new Dense(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'Dropout',\n *   configParamIndices: [0]\n * }\n */\nexport function dropout(args: DropoutLayerArgs): Layer {\n  return new Dropout(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'Flatten',\n *   configParamIndices: [0]\n * }\n */\nexport function flatten(args?: LayerArgs): Layer {\n  return new Flatten(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'RepeatVector',\n *   configParamIndices: [0]\n * }\n */\nexport function repeatVector(args: RepeatVectorLayerArgs): Layer {\n  return new RepeatVector(args);\n}\n\n/**\n * @doc{\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'Reshape',\n *   configParamIndices: [0]\n * }\n */\nexport function reshape(args: ReshapeLayerArgs): Layer {\n  return new Reshape(args);\n}\n\n/**\n * @doc{\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *   useDocsFrom: 'Permute',\n *   configParamIndices: [0]\n * }\n */\nexport function permute(args: PermuteLayerArgs): Layer {\n  return new Permute(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Basic',\n *   namespace: 'layers',\n *    useDocsFrom: 'Embedding',\n *   configParamIndices: [0]\n * }\n */\nexport function embedding(args: EmbeddingLayerArgs): Layer {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Add',\n *   configParamIndices: [0]\n * }\n */\nexport function add(args?: LayerArgs): Layer {\n  return new Add(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Average',\n *   configParamIndices: [0]\n * }\n */\nexport function average(args?: LayerArgs): Layer {\n  return new Average(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Concatenate',\n *   configParamIndices: [0]\n * }\n */\nexport function concatenate(args?: ConcatenateLayerArgs): Layer {\n  return new Concatenate(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Maximum',\n *   configParamIndices: [0]\n * }\n */\nexport function maximum(args?: LayerArgs): Layer {\n  return new Maximum(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Minimum',\n *   configParamIndices: [0]\n * }\n */\nexport function minimum(args?: LayerArgs): Layer {\n  return new Minimum(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Multiply',\n *   configParamIndices: [0]\n * }\n */\nexport function multiply(args?: LayerArgs): Layer {\n  return new Multiply(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Merge',\n *   namespace: 'layers',\n *   useDocsFrom: 'Dot',\n *   configParamIndices: [0]\n * }\n */\nexport function dot(args: DotLayerArgs): Layer {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Normalization',\n *   namespace: 'layers',\n *   useDocsFrom: 'BatchNormalization',\n *   configParamIndices: [0]\n * }\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs): Layer {\n  return new BatchNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Padding',\n *   namespace: 'layers',\n *   useDocsFrom: 'ZeroPadding2D',\n *   configParamIndices: [0]\n * }\n */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs): Layer {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'AveragePooling1D',\n *   configParamIndices: [0]\n * }\n */\nexport function averagePooling1d(args: Pooling1DLayerArgs): Layer {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'AveragePooling2D',\n *   configParamIndices: [0]\n * }\n */\nexport function averagePooling2d(args: Pooling2DLayerArgs): Layer {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'GlobalAveragePooling1D',\n *   configParamIndices: [0]\n * }\n */\nexport function globalAveragePooling1d(args: LayerArgs): Layer {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'GlobalAveragePooling2D',\n *   configParamIndices: [0]\n * }\n */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'GlobalMaxPooling1D',\n *   configParamIndices: [0]\n * }\n */\nexport function globalMaxPooling1d(args: LayerArgs): Layer {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'GlobalMaxPooling2D',\n *   configParamIndices: [0]\n * }\n */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'MaxPooling1D',\n *   configParamIndices: [0]\n * }\n */\nexport function maxPooling1d(args: Pooling1DLayerArgs): Layer {\n  return new MaxPooling1D(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Pooling',\n *   namespace: 'layers',\n *   useDocsFrom: 'MaxPooling2D',\n *   configParamIndices: [0]\n * }\n */\nexport function maxPooling2d(args: Pooling2DLayerArgs): Layer {\n  return new MaxPooling2D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'GRU',\n *   configParamIndices: [0]\n * }\n */\nexport function gru(args: GRULayerArgs): Layer {\n  return new GRU(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'GRUCell',\n *   configParamIndices: [0]\n * }\n */\nexport function gruCell(args: GRUCellLayerArgs): RNNCell {\n  return new GRUCell(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'LSTM',\n *   configParamIndices: [0]\n * }\n */\nexport function lstm(args: LSTMLayerArgs): Layer {\n  return new LSTM(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'LSTMCell',\n *   configParamIndices: [0]\n * }\n */\nexport function lstmCell(args: LSTMCellLayerArgs): RNNCell {\n  return new LSTMCell(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'SimpleRNN',\n *   configParamIndices: [0]\n * }\n */\nexport function simpleRNN(args: SimpleRNNLayerArgs): Layer {\n  return new SimpleRNN(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'SimpleRNNCell',\n *   configParamIndices: [0]\n * }\n */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs): RNNCell {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'RNN',\n *   configParamIndices: [0]\n * }\n */\nexport function rnn(args: RNNLayerArgs): Layer {\n  return new RNN(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Recurrent',\n *   namespace: 'layers',\n *   useDocsFrom: 'RNN',\n *   configParamIndices: [0]\n * }\n */\nexport function stackedRNNCells(args: StackedRNNCellsArgs): RNNCell {\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Wrapper',\n *   namespace: 'layers',\n *   useDocsFrom: 'Bidirectional',\n *   configParamIndices: [0]\n * }\n */\nexport function bidirectional(args: BidirectionalLayerArgs): Wrapper {\n  return new Bidirectional(args);\n}\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Wrapper',\n *   namespace: 'layers',\n *   useDocsFrom: 'TimeDistributed',\n *   configParamIndices: [0]\n * }\n */\nexport function timeDistributed(args: WrapperLayerArgs): Layer {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport * as losses from './losses';\nimport * as metrics from './metrics';\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'binaryAccuracy'\n * }\n */\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.binaryAccuracy(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'binaryCrossentropy'\n * }\n */\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.binaryCrossentropy(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'sparseCategoricalAccuracy'\n * }\n */\nexport function sparseCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.sparseCategoricalAccuracy(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'categoricalAccuracy'\n * }\n */\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.categoricalAccuracy(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'categoricalCrossentropy'\n * }\n */\nexport function categoricalCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.categoricalCrossentropy(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'precision'\n * }\n */\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.precision(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'recall'\n * }\n */\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.recall(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'cosineProximity'\n * }\n */\nexport function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.cosineProximity(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'meanAbsoluteError'\n * }\n */\nexport function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsoluteError(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'meanAbsolutePercentageError'\n * }\n */\nexport function meanAbsolutePercentageError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n\nexport function MAPE(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n\nexport function mape(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n\n/**\n * @doc {\n *   heading: 'Metrics',\n *   namespace: 'metrics',\n *   useDocsFrom: 'meanSquaredError'\n * }\n */\nexport function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanSquaredError(yTrue, yPred);\n}\n\nexport function MSE(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanSquaredError(yTrue, yPred);\n}\n\nexport function mse(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanSquaredError(yTrue, yPred);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as regularizers from './regularizers';\n// tslint:disable-next-line:max-line-length\nimport {L1Args, L1L2, L1L2Args, L2Args, Regularizer} from './regularizers';\n\n/**\n * @doc {\n *   heading: 'Regularizers',\n *   namespace: 'regularizers',\n *   useDocsFrom: 'L1L2',\n *   configParamIndices: [0]\n * }\n */\nexport function l1l2(config?: L1L2Args): Regularizer {\n  return new L1L2(config);\n}\n\n/**\n * @doc {\n *   heading: 'Regularizers',\n *   namespace: 'regularizers',\n *   useDocsFrom: 'L1L2',\n *   configParamIndices: [0]\n * }\n */\nexport function l1(config?: L1Args): Regularizer {\n  return regularizers.l1(config);\n}\n\n/**\n * @doc {\n *   heading: 'Regularizers',\n *   namespace: 'regularizers',\n *   useDocsFrom: 'L1L2',\n *   configParamIndices: [0]\n * }\n */\nexport function l2(config?: L2Args): Regularizer {\n  return regularizers.l2(config);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {BaseCallback} from './base_callbacks';\nimport {Container} from './engine/container';\nimport {Model} from './engine/training';\n\nexport abstract class Callback extends BaseCallback {\n  /** Instance of `keras.models.Model`. Reference of the model being trained. */\n  model: Model = null;\n\n  setModel(model: Container): void {\n    if (!(model instanceof Model)) {\n      throw new Error('model must be a Model, not some other Container');\n    }\n    this.model = model as Model;\n  }\n}\n"],"names":["_epsilon","ENV","get","_nextUniqueTensorId","_uidPrefixes","prefix","toString","scalarCache","float32","int32","DEFAULT_DTYPE","value","dtype","undefined","scalar","keep","message","_super","Object","setPrototypeOf","_this","AttributeError","prototype","tslib_1.__extends","Error","RuntimeError","ValueError","NotImplementedError","AssertionError","IndexError","numValues","Array","isArray","newArray","i","concat","fill","val","array","refernce","counter","array_1","_i","xs","length","x","name","insecure","replace","toLowerCase","identifier","indexOf","m","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","instance","className","getClassName","config","getConfig","moduleObjects","customObjects","printableModuleName","fastWeightInit","functionName","fn","JSON","stringify","cls","fromConfig","_a","_b","_c","customObjectsCombined","_d","keys","key","_f","_e","backupCustomObjects","_h","_g","returnObj","_k","_j","a","b","numberCompare","out","xs_1","push","obj","hasOwnProperty","values","label","expectedType","minLength","maxLength","assert","every","e","w","axis","tidy","tfc.sqrt","tfc.sum","tfc.mulStrict","Constraint","serialization","Serializable","args","maxValue","defaultMaxValue","defaultAxis","MaxNorm","norms","calcL2Norms","desired","tfc.clipByValue","tfc.mul","tfc.div","tfc.add","getScalar","epsilon","this","registerClass","UnitNorm","NonNeg","tfc.relu","minValue","defaultMinValue","rate","defaultRate","MinMaxNorm","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","maxNorm","minMaxNorm","nonNeg","unitNorm","constraint","serializeKerasObject","deserializeKerasObject","SerializationMap","getMap","classNameMap","deserializeConstraint","nameMap","Map","VALID_DATA_FORMAT_VALUES","checkStringTypeUnionValue","VALID_PADDING_MODE_VALUES","VALID_POOL_MODE_VALUES","_nameScopeStack","_nameScopeDivider","pop","join","tensorName","isValidTensorName","currentNameScopePrefix","scopedName","has","set","index","result","tensorNameRegex","RegExp","match","parseInt","begin","end","prod","Float32Array","tensor1d","tfc.min","toArray1D","dataSync","tfc.max","asType","outShape","shape","slice","splice","reshape","n","tile","expandDims","newShape","math_utils.arrayProd","rank","start","size","tfc.slice1d","tfc.slice2d","tfc.slice3d","tfc.slice4d","sliceAlongFirstAxis","sliceAlongLastAxis","tensors","tfc.concat","tfc.concat1d","tfc.concat2d","tfc.concat3d","tfc.concat4d","tfc.tile","mean","stddev","seed","tfc.randomNormal","y","xLastDim","ySecondLastDim","tfc.matMul","xFirstDims","yShape","yLastDim","yOtherDims","perm","from","_","transpose","outputShape","reference","indices","toInt","tfc.gather","bias","dataFormat","imageDataFormat","checkDataFormat","biasShape","add","alpha","tfc.elu","tfc.abs","level","noiseShape","util","arraysEqual","multiplier","tfc.step","tfc.neg","tfc.randomUniform","tfc.sub","alt","training","VALID_FAN_MODE_VALUES","VALID_DISTRIBUTION_VALUES","Initializer","Zeros","zeros","Ones","ones","Constant","mul","minval","DEFAULT_MINVAL","maxval","DEFAULT_MAXVAL","RandomUniform","randomUniform","DEFAULT_MEAN","DEFAULT_STDDEV","RandomNormal","K.randomNormal","TruncatedNormal","truncatedNormal","gain","Identity","eye","fanIn","fanOut","receptiveFieldSize","arrayProd","shapeProd","Math","sqrt","scale","mode","checkFanMode","distribution","checkDistribution","VarianceScaling","fans","computeFans","max","limit","GlorotUniform","GlorotNormal","HeNormal","LeCunNormal","DEFAULT_GAIN","Orthogonal","console","warn","q","linalg","gramSchmidt","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","constant","glorotNormal","glorotUniform","heNormal","identity","leCunNormal","orthogonal","randomNormal","varianceScaling","initializer","deserializeInitializer","shapes","weights","count","weights_1","weight","reduce","DEFAULT_VARIABLE_NAME_PREFIX","trainable","id","getNextUniqueTensorId","originalName","getScopedTensorName","getUniqueTensorName","tfc.variable","LayerVariable","assertNotDisposed","newVal","checkShapesMatch","assign","apply","dispose","isDisposed","map","read","variablesAndValues","variableAndValue","write","ndim","maxNDim","minNDim","axes","sourceLayer","inputs","callArgs","outputTensorIndex","_nextNodeID","outboundLayer","inboundLayers","nodeIndices","tensorIndices","inputTensors","outputTensors","inputMasks","outputMasks","inputShapes","outputShapes","layer","outboundNodes","inboundNodes","Node","inboundNames","_nextLayerID","activityRegularizer","inputSpec","supportsMasking","_trainableWeights","_nonTrainableWeights","_losses","_updates","_built","generic_utils.toSnakeCase","getUid","updatable","inputShape","batchInputShape","batchSize","inputDType","initialWeights","_refCount","fastWeightInitDuringBuild","Layer","nodeIndex","attrName","generic_utils.singletonOrArray","getNodeAtIndex","losses","lossFn","built","trainableWeights","nonTrainableWeights","_stateful","stateful","generic_utils.toList","inputIndex","spec","xShape","Number","xShapeAtAxis","specDim","dim","kwargs","_callHook","callHook","inputsList","allAreSymbolic","inputsList_1","SymbolicTensor","noneAreSymbolic","inputsList_2","nameScope","assertInputCompatibility","xElem","build","setWeights","outputListCopy","outputList_1","output","call","clone","collectInputShape","computeOutputShape","outputDType_1","guessOutputDType","warnOnIncompatibleInputShape","addInboundNode","dimMismatch_1","forEach","dimension","allOutputShapes","node","shapeString","variable_utils.countParamsInWeights","trainableOnly","batchGetValue","params","weightValueTuples","paramValues","pv","p","batchSetValue","regularizer","_addedWeightNames","getInitializer","initValue","addLoss","mask","TypeError","maskElement","inputTensorList","types_utils.normalizeShapeList","inputTensorList_1","tensorIndex","numDisposedVariables","disposeWeights","refCountAfterDispose","inputTensors_1","tensor","sourceTensors","previousSources_1","getSourceInputs","x_1","ModelLoggingVerbosity","sparse","inputTensor","InputLayer","batchShape","logs","promises","scalarsToDispose","valueScalar","data","Promise","all","BaseCallback","epoch","batch","model","callbacks","queueLength","CallbackList","callback","setParams","setModel","onEpochBegin","onEpochEnd","onBatchBegin","onBatchEnd","onTrainBegin","onTrainEnd","yieldEvery","batchCount","batchDurationsMillis","autoYieldEveryBatches","batchStartMillis","now","ModelTrainingYielder","resolveOneTensorInLogs","t","nextFrame","SKIP_FIRST_BATCHES","DECISION_BATCH_COUNT","meanBatchDuration","dur","prev","round","THRESHOLD_MILLIS","lastYieldBatchCount","BaseLogger","autoYielder","seen","totals","maybeYieldOnBatch","this_1","oldTotalsToDispose","maybeYieldOnEpoch","this_2","div","History","history","valueArray","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","CustomCallback","resolveScalarsInLogs","callbackConfig","CallbackConstructorRegistry","verbosityLevel","callbackConstructor","isInteger","checkForDuplicate","constructors","levelName","ctor","verbose","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","createCallbacks","callbackList","samples","steps","metrics","squareSum","K.square","epsilonTensor","tfc.onesLike","norm","tfc.maximum","yTrue","yPred","tfc.mean","diff","clippedTrue","MAX_VALUE","absResult","one","clippedPred","firstLog","tfc.log","secondLog","zeroTensor","maxResult","pos","neg","log2","log","predictionDiff","logcoshResult","tfc.softplus","target","fromLogits","tfc.softmax","outputSum","toFloat","flatTarget","tfc.floor","K.flatten","categoricalCrossentropy","tfc.oneHot","labels","logits","reluLogits","relu","negAbsLogits","abs","sub","exp","log1p","sigmoidCrossEntropyWithLogits","logPred","trueNormalized","l2Normalize","predNormalized","trueXPred","identifierOrFn","lossesMap","meanSquaredError","meanAbsoluteError","meanAbsolutePercentageError","meanSquaredLogarithmicError","squaredHinge","hinge","categoricalHinge","logcosh","sparseCategoricalCrossentropy","binaryCrossentropy","kullbackLeiblerDivergence","poisson","cosineProximity","errMsg","includes","threshold","yPredThresholded","K.cast","tfc.greater","tfc.equal","tfc.argMax","tfc.logicalAnd","equal","sum","cast","zero","tp","truePositives","fp","falsePositives","denominator","tfc.where","falseNegatives","lossBinaryCrossentropy","squeeze","argMax","mse","MSE","mae","MAE","mape","MAPE","categoricalCrossentropyLoss","cosine","sparseCategoricalCrossentropyLoss","metricsMap","binaryAccuracy","categoricalAccuracy","precision","optimizerMap","Adagrad","train","adagrad","Adadelta","adadelta","Adam","adam","Adamax","adamax","RMSProp","rmsprop","SGD","sgd","lineLength","positions","printFn","relevantNodes","sequentialLike","isModelSequentialLike","toDisplay","floor","depth","nodesByDepth","repeat","printRow","layers","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","countTrainableParams","nonTrainableCount","countParamsInWeights","collectedTrainableWeights","nodes","nodesByDepth_1","depthNodes","flag","fields","line","err","countParams","connections","inboundLayer","inboundLayerIndex","inboundTensorIndex","firstConnection","pythonicConfig","generic_utils.toCamelCase","tsArray","arrayLength","item","isArrayItemInputOrOutputName","convertPythonicToTs","tsDict","pythonicKey","pythonicValue","tsKey","tsConfig","pyArray","convertTsToPythonic","pyDict","tsValue","pyKey","version","feeds","FeedDict","id2Value","id2Mask","feeds_1","feed","assertFeedCompatibility","name2Id","cachedSorted","cachedRecipientCounts","fetches","feedDict","probe","arrayFetches","fetchArray","outputNames","finalOutputs","feedNames","names","outputNames_1","outputName","getValue","maxNumTensors","Infinity","minNumTensors","sorted","recipientCounts","fetchAndFeedKey","getTopologicalSortAndRecipientCounts","internalFeedDict","numTensors","memory","symbolic","srcLayer","inputValues","tensorsToDispose","maskExists","input","getMask","hasKey","toList","outputMask","computeMask","layerOutputs","getNodeOutputs","outputSymbolicTensors","i_1","disposeMasks","finalSorted","finalRecipientMap","getTopologicalSortAndRecipientCountsForOneFetch","recipientMap","visited","Set","fetches_1","sorted_1","symbolicTensor","name_1","recipient","recipientMap2Counts","name_2","fetch","stack","marks","top_1","topIsMarked","getOutputAt","originalKerasVersion","originalBackend","startsWith","dataType","generic_utils.stringToDType","Tensor","make","flatten","weightsJSON","skipMismatch","layerNames","layers_1","nameToWeights","k","layerWeights","weightValues","weightEntry","loadTensor","symbolicWeights","preprocessWeightsForLoading","strict","nameToWeight","totalWeightsCount","layers_2","unsetNames","name_3","outputs","generic_utils.unique","inputLayers","inputLayersNodeIndices","inputLayersTensorIndices","outputLayers","outputLayersNodeIndices","outputLayersTensorIndices","generic_utils.assert","inputNames","feedInputShapes","feedInputNames","feedOutputNames","internalInputShapes","internalOutputShapes","nodesDepths","nodeIDToNode","layersDepths","layerIDToLayer","layerIndices","nodesInDecreasingDepth","buildMapOfGraph","finishedNodes","nodesInProgress","containerNodes","Container","nodeKey","numInboundLayers","layer_1","nodeIndex_1","tensorIndex_1","reversedNodesInDecreasingDepth_1","reverse","previousDepth","inboundNode","previousDepth_1","nodeID","layersByDepth","layerID","depthKeys","sort","generic_utils.reverseNumberCompare","depthKeys_1","layersForDepth","aIndex","bIndex","layersForDepth_1","computableTensors","layersWithCompleteInput","depthKeys_2","_l","_o","_m","_q","_p","_s","_r","allNames","name_4","numOccurrences","filter","allNames_1","_t","isNamedTensorMap","loadWeightsFromNamedTensorMap","loadWeightsFromJson","theConfig","kerasVersion","layersVersion","backend","unused","returnString","modelConfig","updatedConfig","execute","masks","generic_utils.pyListRepeat","runInternalGraph","layersToOutputShapes","inputShape_1","shapeKey","depthKeys_3","nodes_1","inputShapes_1","j","nodeIndex_2","inputShape_2","outputShapes_1","outputShapeKeys","tensorMap","depthKeys_4","nodes_2","referenceInputTensors","referenceOutputTensors","computedData","referenceInputTensors_1","computedTensors","computedMasks","outputTensors_1","outputMasks_1","computedTensor","computedMask","keptNodes","nodeConversionMap","originalNodeIndex","calculateLosses","buildNodeConversionMap","layerConfigs","layerClassName","layerConfig","filteredInboundNodes","nodeData","newNodeIndex","modelInputs","modelOutputs","createdLayers","unprocessedNodes","nodeData_1","inputData","inboundLayerName","inboundNodeIndex","addUnprocessedNode","layerData","layerName","deserializeLayer","setFastWeightInitDuringBuild","inboundNodesData_1","layersFromConfig","layersFromConfig_1","processLayer","generic_utils.isObjectEmpty","layersFromConfig_2","currentUnprocessedNodesForLayer","currentUnprocessedNodesForLayer_1","processNode","inputLayersFromConfig_1","layerOutputTensors","outputLayersFromConfig_1","resetStates","DEFAULT_VALIDATION_BATCH_SIZE","iteratorOut","tfc.util","ys","tfc.Tensor","flattendXs","inputName","dataset","hasBatchesPerEpoch","batchesPerEpoch","optimizer","isTraining","validationData","valXs","valYs","isDatasetObject","validationBatches","standardizeTensorValidationData","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","standardizeCallbacks","configureCallbacks","history_1","stopTraining_","iterator","dataIterator","epochLogs","stepsDone","batchIndex","next","done","xsAndYs","standardizeDataIteratorOutput","batchLogs","outs","tfc.dispose","tfc.keep","disposeTensorsInLogs","valOuts","evaluateDataset","batches","evaluate","validationBatchSize","metricsNames","syncData","hasBatches","f","testFunction","isLazyIteratorObject","numExamples","xsAndYs_1","batchOuts","tfc.tidy","batchSize_1","batchOut","oldScalar","singletonOrArray","arrays","stop","sliceArraysByIndices","gather","batchStart","ins","valF","valIns","shuffle","validationSteps","checkNumSamples","indexArray","range","epochIndexArray1D_1","batches_1","makeBatches","batchIds","insBatch","testLoop","checkBatchSize","standardizedOuts","standardizeUserData","targets","inputValX","inputValY","valStandardized","valX","valY","validationSplit","splitAt","originalBatchSize","sliceArrays","valFunction","makeTestFunction","fitLoop","disposeNewTensors","refTensors","oldTensorIds","oldTensor","isDataTensor","isDataArray","checkBatchAxis","exceptionPrefix","gotUnexpectedData","isDataDict","names_1","ensureTensorsRank2OrHigher","refDim","setX","unique","setY","lossFns","keyLosses","losses.meanSquaredError","losses.binaryCrossentropy","losses.categoricalCrossentropy","loss","slicedYShape","slicedShape","targetDim","outDim","nestedMetrics","outputMetrics","Model","printSummary","optimizers.getOptimizer","Optimizer","lossFunctions","theLosses","l","losses.get","lossFunction_1","feedOutputShapes","feedLossFns","name_5","skipTargetIndices","metricsTensors","weightedLoss","collectMetrics","metricName","accFn","weightedMetricFn","metric","Metrics.binaryAccuracy","Metrics.binaryCrossentropy","losses.sparseCategoricalCrossentropy","Metrics.sparseCategoricalAccuracy","Metrics.sparseCategoricalCrossentropy","Metrics.categoricalAccuracy","Metrics.categoricalCrossentropy","suffix","metricFn","Metrics.get","metricResult","outputIndex","metricTensor","appendMetric","metrics_1","handleMetrics","stepsName","numSamples","outputsIsArray","retrieveSymbolicTensors","tensorValue","executeOutputs","symbolicTensorNames","pyListRepeat","outputsRemaining","layerOutputNames","remainingNames_1","batchOuts_1","K.concatAlongFirstAxis","xsRank2OrHigher","checkInputData","predictLoop","checkArrayLengths","standardizeInputData","checkLossAndTargetCompatibility","K.sliceAlongFirstAxis","dedupedOutLabels","newLabel","metricsValues","variables","param","minimize","totalLoss","lossFunction","meanMetric","regularizerLoss","valOutputs","fitTensors","fitDataset","standardizeOut","lossValues","losses_1","namedWeights","getWeights","handlerOrURL","handlers","io","getSaveHandlers","save","encodeWeights","getNamedWeights","weightDataAndSpecs","unusedArg","toJSON","modelTopology","weightData","weightSpecs","specs","modelAndWeightsConfig","deserialize","weightsManifest","loadWeights","pathPrefix","uniqueWeightValues","skipMismatches","pathOrIOHandler","getLoadHandlers","browserHTTPRequest","loadModelFromIOHandler","handler","load","artifacts","decodeWeights","_updatable","Sequential","some","modelLayer","isLayerModelInstance","Input","checkShape","outputTensor","lastLayerIndex","getExactlyOneShape","summary","predict","predictOnBatch","compile","fit","trainOnBatch","configArray","extraModelConfig","configArray_1","stopTraining","loadModelInternal","registerCallbackConstructor","Activation","Elu","K.elu","Selu","tfc.selu","Relu","Relu6","tfc.minimum","Linear","Sigmoid","tfc.sigmoid","HardSigmoid","K.hardSigmoid","Softplus","Softsign","K.softsign","Tanh","tfc.tanh","Softmax","activation","deserializeActivation","l1","l2","hasL1","hasL2","L1L2","regularization","asScalar","Regularizer","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","l1l2","deserializeRegularizer","ReLU","getExactlyOneTensor","clipByValue","baseConfig","DEFAULT_ALPHA","LeakyReLU","leakyRelu","alphaInitializer","DEFAULT_ALPHA_INITIALIZER","alphaRegularizer","getRegularizer","alphaConstraint","getConstraint","sharedAxes","PReLU","paramShape","addWeight","InputSpec","prelu","serializeInitializer","serializeRegularizer","serializeConstraint","ELU","elu","theta","DEFAULT_THETA","thetaTensor","ThresholdedReLU","greater","softmax","softmaxActivation","DEFAULT_AXIS","singleValue","inputLength","filterSize","padding","stride","dilation","outputLength","dimSize","strideSize","kernelSize","tfc.transpose","kernel","strides","dilationRate","tfc.conv1d","K.biasAdd","preprocessConv2DInput","tfc.conv2d","BaseConv","verifyArgs","normalizeArray","checkPaddingMode","getActivation","useBias","biasInitializer","DEFAULT_BIAS_INITIALIZER","biasConstraint","biasRegularizer","generic_utils.checkArrayTypeAndLength","serializeActivation","Conv","filters","kernelInitializer","DEFAULT_KERNEL_INITIALIZER","kernelConstraint","kernelRegularizer","channelAxis","inputDim","kernelShape","biasValue","conv1dWithBias","conv2dWithBias","newSpace","space","newDim","convOutputLength","Conv2D","Conv2DTranspose","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","deconvLength","tfc.conv2dTranspose","heightAxis","widthAxis","depthMultiplier","depthwiseInitializer","DEFAULT_DEPTHWISE_INITIALIZER","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","DEFAULT_POINTWISE_INITIALIZER","pointwiseRegularizer","pointwiseConstraint","SeparableConv","depthwiseKernelShape","pointwiseKernelShape","depthwiseKernel","pointwiseKernel","tfc.separableConv2d","SeparableConv2D","Conv1D","cropping","Cropping2D","K.sliceAlongAxis","DEFAULT_SIZE","UpSampling2D","resized","resizeNearestNeighbor","tfc.depthwiseConv2d","DepthwiseConv2D","depthwiseConv2d","rows","cols","outFilters","outRows","outCols","min","rateScalar","Dropout","invokeCallHook","noiseShape_1","getNoiseShape","K.inTrainPhase","K.dropout","units","Dense","inputLastDim","K.dot","Flatten","K.batchFlatten","RepeatVector","K.repeat","targetShape","isUnknown","Reshape","errorMsg","finalShape","known","unknown","originalSize","anyUnknownDims","fixUnknownDimension","dims","expectedSortedIndices","dimsIncludingBatch","Permute","outputDim","embeddingsInitializer","DEFAULT_EMBEDDINGS_INITIALIZER","embeddingsRegularizer","embeddingsConstraint","maskZero","Embedding","embeddings","notEqual","zerosLike","inLens","s1","s2","K.gather","as1D","Merge","shape1","shape2","computeElementwiseOpOutputShape","batchSizes","allRanks","reshapeRequired","reshapedInputs","inputDims","mathUtils.max","inputs_1","xNDim","K.expandDims","mergeFunction","transposed","inputs_2","xTransposed","mathUtils.arrayProd","mathUtils.range","yNDim","tfc.expandDims","Add","Multiply","Average","Maximum","Minimum","Concatenate","allNoneShape","inputShape_3","shapeSet","shapeWithoutConcatAxis","exists","shapeSet_1","K.concatenate","allNullMasks","concatenatedMasks","tfc.all","axesArray","diffShape","mulStrict","adjX","adjY","matMul","idx","squeezeAxes","normalize","Dot","interpretAxes","x1","x2","interpretAxis","batchDot","variance","beta","gamma","tfc.batchNormalization2d","tfc.batchNormalization3d","tfc.batchNormalization4d","reductionAxes","meanAndVariance","tfc.moments","batchNormalization","math_utils.range","broadcastMean","broadcastVariance","broadcastGamma","broadcastBeta","regularNormalizeBatchInTraining","broadcastNormalizeBatchInTraining","momentum","center","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","BatchNormalization","movingMean","movingVariance","broadcastShape","sortedReductionAxes","needsBroadcasting","broadcastMovingMean","broadcastMovingVariance","normalizeInference","normedTraining","doMovingAverage","variable","decay","origValue","updateDelta","pattern","tfc.pad","heightPadding","widthPadding","ZeroPadding2D","spatial2dPadding","poolSize","poolMode","checkPoolMode","paddingString","tfc.maxPool","tfc.avgPool","Pooling1D","poolingFunction","tfc.squeeze","MaxPooling1D","pool2d","AveragePooling1D","Pooling2D","MaxPooling2D","AveragePooling2D","GlobalPooling1D","GlobalAveragePooling1D","GlobalMaxPooling1D","GlobalPooling2D","GlobalAveragePooling2D","GlobalMaxPooling2D","initialState","constants","numConstants","toListOrNull","stepFunction","initialStates","goBackwards","unroll","needPerStepOutputs","tfc.reverse","lastOutput","perStepMasks","perStepOutputs","states","timeSteps","perStepInputs","tfc.unstack","currentInput","stepOutputs","maskedOutputs","stepMask","negStepMask","addStrict","newStates","state","tfc.stack","cell","StackedRNNCells","cells","stateSize","returnSequences","returnState","stateSpec","states_","keptStates","RNN","isArrayOfShapes","stateShape","stateSize_1","stateMask","s","numStates","stepInputShape","tfc.zeros","expectedShape","standardized","standardizeArgs","additionalInputs","additionalSpecs","initialState_1","fullInput","fullInputSpec","originalInputSpec","getInitialState","cellCallKwargs","rnnOutputs","rnn","K.tile","cellConfig","DEFAULT_ACTIVATION","recurrentInitializer","DEFAULT_RECURRENT_INITIALIZER","recurrentRegularizer","recurrentConstraint","dropout","math_utils.min","math_utils.max","recurrentDropout","dropoutMask","recurrentDropoutMask","SimpleRNNCell","recurrentKernel","prevOutput","h","generateDropoutMask","dpMask","recDpMask","RNNCell","SimpleRNN","recurrentActivation","DEFAULT_RECURRENT_ACTIVATION","implementation","GRUCell","hTMinus1","z","r","hh","matrixX","recurrentKernelValue","rk1","rk2","matrixInner","xZ","xR","xH","recurrentZ","recurrentR","recurrentH","GRU","unitForgetBias","LSTMCell","capturedBiasInit_1","capturedUnits_1","CustomInit","bI","bF","bCAndH","cTMinus1","c","o","z0","z1","z2","z3","LSTM","nestedStates","callInputs","newNestedStates","cellStates","cellConfigs","tuples","numParams","inputWeights","droppedInputs","Wrapper","newConfig","TimeDistributed","childInputShape","childOutputShape","timesteps","VALID_BIDIRECTIONAL_MERGE_MODES","generic_utils.checkStringTypeUnionValue","forwardLayer","backwardLayer","checkBidirectionalMergeMode","mergeMode","_trainable","Bidirectional","numWeights","numeightsOver2","layerShapes","stateSpecs","isSymbolicTensor","additionalInputs_1","yRev","forwardState","backwardState","rnnLayer","averagePooling1d","averagePooling2d","globalMaxPool1d","globalMaxPooling1d","globalMaxPool2d","globalMaxPooling2d","maxPool1d","maxPooling1d","maxPool2d","maxPooling2d","metrics.binaryAccuracy","metrics.binaryCrossentropy","metrics.sparseCategoricalAccuracy","metrics.categoricalAccuracy","metrics.categoricalCrossentropy","metrics.precision","metrics.recall","losses.cosineProximity","losses.meanAbsoluteError","losses.meanAbsolutePercentageError","regularizers.l1","regularizers.l2","Callback"],"mappings":"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"}